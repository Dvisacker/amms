/**

Generated by the following Solidity interface...
```solidity
interface GetVe33PoolData {
    constructor(address[] pools);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GetVe33PoolData {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506040516112ce3803806112ce83398181016040528101906100319190610d87565b5f815167ffffffffffffffff81111561004d5761004c610bf1565b5b60405190808252806020026020018201604052801561008657816020015b610073610b33565b81526020019060019003908161006b5790505b5090505f5b8251811015610aae575f8382815181106100a8576100a7610dce565b5b602002602001015190506100c181610adc60201b60201c565b156100cc5750610aa3565b6100d4610b33565b8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101419190610dfb565b815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e49190610dfb565b816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061022d815f0151610adc60201b60201c565b15610239575050610aa3565b61024c8160600151610adc60201b60201c565b15610258575050610aa3565b5f80825f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103079190610e78565b5f604051808303815f8787f1925050503d805f8114610341576040519150601f19603f3d011682016040523d82523d5f602084013e610346565b606091505b509150915081156103b5575f60208251036103a5578180602001905181019061036f9190610ec1565b90505f81148061037f575060ff81115b1561038e575050505050610aa3565b80846040019060ff16908160ff16815250506103af565b5050505050610aa3565b506103be565b50505050610aa3565b5f80846060015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046e9190610e78565b5f604051808303815f8787f1925050503d805f81146104a8576040519150601f19603f3d011682016040523d82523d5f602084013e6104ad565b606091505b50915091508115610520575f602082510361050e57818060200190518101906104d69190610ec1565b90505f8114806104e6575060ff81115b156104f75750505050505050610aa3565b808660a0019060ff16908160ff168152505061051a565b50505050505050610aa3565b5061052b565b505050505050610aa3565b5f80865f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105da9190610e78565b5f604051808303815f8787f1925050503d805f8114610614576040519150601f19603f3d011682016040523d82523d5f602084013e610619565b606091505b50915091508115610683575f602082510361064957818060200190518101906106429190610f1f565b9050610673565b5f8280602001905181019061065e9190610fec565b905061066f81610b0d60201b60201c565b9150505b8088602001818152505050610690565b5f801b8760200181815250505b5f80886060015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107409190610e78565b5f604051808303815f8787f1925050503d805f811461077a576040519150601f19603f3d011682016040523d82523d5f602084013e61077f565b606091505b509150915081156107e9575f60208251036107af57818060200190518101906107a89190610f1f565b90506107d9565b5f828060200190518101906107c49190610fec565b90506107d581610b0d60201b60201c565b9150505b808a6080018181525050506107f6565b5f801b8960800181815250505b8973ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561085e57506040513d601f19601f8201168201806040525081019061085b9190610dfb565b60015b6108a0575f89610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506108db565b808a610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505b8973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa92505050801561094357506040513d601f19601f820116820180604052508101906109409190611033565b60015b610960575f8960c00181815250505f8960e00181815250506109e4565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311806109ad57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82115b156109cb575f8c60c00181815250505f8c60e00181815250506109e0565b828c60c0018181525050818c60e00181815250505b5050505b8973ffffffffffffffffffffffffffffffffffffffff166322be3de16040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610a4c57506040513d601f19601f82011682018060405250810190610a4991906110b8565b60015b610a66575f89610120019015159081151581525050610a79565b808a610120019015159081151581525050505b888c8c81518110610a8d57610a8c610dce565b5b6020026020010181905250505050505050505050505b80600101905061008b565b505f81604051602001610ac191906112ad565b60405160208183030381529060405290506020810180590381f35b5f808273ffffffffffffffffffffffffffffffffffffffff163b03610b045760019050610b08565b5f90505b919050565b5f808290505f815103610b25575f801b915050610b2e565b60208301519150505b919050565b6040518061014001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f80191681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f80191681526020015f60ff1681526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f151581525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610c2782610be1565b810181811067ffffffffffffffff82111715610c4657610c45610bf1565b5b80604052505050565b5f610c58610bcc565b9050610c648282610c1e565b919050565b5f67ffffffffffffffff821115610c8357610c82610bf1565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cc182610c98565b9050919050565b610cd181610cb7565b8114610cdb575f80fd5b50565b5f81519050610cec81610cc8565b92915050565b5f610d04610cff84610c69565b610c4f565b90508083825260208201905060208402830185811115610d2757610d26610c94565b5b835b81811015610d505780610d3c8882610cde565b845260208401935050602081019050610d29565b5050509392505050565b5f82601f830112610d6e57610d6d610bdd565b5b8151610d7e848260208601610cf2565b91505092915050565b5f60208284031215610d9c57610d9b610bd5565b5b5f82015167ffffffffffffffff811115610db957610db8610bd9565b5b610dc584828501610d5a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215610e1057610e0f610bd5565b5b5f610e1d84828501610cde565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610e5282610e26565b610e5c8185610e30565b9350610e6c818560208601610e3a565b80840191505092915050565b5f610e838284610e48565b915081905092915050565b5f819050919050565b610ea081610e8e565b8114610eaa575f80fd5b50565b5f81519050610ebb81610e97565b92915050565b5f60208284031215610ed657610ed5610bd5565b5b5f610ee384828501610ead565b91505092915050565b5f819050919050565b610efe81610eec565b8114610f08575f80fd5b50565b5f81519050610f1981610ef5565b92915050565b5f60208284031215610f3457610f33610bd5565b5b5f610f4184828501610f0b565b91505092915050565b5f80fd5b5f67ffffffffffffffff821115610f6857610f67610bf1565b5b610f7182610be1565b9050602081019050919050565b5f610f90610f8b84610f4e565b610c4f565b905082815260208101848484011115610fac57610fab610f4a565b5b610fb7848285610e3a565b509392505050565b5f82601f830112610fd357610fd2610bdd565b5b8151610fe3848260208601610f7e565b91505092915050565b5f6020828403121561100157611000610bd5565b5b5f82015167ffffffffffffffff81111561101e5761101d610bd9565b5b61102a84828501610fbf565b91505092915050565b5f805f6060848603121561104a57611049610bd5565b5b5f61105786828701610ead565b935050602061106886828701610ead565b925050604061107986828701610ead565b9150509250925092565b5f8115159050919050565b61109781611083565b81146110a1575f80fd5b50565b5f815190506110b28161108e565b92915050565b5f602082840312156110cd576110cc610bd5565b5b5f6110da848285016110a4565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61111581610cb7565b82525050565b61112481610eec565b82525050565b5f60ff82169050919050565b61113f8161112a565b82525050565b61114e81610e8e565b82525050565b61115d81611083565b82525050565b61014082015f8201516111785f85018261110c565b50602082015161118b602085018261111b565b50604082015161119e6040850182611136565b5060608201516111b1606085018261110c565b5060808201516111c4608085018261111b565b5060a08201516111d760a0850182611136565b5060c08201516111ea60c0850182611145565b5060e08201516111fd60e0850182611145565b5061010082015161121261010085018261110c565b50610120820151611227610120850182611154565b50505050565b5f6112388383611163565b6101408301905092915050565b5f602082019050919050565b5f61125b826110e3565b61126581856110ed565b9350611270836110fd565b805f5b838110156112a0578151611287888261122d565b975061129283611245565b925050600181019050611273565b5085935050505092915050565b5f6020820190508181035f8301526112c58184611251565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x12\xCE8\x03\x80a\x12\xCE\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\r\x87V[_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\x0B\xF1V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x86W\x81` \x01[a\0sa\x0B3V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0kW\x90P[P\x90P_[\x82Q\x81\x10\x15a\n\xAEW_\x83\x82\x81Q\x81\x10a\0\xA8Wa\0\xA7a\r\xCEV[[` \x02` \x01\x01Q\x90Pa\0\xC1\x81a\n\xDC` \x1B` \x1CV[\x15a\0\xCCWPa\n\xA3V[a\0\xD4a\x0B3V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01A\x91\x90a\r\xFBV[\x81_\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xE4\x91\x90a\r\xFBV[\x81``\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x02-\x81_\x01Qa\n\xDC` \x1B` \x1CV[\x15a\x029WPPa\n\xA3V[a\x02L\x81``\x01Qa\n\xDC` \x1B` \x1CV[\x15a\x02XWPPa\n\xA3V[_\x80\x82_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x03\x07\x91\x90a\x0ExV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x03AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03FV[``\x91P[P\x91P\x91P\x81\x15a\x03\xB5W_` \x82Q\x03a\x03\xA5W\x81\x80` \x01\x90Q\x81\x01\x90a\x03o\x91\x90a\x0E\xC1V[\x90P_\x81\x14\x80a\x03\x7FWP`\xFF\x81\x11[\x15a\x03\x8EWPPPPPa\n\xA3V[\x80\x84`@\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x03\xAFV[PPPPPa\n\xA3V[Pa\x03\xBEV[PPPPa\n\xA3V[_\x80\x84``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x04n\x91\x90a\x0ExV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x04\xA8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\xADV[``\x91P[P\x91P\x91P\x81\x15a\x05 W_` \x82Q\x03a\x05\x0EW\x81\x80` \x01\x90Q\x81\x01\x90a\x04\xD6\x91\x90a\x0E\xC1V[\x90P_\x81\x14\x80a\x04\xE6WP`\xFF\x81\x11[\x15a\x04\xF7WPPPPPPPa\n\xA3V[\x80\x86`\xA0\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x05\x1AV[PPPPPPPa\n\xA3V[Pa\x05+V[PPPPPPa\n\xA3V[_\x80\x86_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x05\xDA\x91\x90a\x0ExV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x06\x14W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x06\x19V[``\x91P[P\x91P\x91P\x81\x15a\x06\x83W_` \x82Q\x03a\x06IW\x81\x80` \x01\x90Q\x81\x01\x90a\x06B\x91\x90a\x0F\x1FV[\x90Pa\x06sV[_\x82\x80` \x01\x90Q\x81\x01\x90a\x06^\x91\x90a\x0F\xECV[\x90Pa\x06o\x81a\x0B\r` \x1B` \x1CV[\x91PP[\x80\x88` \x01\x81\x81RPPPa\x06\x90V[_\x80\x1B\x87` \x01\x81\x81RPP[_\x80\x88``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x07@\x91\x90a\x0ExV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x07zW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x07\x7FV[``\x91P[P\x91P\x91P\x81\x15a\x07\xE9W_` \x82Q\x03a\x07\xAFW\x81\x80` \x01\x90Q\x81\x01\x90a\x07\xA8\x91\x90a\x0F\x1FV[\x90Pa\x07\xD9V[_\x82\x80` \x01\x90Q\x81\x01\x90a\x07\xC4\x91\x90a\x0F\xECV[\x90Pa\x07\xD5\x81a\x0B\r` \x1B` \x1CV[\x91PP[\x80\x8A`\x80\x01\x81\x81RPPPa\x07\xF6V[_\x80\x1B\x89`\x80\x01\x81\x81RPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC4Z\x01U`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x08^WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08[\x91\x90a\r\xFBV[`\x01[a\x08\xA0W_\x89a\x01\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x08\xDBV[\x80\x8Aa\x01\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t\x02\xF1\xAC`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01```@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\tCWP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t@\x91\x90a\x103V[`\x01[a\t`W_\x89`\xC0\x01\x81\x81RPP_\x89`\xE0\x01\x81\x81RPPa\t\xE4V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x80a\t\xADWP\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11[\x15a\t\xCBW_\x8C`\xC0\x01\x81\x81RPP_\x8C`\xE0\x01\x81\x81RPPa\t\xE0V[\x82\x8C`\xC0\x01\x81\x81RPP\x81\x8C`\xE0\x01\x81\x81RPP[PPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\"\xBE=\xE1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\nLWP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\nI\x91\x90a\x10\xB8V[`\x01[a\nfW_\x89a\x01 \x01\x90\x15\x15\x90\x81\x15\x15\x81RPPa\nyV[\x80\x8Aa\x01 \x01\x90\x15\x15\x90\x81\x15\x15\x81RPPP[\x88\x8C\x8C\x81Q\x81\x10a\n\x8DWa\n\x8Ca\r\xCEV[[` \x02` \x01\x01\x81\x90RPPPPPPPPPPP[\x80`\x01\x01\x90Pa\0\x8BV[P_\x81`@Q` \x01a\n\xC1\x91\x90a\x12\xADV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a\x0B\x04W`\x01\x90Pa\x0B\x08V[_\x90P[\x91\x90PV[_\x80\x82\x90P_\x81Q\x03a\x0B%W_\x80\x1B\x91PPa\x0B.V[` \x83\x01Q\x91PP[\x91\x90PV[`@Q\x80a\x01@\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x80\x19\x16\x81R` \x01_`\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x80\x19\x16\x81R` \x01_`\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x15\x15\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x0C'\x82a\x0B\xE1V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0CFWa\x0CEa\x0B\xF1V[[\x80`@RPPPV[_a\x0CXa\x0B\xCCV[\x90Pa\x0Cd\x82\x82a\x0C\x1EV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0C\x83Wa\x0C\x82a\x0B\xF1V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0C\xC1\x82a\x0C\x98V[\x90P\x91\x90PV[a\x0C\xD1\x81a\x0C\xB7V[\x81\x14a\x0C\xDBW_\x80\xFD[PV[_\x81Q\x90Pa\x0C\xEC\x81a\x0C\xC8V[\x92\x91PPV[_a\r\x04a\x0C\xFF\x84a\x0CiV[a\x0COV[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\r'Wa\r&a\x0C\x94V[[\x83[\x81\x81\x10\x15a\rPW\x80a\r<\x88\x82a\x0C\xDEV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\r)V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\rnWa\rma\x0B\xDDV[[\x81Qa\r~\x84\x82` \x86\x01a\x0C\xF2V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\r\x9CWa\r\x9Ba\x0B\xD5V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xB9Wa\r\xB8a\x0B\xD9V[[a\r\xC5\x84\x82\x85\x01a\rZV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x0E\x10Wa\x0E\x0Fa\x0B\xD5V[[_a\x0E\x1D\x84\x82\x85\x01a\x0C\xDEV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x0ER\x82a\x0E&V[a\x0E\\\x81\x85a\x0E0V[\x93Pa\x0El\x81\x85` \x86\x01a\x0E:V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0E\x83\x82\x84a\x0EHV[\x91P\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0E\xA0\x81a\x0E\x8EV[\x81\x14a\x0E\xAAW_\x80\xFD[PV[_\x81Q\x90Pa\x0E\xBB\x81a\x0E\x97V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0E\xD6Wa\x0E\xD5a\x0B\xD5V[[_a\x0E\xE3\x84\x82\x85\x01a\x0E\xADV[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0E\xFE\x81a\x0E\xECV[\x81\x14a\x0F\x08W_\x80\xFD[PV[_\x81Q\x90Pa\x0F\x19\x81a\x0E\xF5V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0F4Wa\x0F3a\x0B\xD5V[[_a\x0FA\x84\x82\x85\x01a\x0F\x0BV[\x91PP\x92\x91PPV[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0FhWa\x0Fga\x0B\xF1V[[a\x0Fq\x82a\x0B\xE1V[\x90P` \x81\x01\x90P\x91\x90PV[_a\x0F\x90a\x0F\x8B\x84a\x0FNV[a\x0COV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x0F\xACWa\x0F\xABa\x0FJV[[a\x0F\xB7\x84\x82\x85a\x0E:V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0F\xD3Wa\x0F\xD2a\x0B\xDDV[[\x81Qa\x0F\xE3\x84\x82` \x86\x01a\x0F~V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x10\x01Wa\x10\0a\x0B\xD5V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\x1EWa\x10\x1Da\x0B\xD9V[[a\x10*\x84\x82\x85\x01a\x0F\xBFV[\x91PP\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x10JWa\x10Ia\x0B\xD5V[[_a\x10W\x86\x82\x87\x01a\x0E\xADV[\x93PP` a\x10h\x86\x82\x87\x01a\x0E\xADV[\x92PP`@a\x10y\x86\x82\x87\x01a\x0E\xADV[\x91PP\x92P\x92P\x92V[_\x81\x15\x15\x90P\x91\x90PV[a\x10\x97\x81a\x10\x83V[\x81\x14a\x10\xA1W_\x80\xFD[PV[_\x81Q\x90Pa\x10\xB2\x81a\x10\x8EV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x10\xCDWa\x10\xCCa\x0B\xD5V[[_a\x10\xDA\x84\x82\x85\x01a\x10\xA4V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x11\x15\x81a\x0C\xB7V[\x82RPPV[a\x11$\x81a\x0E\xECV[\x82RPPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x11?\x81a\x11*V[\x82RPPV[a\x11N\x81a\x0E\x8EV[\x82RPPV[a\x11]\x81a\x10\x83V[\x82RPPV[a\x01@\x82\x01_\x82\x01Qa\x11x_\x85\x01\x82a\x11\x0CV[P` \x82\x01Qa\x11\x8B` \x85\x01\x82a\x11\x1BV[P`@\x82\x01Qa\x11\x9E`@\x85\x01\x82a\x116V[P``\x82\x01Qa\x11\xB1``\x85\x01\x82a\x11\x0CV[P`\x80\x82\x01Qa\x11\xC4`\x80\x85\x01\x82a\x11\x1BV[P`\xA0\x82\x01Qa\x11\xD7`\xA0\x85\x01\x82a\x116V[P`\xC0\x82\x01Qa\x11\xEA`\xC0\x85\x01\x82a\x11EV[P`\xE0\x82\x01Qa\x11\xFD`\xE0\x85\x01\x82a\x11EV[Pa\x01\0\x82\x01Qa\x12\x12a\x01\0\x85\x01\x82a\x11\x0CV[Pa\x01 \x82\x01Qa\x12'a\x01 \x85\x01\x82a\x11TV[PPPPV[_a\x128\x83\x83a\x11cV[a\x01@\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x12[\x82a\x10\xE3V[a\x12e\x81\x85a\x10\xEDV[\x93Pa\x12p\x83a\x10\xFDV[\x80_[\x83\x81\x10\x15a\x12\xA0W\x81Qa\x12\x87\x88\x82a\x12-V[\x97Pa\x12\x92\x83a\x12EV[\x92PP`\x01\x81\x01\x90Pa\x12sV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x12\xC5\x81\x84a\x12QV[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea2646970667358221220da7413009b3d635ca2e360f150687fcef8b1fd2bb7fef15589c7a8bd44db13c264736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 \xDAt\x13\0\x9B=c\\\xA2\xE3`\xF1Ph\x7F\xCE\xF8\xB1\xFD+\xB7\xFE\xF1U\x89\xC7\xA8\xBDD\xDB\x13\xC2dsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.pools,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pools: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetVe33PoolData`](self) contract instance.

See the [wrapper's documentation](`GetVe33PoolDataInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetVe33PoolDataInstance<T, P, N> {
        GetVe33PoolDataInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetVe33PoolDataInstance<T, P, N>>,
    > {
        GetVe33PoolDataInstance::<T, P, N>::deploy(provider, pools)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetVe33PoolDataInstance::<T, P, N>::deploy_builder(provider, pools)
    }
    /**A [`GetVe33PoolData`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetVe33PoolData`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetVe33PoolDataInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GetVe33PoolDataInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetVe33PoolDataInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetVe33PoolDataInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetVe33PoolData`](self) contract instance.

See the [wrapper's documentation](`GetVe33PoolDataInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetVe33PoolDataInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, pools);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { pools },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GetVe33PoolDataInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GetVe33PoolDataInstance<T, P, N> {
            GetVe33PoolDataInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetVe33PoolDataInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetVe33PoolDataInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
