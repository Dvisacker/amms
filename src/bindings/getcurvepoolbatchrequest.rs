/**

Generated by the following Solidity interface...
```solidity
interface GetCurvePoolBatchRequest {
    constructor(address[] pools);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetCurvePoolBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50604051610ed7380380610ed783398181016040528101906100319190610860565b5f815167ffffffffffffffff81111561004d5761004c6106ca565b5b60405190808252806020026020018201604052801561008657816020015b6100736105c7565b81526020019060019003908161006b5790505b5090505f5b8251811015610551575f8382815181106100a8576100a76108a7565b5b602002602001015190506100c18161057f60201b60201c565b156100cc5750610546565b6100d46105c7565b5f5b60088110156103b8578273ffffffffffffffffffffffffffffffffffffffff1663c6610657826040518263ffffffff1660e01b815260040161011891906108ec565b602060405180830381865afa92505050801561015257506040513d601f19601f8201168201806040525081019061014f9190610905565b60015b156103b85780835f0151836008811061016e5761016d6108a7565b5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff16634903b0d1836040518263ffffffff1660e01b81526004016101de91906108ec565b602060405180830381865afa1580156101f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061021d919061095a565b83602001518360088110610234576102336108a7565b5b6020020181815250505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146103aa578073ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156102d857506040513d601f19601f820116820180604052508101906102d591906109bb565b60015b156103085780846040015184600881106102f5576102f46108a7565b5b602002019060ff16908160ff1681525050505b8073ffffffffffffffffffffffffffffffffffffffff166395d89b416040518163ffffffff1660e01b81526004015f60405180830381865afa92505050801561037357506040513d5f823e3d601f19601f820116820180604052508101906103709190610a96565b60015b156103a957610387816105a160201b60201c565b8460600151846008811061039e5761039d6108a7565b5b602002018181525050505b5b5080806001019150506100d6565b508173ffffffffffffffffffffffffffffffffffffffff1663bb7b8b806040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561042157506040513d601f19601f8201168201806040525081019061041e919061095a565b60015b156104325780826080018181525050505b8173ffffffffffffffffffffffffffffffffffffffff1663f446c1d06040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561049a57506040513d601f19601f82011682018060405250810190610497919061095a565b60015b156104ab57808260a0018181525050505b8173ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561051357506040513d601f19601f82011682018060405250810190610510919061095a565b60015b1561052457808260c0018181525050505b80848481518110610538576105376108a7565b5b602002602001018190525050505b80600101905061008b565b505f816040516020016105649190610eb6565b60405160208183030381529060405290506020810180590381f35b5f808273ffffffffffffffffffffffffffffffffffffffff163b149050919050565b5f808290505f8151036105b9575f801b9150506105c2565b60208301519150505b919050565b6040518060e001604052806105da610619565b81526020016105e761063c565b81526020016105f461065f565b8152602001610601610682565b81526020015f81526020015f81526020015f81525090565b604051806101000160405280600890602082028036833780820191505090505090565b604051806101000160405280600890602082028036833780820191505090505090565b604051806101000160405280600890602082028036833780820191505090505090565b604051806101000160405280600890602082028036833780820191505090505090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610700826106ba565b810181811067ffffffffffffffff8211171561071f5761071e6106ca565b5b80604052505050565b5f6107316106a5565b905061073d82826106f7565b919050565b5f67ffffffffffffffff82111561075c5761075b6106ca565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61079a82610771565b9050919050565b6107aa81610790565b81146107b4575f80fd5b50565b5f815190506107c5816107a1565b92915050565b5f6107dd6107d884610742565b610728565b90508083825260208201905060208402830185811115610800576107ff61076d565b5b835b81811015610829578061081588826107b7565b845260208401935050602081019050610802565b5050509392505050565b5f82601f830112610847576108466106b6565b5b81516108578482602086016107cb565b91505092915050565b5f60208284031215610875576108746106ae565b5b5f82015167ffffffffffffffff811115610892576108916106b2565b5b61089e84828501610833565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f819050919050565b6108e6816108d4565b82525050565b5f6020820190506108ff5f8301846108dd565b92915050565b5f6020828403121561091a576109196106ae565b5b5f610927848285016107b7565b91505092915050565b610939816108d4565b8114610943575f80fd5b50565b5f8151905061095481610930565b92915050565b5f6020828403121561096f5761096e6106ae565b5b5f61097c84828501610946565b91505092915050565b5f60ff82169050919050565b61099a81610985565b81146109a4575f80fd5b50565b5f815190506109b581610991565b92915050565b5f602082840312156109d0576109cf6106ae565b5b5f6109dd848285016109a7565b91505092915050565b5f80fd5b5f67ffffffffffffffff821115610a0457610a036106ca565b5b610a0d826106ba565b9050602081019050919050565b8281835e5f83830152505050565b5f610a3a610a35846109ea565b610728565b905082815260208101848484011115610a5657610a556109e6565b5b610a61848285610a1a565b509392505050565b5f82601f830112610a7d57610a7c6106b6565b5b8151610a8d848260208601610a28565b91505092915050565b5f60208284031215610aab57610aaa6106ae565b5b5f82015167ffffffffffffffff811115610ac857610ac76106b2565b5b610ad484828501610a69565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f60089050919050565b5f81905092915050565b5f819050919050565b610b2c81610790565b82525050565b5f610b3d8383610b23565b60208301905092915050565b5f602082019050919050565b610b5e81610b06565b610b688184610b10565b9250610b7382610b1a565b805f5b83811015610ba3578151610b8a8782610b32565b9650610b9583610b49565b925050600181019050610b76565b505050505050565b5f60089050919050565b5f81905092915050565b5f819050919050565b610bd1816108d4565b82525050565b5f610be28383610bc8565b60208301905092915050565b5f602082019050919050565b610c0381610bab565b610c0d8184610bb5565b9250610c1882610bbf565b805f5b83811015610c48578151610c2f8782610bd7565b9650610c3a83610bee565b925050600181019050610c1b565b505050505050565b5f60089050919050565b5f81905092915050565b5f819050919050565b610c7681610985565b82525050565b5f610c878383610c6d565b60208301905092915050565b5f602082019050919050565b610ca881610c50565b610cb28184610c5a565b9250610cbd82610c64565b805f5b83811015610ced578151610cd48782610c7c565b9650610cdf83610c93565b925050600181019050610cc0565b505050505050565b5f60089050919050565b5f81905092915050565b5f819050919050565b5f819050919050565b610d2481610d12565b82525050565b5f610d358383610d1b565b60208301905092915050565b5f602082019050919050565b610d5681610cf5565b610d608184610cff565b9250610d6b82610d09565b805f5b83811015610d9b578151610d828782610d2a565b9650610d8d83610d41565b925050600181019050610d6e565b505050505050565b61046082015f820151610db85f850182610b55565b506020820151610dcc610100850182610bfa565b506040820151610de0610200850182610c9f565b506060820151610df4610300850182610d4d565b506080820151610e08610400850182610bc8565b5060a0820151610e1c610420850182610bc8565b5060c0820151610e30610440850182610bc8565b50505050565b5f610e418383610da3565b6104608301905092915050565b5f602082019050919050565b5f610e6482610add565b610e6e8185610ae7565b9350610e7983610af7565b805f5b83811015610ea9578151610e908882610e36565b9750610e9b83610e4e565b925050600181019050610e7c565b5085935050505092915050565b5f6020820190508181035f830152610ece8184610e5a565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x0E\xD78\x03\x80a\x0E\xD7\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\x08`V[_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\x06\xCAV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x86W\x81` \x01[a\0sa\x05\xC7V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0kW\x90P[P\x90P_[\x82Q\x81\x10\x15a\x05QW_\x83\x82\x81Q\x81\x10a\0\xA8Wa\0\xA7a\x08\xA7V[[` \x02` \x01\x01Q\x90Pa\0\xC1\x81a\x05\x7F` \x1B` \x1CV[\x15a\0\xCCWPa\x05FV[a\0\xD4a\x05\xC7V[_[`\x08\x81\x10\x15a\x03\xB8W\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6a\x06W\x82`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\x18\x91\x90a\x08\xECV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x01RWP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01O\x91\x90a\t\x05V[`\x01[\x15a\x03\xB8W\x80\x83_\x01Q\x83`\x08\x81\x10a\x01nWa\x01ma\x08\xA7V[[` \x02\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cI\x03\xB0\xD1\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x01\xDE\x91\x90a\x08\xECV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xF9W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x1D\x91\x90a\tZV[\x83` \x01Q\x83`\x08\x81\x10a\x024Wa\x023a\x08\xA7V[[` \x02\x01\x81\x81RPP_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x03\xAAW\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x02\xD8WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\xD5\x91\x90a\t\xBBV[`\x01[\x15a\x03\x08W\x80\x84`@\x01Q\x84`\x08\x81\x10a\x02\xF5Wa\x02\xF4a\x08\xA7V[[` \x02\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPP[\x80s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x95\xD8\x9BA`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x03sWP`@Q=_\x82>=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03p\x91\x90a\n\x96V[`\x01[\x15a\x03\xA9Wa\x03\x87\x81a\x05\xA1` \x1B` \x1CV[\x84``\x01Q\x84`\x08\x81\x10a\x03\x9EWa\x03\x9Da\x08\xA7V[[` \x02\x01\x81\x81RPPP[[P\x80\x80`\x01\x01\x91PPa\0\xD6V[P\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xBB{\x8B\x80`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x04!WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x1E\x91\x90a\tZV[`\x01[\x15a\x042W\x80\x82`\x80\x01\x81\x81RPPP[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF4F\xC1\xD0`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x04\x9AWP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x97\x91\x90a\tZV[`\x01[\x15a\x04\xABW\x80\x82`\xA0\x01\x81\x81RPPP[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xDD\xCA?C`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x05\x13WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x10\x91\x90a\tZV[`\x01[\x15a\x05$W\x80\x82`\xC0\x01\x81\x81RPPP[\x80\x84\x84\x81Q\x81\x10a\x058Wa\x057a\x08\xA7V[[` \x02` \x01\x01\x81\x90RPPP[\x80`\x01\x01\x90Pa\0\x8BV[P_\x81`@Q` \x01a\x05d\x91\x90a\x0E\xB6V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14\x90P\x91\x90PV[_\x80\x82\x90P_\x81Q\x03a\x05\xB9W_\x80\x1B\x91PPa\x05\xC2V[` \x83\x01Q\x91PP[\x91\x90PV[`@Q\x80`\xE0\x01`@R\x80a\x05\xDAa\x06\x19V[\x81R` \x01a\x05\xE7a\x06<V[\x81R` \x01a\x05\xF4a\x06_V[\x81R` \x01a\x06\x01a\x06\x82V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81RP\x90V[`@Q\x80a\x01\0\x01`@R\x80`\x08\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[`@Q\x80a\x01\0\x01`@R\x80`\x08\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[`@Q\x80a\x01\0\x01`@R\x80`\x08\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[`@Q\x80a\x01\0\x01`@R\x80`\x08\x90` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90PP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x07\0\x82a\x06\xBAV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x07\x1FWa\x07\x1Ea\x06\xCAV[[\x80`@RPPPV[_a\x071a\x06\xA5V[\x90Pa\x07=\x82\x82a\x06\xF7V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x07\\Wa\x07[a\x06\xCAV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x07\x9A\x82a\x07qV[\x90P\x91\x90PV[a\x07\xAA\x81a\x07\x90V[\x81\x14a\x07\xB4W_\x80\xFD[PV[_\x81Q\x90Pa\x07\xC5\x81a\x07\xA1V[\x92\x91PPV[_a\x07\xDDa\x07\xD8\x84a\x07BV[a\x07(V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x08\0Wa\x07\xFFa\x07mV[[\x83[\x81\x81\x10\x15a\x08)W\x80a\x08\x15\x88\x82a\x07\xB7V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x08\x02V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x08GWa\x08Fa\x06\xB6V[[\x81Qa\x08W\x84\x82` \x86\x01a\x07\xCBV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x08uWa\x08ta\x06\xAEV[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\x92Wa\x08\x91a\x06\xB2V[[a\x08\x9E\x84\x82\x85\x01a\x083V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_\x81\x90P\x91\x90PV[a\x08\xE6\x81a\x08\xD4V[\x82RPPV[_` \x82\x01\x90Pa\x08\xFF_\x83\x01\x84a\x08\xDDV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\t\x1AWa\t\x19a\x06\xAEV[[_a\t'\x84\x82\x85\x01a\x07\xB7V[\x91PP\x92\x91PPV[a\t9\x81a\x08\xD4V[\x81\x14a\tCW_\x80\xFD[PV[_\x81Q\x90Pa\tT\x81a\t0V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\toWa\tna\x06\xAEV[[_a\t|\x84\x82\x85\x01a\tFV[\x91PP\x92\x91PPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\t\x9A\x81a\t\x85V[\x81\x14a\t\xA4W_\x80\xFD[PV[_\x81Q\x90Pa\t\xB5\x81a\t\x91V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\t\xD0Wa\t\xCFa\x06\xAEV[[_a\t\xDD\x84\x82\x85\x01a\t\xA7V[\x91PP\x92\x91PPV[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\n\x04Wa\n\x03a\x06\xCAV[[a\n\r\x82a\x06\xBAV[\x90P` \x81\x01\x90P\x91\x90PV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\n:a\n5\x84a\t\xEAV[a\x07(V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\nVWa\nUa\t\xE6V[[a\na\x84\x82\x85a\n\x1AV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\n}Wa\n|a\x06\xB6V[[\x81Qa\n\x8D\x84\x82` \x86\x01a\n(V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\n\xABWa\n\xAAa\x06\xAEV[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xC8Wa\n\xC7a\x06\xB2V[[a\n\xD4\x84\x82\x85\x01a\niV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_`\x08\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0B,\x81a\x07\x90V[\x82RPPV[_a\x0B=\x83\x83a\x0B#V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[a\x0B^\x81a\x0B\x06V[a\x0Bh\x81\x84a\x0B\x10V[\x92Pa\x0Bs\x82a\x0B\x1AV[\x80_[\x83\x81\x10\x15a\x0B\xA3W\x81Qa\x0B\x8A\x87\x82a\x0B2V[\x96Pa\x0B\x95\x83a\x0BIV[\x92PP`\x01\x81\x01\x90Pa\x0BvV[PPPPPPV[_`\x08\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0B\xD1\x81a\x08\xD4V[\x82RPPV[_a\x0B\xE2\x83\x83a\x0B\xC8V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[a\x0C\x03\x81a\x0B\xABV[a\x0C\r\x81\x84a\x0B\xB5V[\x92Pa\x0C\x18\x82a\x0B\xBFV[\x80_[\x83\x81\x10\x15a\x0CHW\x81Qa\x0C/\x87\x82a\x0B\xD7V[\x96Pa\x0C:\x83a\x0B\xEEV[\x92PP`\x01\x81\x01\x90Pa\x0C\x1BV[PPPPPPV[_`\x08\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0Cv\x81a\t\x85V[\x82RPPV[_a\x0C\x87\x83\x83a\x0CmV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[a\x0C\xA8\x81a\x0CPV[a\x0C\xB2\x81\x84a\x0CZV[\x92Pa\x0C\xBD\x82a\x0CdV[\x80_[\x83\x81\x10\x15a\x0C\xEDW\x81Qa\x0C\xD4\x87\x82a\x0C|V[\x96Pa\x0C\xDF\x83a\x0C\x93V[\x92PP`\x01\x81\x01\x90Pa\x0C\xC0V[PPPPPPV[_`\x08\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\r$\x81a\r\x12V[\x82RPPV[_a\r5\x83\x83a\r\x1BV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[a\rV\x81a\x0C\xF5V[a\r`\x81\x84a\x0C\xFFV[\x92Pa\rk\x82a\r\tV[\x80_[\x83\x81\x10\x15a\r\x9BW\x81Qa\r\x82\x87\x82a\r*V[\x96Pa\r\x8D\x83a\rAV[\x92PP`\x01\x81\x01\x90Pa\rnV[PPPPPPV[a\x04`\x82\x01_\x82\x01Qa\r\xB8_\x85\x01\x82a\x0BUV[P` \x82\x01Qa\r\xCCa\x01\0\x85\x01\x82a\x0B\xFAV[P`@\x82\x01Qa\r\xE0a\x02\0\x85\x01\x82a\x0C\x9FV[P``\x82\x01Qa\r\xF4a\x03\0\x85\x01\x82a\rMV[P`\x80\x82\x01Qa\x0E\x08a\x04\0\x85\x01\x82a\x0B\xC8V[P`\xA0\x82\x01Qa\x0E\x1Ca\x04 \x85\x01\x82a\x0B\xC8V[P`\xC0\x82\x01Qa\x0E0a\x04@\x85\x01\x82a\x0B\xC8V[PPPPV[_a\x0EA\x83\x83a\r\xA3V[a\x04`\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x0Ed\x82a\n\xDDV[a\x0En\x81\x85a\n\xE7V[\x93Pa\x0Ey\x83a\n\xF7V[\x80_[\x83\x81\x10\x15a\x0E\xA9W\x81Qa\x0E\x90\x88\x82a\x0E6V[\x97Pa\x0E\x9B\x83a\x0ENV[\x92PP`\x01\x81\x01\x90Pa\x0E|V[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0E\xCE\x81\x84a\x0EZV[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea26469706673582212206c435a67081b26a0236d033d0664be7007a37a445abe9f5b645164e43bd3916664736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 lCZg\x08\x1B&\xA0#m\x03=\x06d\xBEp\x07\xA3zDZ\xBE\x9F[dQd\xE4;\xD3\x91fdsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.pools,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pools: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetCurvePoolBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetCurvePoolBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetCurvePoolBatchRequestInstance<T, P, N> {
        GetCurvePoolBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetCurvePoolBatchRequestInstance<T, P, N>>,
    > {
        GetCurvePoolBatchRequestInstance::<T, P, N>::deploy(provider, pools)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetCurvePoolBatchRequestInstance::<T, P, N>::deploy_builder(provider, pools)
    }
    /**A [`GetCurvePoolBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetCurvePoolBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetCurvePoolBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GetCurvePoolBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetCurvePoolBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetCurvePoolBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetCurvePoolBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetCurvePoolBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetCurvePoolBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, pools);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { pools },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GetCurvePoolBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GetCurvePoolBatchRequestInstance<T, P, N> {
            GetCurvePoolBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetCurvePoolBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetCurvePoolBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
