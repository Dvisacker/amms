/**

Generated by the following Solidity interface...
```solidity
interface GetUniV3PoolData {
    constructor(address[] pools);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetUniV3PoolData {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506040516118dd3803806118dd83398181016040528101906100319190610fcb565b5f815167ffffffffffffffff81111561004d5761004c610e35565b5b60405190808252806020026020018201604052801561008657816020015b610073610d31565b81526020019060019003908161006b5790505b5090505f5b8251811015610cac575f8382815181106100a8576100a7611012565b5b602002602001015190506100c181610cda60201b60201c565b156100cc5750610ca1565b6100d4610d31565b8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610141919061103f565b815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e4919061103f565b816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061022d815f0151610cda60201b60201c565b15610239575050610ca1565b61024c8160600151610cda60201b60201c565b15610258575050610ca1565b5f80825f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161030791906110bc565b5f604051808303815f8787f1925050503d805f8114610341576040519150601f19603f3d011682016040523d82523d5f602084013e610346565b606091505b509150915081156103b5575f60208251036103a5578180602001905181019061036f9190611105565b90505f81148061037f575060ff81115b1561038e575050505050610ca1565b80846040019060ff16908160ff16815250506103af565b5050505050610ca1565b506103be565b50505050610ca1565b5f80846060015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046e91906110bc565b5f604051808303815f8787f1925050503d805f81146104a8576040519150601f19603f3d011682016040523d82523d5f602084013e6104ad565b606091505b50915091508115610520575f602082510361050e57818060200190518101906104d69190611105565b90505f8114806104e6575060ff81115b156104f75750505050505050610ca1565b808660a0019060ff16908160ff168152505061051a565b50505050505050610ca1565b5061052b565b505050505050610ca1565b5f80865f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105da91906110bc565b5f604051808303815f8787f1925050503d805f8114610614576040519150601f19603f3d011682016040523d82523d5f602084013e610619565b606091505b50915091508115610683575f602082510361064957818060200190518101906106429190611163565b9050610673565b5f8280602001905181019061065e9190611230565b905061066f81610d0b60201b60201c565b9150505b8088602001818152505050610690565b5f801b8760200181815250505b5f80886060015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161074091906110bc565b5f604051808303815f8787f1925050503d805f811461077a576040519150601f19603f3d011682016040523d82523d5f602084013e61077f565b606091505b509150915081156107e9575f60208251036107af57818060200190518101906107a89190611163565b90506107d9565b5f828060200190518101906107c49190611230565b90506107d581610d0b60201b60201c565b9150505b808a6080018181525050506107f6565b5f801b8960800181815250505b8973ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561085e57506040513d601f19601f8201168201806040525081019061085b919061103f565b60015b61089f575f8960c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506108d9565b808a60c0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505b8973ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561094157506040513d601f19601f8201168201806040525081019061093e91906112af565b60015b61096357610bb889610160019062ffffff16908162ffffff168152505061097c565b808a610160019062ffffff16908162ffffff1681525050505b5f808b73ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa1580156109c7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109eb91906113dc565b5050505050915091505f8c73ffffffffffffffffffffffffffffffffffffffff1663f30dba93836040518263ffffffff1660e01b8152600401610a2e9190611488565b61010060405180830381865afa158015610a4a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a6e919061158b565b5050505050509150508c73ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac0573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ae4919061163c565b8c60e001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508c73ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b5c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b809190611667565b8c610140019060020b908160020b815250508c73ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bdb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bff91906112af565b8c610160019062ffffff16908162ffffff1681525050828c610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818c610120019060020b908160020b81525050808c6101800190600f0b9081600f0b815250508b8f8f81518110610c8857610c87611012565b5b6020026020010181905250505050505050505050505050505b80600101905061008b565b505f81604051602001610cbf91906118bc565b60405160208183030381529060405290506020810180590381f35b5f808273ffffffffffffffffffffffffffffffffffffffff163b03610d025760019050610d06565b5f90505b919050565b5f808290505f815103610d23575f801b915050610d2c565b60208301519150505b919050565b604051806101a001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f80191681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f80191681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f6fffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60020b81526020015f60020b81526020015f62ffffff1681526020015f600f0b81525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610e6b82610e25565b810181811067ffffffffffffffff82111715610e8a57610e89610e35565b5b80604052505050565b5f610e9c610e10565b9050610ea88282610e62565b919050565b5f67ffffffffffffffff821115610ec757610ec6610e35565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610f0582610edc565b9050919050565b610f1581610efb565b8114610f1f575f80fd5b50565b5f81519050610f3081610f0c565b92915050565b5f610f48610f4384610ead565b610e93565b90508083825260208201905060208402830185811115610f6b57610f6a610ed8565b5b835b81811015610f945780610f808882610f22565b845260208401935050602081019050610f6d565b5050509392505050565b5f82601f830112610fb257610fb1610e21565b5b8151610fc2848260208601610f36565b91505092915050565b5f60208284031215610fe057610fdf610e19565b5b5f82015167ffffffffffffffff811115610ffd57610ffc610e1d565b5b61100984828501610f9e565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f6020828403121561105457611053610e19565b5b5f61106184828501610f22565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f6110968261106a565b6110a08185611074565b93506110b081856020860161107e565b80840191505092915050565b5f6110c7828461108c565b915081905092915050565b5f819050919050565b6110e4816110d2565b81146110ee575f80fd5b50565b5f815190506110ff816110db565b92915050565b5f6020828403121561111a57611119610e19565b5b5f611127848285016110f1565b91505092915050565b5f819050919050565b61114281611130565b811461114c575f80fd5b50565b5f8151905061115d81611139565b92915050565b5f6020828403121561117857611177610e19565b5b5f6111858482850161114f565b91505092915050565b5f80fd5b5f67ffffffffffffffff8211156111ac576111ab610e35565b5b6111b582610e25565b9050602081019050919050565b5f6111d46111cf84611192565b610e93565b9050828152602081018484840111156111f0576111ef61118e565b5b6111fb84828561107e565b509392505050565b5f82601f83011261121757611216610e21565b5b81516112278482602086016111c2565b91505092915050565b5f6020828403121561124557611244610e19565b5b5f82015167ffffffffffffffff81111561126257611261610e1d565b5b61126e84828501611203565b91505092915050565b5f62ffffff82169050919050565b61128e81611277565b8114611298575f80fd5b50565b5f815190506112a981611285565b92915050565b5f602082840312156112c4576112c3610e19565b5b5f6112d18482850161129b565b91505092915050565b6112e381610edc565b81146112ed575f80fd5b50565b5f815190506112fe816112da565b92915050565b5f8160020b9050919050565b61131981611304565b8114611323575f80fd5b50565b5f8151905061133481611310565b92915050565b5f61ffff82169050919050565b6113508161133a565b811461135a575f80fd5b50565b5f8151905061136b81611347565b92915050565b5f60ff82169050919050565b61138681611371565b8114611390575f80fd5b50565b5f815190506113a18161137d565b92915050565b5f8115159050919050565b6113bb816113a7565b81146113c5575f80fd5b50565b5f815190506113d6816113b2565b92915050565b5f805f805f805f60e0888a0312156113f7576113f6610e19565b5b5f6114048a828b016112f0565b97505060206114158a828b01611326565b96505060406114268a828b0161135d565b95505060606114378a828b0161135d565b94505060806114488a828b0161135d565b93505060a06114598a828b01611393565b92505060c061146a8a828b016113c8565b91505092959891949750929550565b61148281611304565b82525050565b5f60208201905061149b5f830184611479565b92915050565b5f6fffffffffffffffffffffffffffffffff82169050919050565b6114c5816114a1565b81146114cf575f80fd5b50565b5f815190506114e0816114bc565b92915050565b5f81600f0b9050919050565b6114fb816114e6565b8114611505575f80fd5b50565b5f81519050611516816114f2565b92915050565b5f8160060b9050919050565b6115318161151c565b811461153b575f80fd5b50565b5f8151905061154c81611528565b92915050565b5f63ffffffff82169050919050565b61156a81611552565b8114611574575f80fd5b50565b5f8151905061158581611561565b92915050565b5f805f805f805f80610100898b0312156115a8576115a7610e19565b5b5f6115b58b828c016114d2565b98505060206115c68b828c01611508565b97505060406115d78b828c016110f1565b96505060606115e88b828c016110f1565b95505060806115f98b828c0161153e565b94505060a061160a8b828c016112f0565b93505060c061161b8b828c01611577565b92505060e061162c8b828c016113c8565b9150509295985092959890939650565b5f6020828403121561165157611650610e19565b5b5f61165e848285016114d2565b91505092915050565b5f6020828403121561167c5761167b610e19565b5b5f61168984828501611326565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6116c481610efb565b82525050565b6116d381611130565b82525050565b6116e281611371565b82525050565b6116f1816114a1565b82525050565b61170081610edc565b82525050565b61170f81611304565b82525050565b61171e81611277565b82525050565b61172d816114e6565b82525050565b6101a082015f8201516117485f8501826116bb565b50602082015161175b60208501826116ca565b50604082015161176e60408501826116d9565b50606082015161178160608501826116bb565b50608082015161179460808501826116ca565b5060a08201516117a760a08501826116d9565b5060c08201516117ba60c08501826116bb565b5060e08201516117cd60e08501826116e8565b506101008201516117e26101008501826116f7565b506101208201516117f7610120850182611706565b5061014082015161180c610140850182611706565b50610160820151611821610160850182611715565b50610180820151611836610180850182611724565b50505050565b5f6118478383611733565b6101a08301905092915050565b5f602082019050919050565b5f61186a82611692565b611874818561169c565b935061187f836116ac565b805f5b838110156118af578151611896888261183c565b97506118a183611854565b925050600181019050611882565b5085935050505092915050565b5f6020820190508181035f8301526118d48184611860565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x18\xDD8\x03\x80a\x18\xDD\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\x0F\xCBV[_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\x0E5V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x86W\x81` \x01[a\0sa\r1V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0kW\x90P[P\x90P_[\x82Q\x81\x10\x15a\x0C\xACW_\x83\x82\x81Q\x81\x10a\0\xA8Wa\0\xA7a\x10\x12V[[` \x02` \x01\x01Q\x90Pa\0\xC1\x81a\x0C\xDA` \x1B` \x1CV[\x15a\0\xCCWPa\x0C\xA1V[a\0\xD4a\r1V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01A\x91\x90a\x10?V[\x81_\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xE4\x91\x90a\x10?V[\x81``\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x02-\x81_\x01Qa\x0C\xDA` \x1B` \x1CV[\x15a\x029WPPa\x0C\xA1V[a\x02L\x81``\x01Qa\x0C\xDA` \x1B` \x1CV[\x15a\x02XWPPa\x0C\xA1V[_\x80\x82_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x03\x07\x91\x90a\x10\xBCV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x03AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03FV[``\x91P[P\x91P\x91P\x81\x15a\x03\xB5W_` \x82Q\x03a\x03\xA5W\x81\x80` \x01\x90Q\x81\x01\x90a\x03o\x91\x90a\x11\x05V[\x90P_\x81\x14\x80a\x03\x7FWP`\xFF\x81\x11[\x15a\x03\x8EWPPPPPa\x0C\xA1V[\x80\x84`@\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x03\xAFV[PPPPPa\x0C\xA1V[Pa\x03\xBEV[PPPPa\x0C\xA1V[_\x80\x84``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x04n\x91\x90a\x10\xBCV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x04\xA8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\xADV[``\x91P[P\x91P\x91P\x81\x15a\x05 W_` \x82Q\x03a\x05\x0EW\x81\x80` \x01\x90Q\x81\x01\x90a\x04\xD6\x91\x90a\x11\x05V[\x90P_\x81\x14\x80a\x04\xE6WP`\xFF\x81\x11[\x15a\x04\xF7WPPPPPPPa\x0C\xA1V[\x80\x86`\xA0\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x05\x1AV[PPPPPPPa\x0C\xA1V[Pa\x05+V[PPPPPPa\x0C\xA1V[_\x80\x86_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x05\xDA\x91\x90a\x10\xBCV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x06\x14W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x06\x19V[``\x91P[P\x91P\x91P\x81\x15a\x06\x83W_` \x82Q\x03a\x06IW\x81\x80` \x01\x90Q\x81\x01\x90a\x06B\x91\x90a\x11cV[\x90Pa\x06sV[_\x82\x80` \x01\x90Q\x81\x01\x90a\x06^\x91\x90a\x120V[\x90Pa\x06o\x81a\r\x0B` \x1B` \x1CV[\x91PP[\x80\x88` \x01\x81\x81RPPPa\x06\x90V[_\x80\x1B\x87` \x01\x81\x81RPP[_\x80\x88``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x07@\x91\x90a\x10\xBCV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x07zW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x07\x7FV[``\x91P[P\x91P\x91P\x81\x15a\x07\xE9W_` \x82Q\x03a\x07\xAFW\x81\x80` \x01\x90Q\x81\x01\x90a\x07\xA8\x91\x90a\x11cV[\x90Pa\x07\xD9V[_\x82\x80` \x01\x90Q\x81\x01\x90a\x07\xC4\x91\x90a\x120V[\x90Pa\x07\xD5\x81a\r\x0B` \x1B` \x1CV[\x91PP[\x80\x8A`\x80\x01\x81\x81RPPPa\x07\xF6V[_\x80\x1B\x89`\x80\x01\x81\x81RPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC4Z\x01U`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x08^WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08[\x91\x90a\x10?V[`\x01[a\x08\x9FW_\x89`\xC0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x08\xD9V[\x80\x8A`\xC0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xDD\xCA?C`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\tAWP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t>\x91\x90a\x12\xAFV[`\x01[a\tcWa\x0B\xB8\x89a\x01`\x01\x90b\xFF\xFF\xFF\x16\x90\x81b\xFF\xFF\xFF\x16\x81RPPa\t|V[\x80\x8Aa\x01`\x01\x90b\xFF\xFF\xFF\x16\x90\x81b\xFF\xFF\xFF\x16\x81RPPP[_\x80\x8Bs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8P\xC7\xBD`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\xE0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xC7W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t\xEB\x91\x90a\x13\xDCV[PPPPP\x91P\x91P_\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\n.\x91\x90a\x14\x88V[a\x01\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\nJW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\nn\x91\x90a\x15\x8BV[PPPPPP\x91PP\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x1Ahe\x02`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\xC0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xE4\x91\x90a\x16<V[\x8C`\xE0\x01\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD0\xC9:|`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B\\W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\x80\x91\x90a\x16gV[\x8Ca\x01@\x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xDD\xCA?C`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B\xDBW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xFF\x91\x90a\x12\xAFV[\x8Ca\x01`\x01\x90b\xFF\xFF\xFF\x16\x90\x81b\xFF\xFF\xFF\x16\x81RPP\x82\x8Ca\x01\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81\x8Ca\x01 \x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x80\x8Ca\x01\x80\x01\x90`\x0F\x0B\x90\x81`\x0F\x0B\x81RPP\x8B\x8F\x8F\x81Q\x81\x10a\x0C\x88Wa\x0C\x87a\x10\x12V[[` \x02` \x01\x01\x81\x90RPPPPPPPPPPPPPP[\x80`\x01\x01\x90Pa\0\x8BV[P_\x81`@Q` \x01a\x0C\xBF\x91\x90a\x18\xBCV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a\r\x02W`\x01\x90Pa\r\x06V[_\x90P[\x91\x90PV[_\x80\x82\x90P_\x81Q\x03a\r#W_\x80\x1B\x91PPa\r,V[` \x83\x01Q\x91PP[\x91\x90PV[`@Q\x80a\x01\xA0\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x80\x19\x16\x81R` \x01_`\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x80\x19\x16\x81R` \x01_`\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\x02\x0B\x81R` \x01_`\x02\x0B\x81R` \x01_b\xFF\xFF\xFF\x16\x81R` \x01_`\x0F\x0B\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x0Ek\x82a\x0E%V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0E\x8AWa\x0E\x89a\x0E5V[[\x80`@RPPPV[_a\x0E\x9Ca\x0E\x10V[\x90Pa\x0E\xA8\x82\x82a\x0EbV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0E\xC7Wa\x0E\xC6a\x0E5V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0F\x05\x82a\x0E\xDCV[\x90P\x91\x90PV[a\x0F\x15\x81a\x0E\xFBV[\x81\x14a\x0F\x1FW_\x80\xFD[PV[_\x81Q\x90Pa\x0F0\x81a\x0F\x0CV[\x92\x91PPV[_a\x0FHa\x0FC\x84a\x0E\xADV[a\x0E\x93V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0FkWa\x0Fja\x0E\xD8V[[\x83[\x81\x81\x10\x15a\x0F\x94W\x80a\x0F\x80\x88\x82a\x0F\"V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0FmV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0F\xB2Wa\x0F\xB1a\x0E!V[[\x81Qa\x0F\xC2\x84\x82` \x86\x01a\x0F6V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0F\xE0Wa\x0F\xDFa\x0E\x19V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xFDWa\x0F\xFCa\x0E\x1DV[[a\x10\t\x84\x82\x85\x01a\x0F\x9EV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x10TWa\x10Sa\x0E\x19V[[_a\x10a\x84\x82\x85\x01a\x0F\"V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x10\x96\x82a\x10jV[a\x10\xA0\x81\x85a\x10tV[\x93Pa\x10\xB0\x81\x85` \x86\x01a\x10~V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x10\xC7\x82\x84a\x10\x8CV[\x91P\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x10\xE4\x81a\x10\xD2V[\x81\x14a\x10\xEEW_\x80\xFD[PV[_\x81Q\x90Pa\x10\xFF\x81a\x10\xDBV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x11\x1AWa\x11\x19a\x0E\x19V[[_a\x11'\x84\x82\x85\x01a\x10\xF1V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x11B\x81a\x110V[\x81\x14a\x11LW_\x80\xFD[PV[_\x81Q\x90Pa\x11]\x81a\x119V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x11xWa\x11wa\x0E\x19V[[_a\x11\x85\x84\x82\x85\x01a\x11OV[\x91PP\x92\x91PPV[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x11\xACWa\x11\xABa\x0E5V[[a\x11\xB5\x82a\x0E%V[\x90P` \x81\x01\x90P\x91\x90PV[_a\x11\xD4a\x11\xCF\x84a\x11\x92V[a\x0E\x93V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x11\xF0Wa\x11\xEFa\x11\x8EV[[a\x11\xFB\x84\x82\x85a\x10~V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x12\x17Wa\x12\x16a\x0E!V[[\x81Qa\x12'\x84\x82` \x86\x01a\x11\xC2V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x12EWa\x12Da\x0E\x19V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x12bWa\x12aa\x0E\x1DV[[a\x12n\x84\x82\x85\x01a\x12\x03V[\x91PP\x92\x91PPV[_b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x12\x8E\x81a\x12wV[\x81\x14a\x12\x98W_\x80\xFD[PV[_\x81Q\x90Pa\x12\xA9\x81a\x12\x85V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x12\xC4Wa\x12\xC3a\x0E\x19V[[_a\x12\xD1\x84\x82\x85\x01a\x12\x9BV[\x91PP\x92\x91PPV[a\x12\xE3\x81a\x0E\xDCV[\x81\x14a\x12\xEDW_\x80\xFD[PV[_\x81Q\x90Pa\x12\xFE\x81a\x12\xDAV[\x92\x91PPV[_\x81`\x02\x0B\x90P\x91\x90PV[a\x13\x19\x81a\x13\x04V[\x81\x14a\x13#W_\x80\xFD[PV[_\x81Q\x90Pa\x134\x81a\x13\x10V[\x92\x91PPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x13P\x81a\x13:V[\x81\x14a\x13ZW_\x80\xFD[PV[_\x81Q\x90Pa\x13k\x81a\x13GV[\x92\x91PPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x13\x86\x81a\x13qV[\x81\x14a\x13\x90W_\x80\xFD[PV[_\x81Q\x90Pa\x13\xA1\x81a\x13}V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x13\xBB\x81a\x13\xA7V[\x81\x14a\x13\xC5W_\x80\xFD[PV[_\x81Q\x90Pa\x13\xD6\x81a\x13\xB2V[\x92\x91PPV[_\x80_\x80_\x80_`\xE0\x88\x8A\x03\x12\x15a\x13\xF7Wa\x13\xF6a\x0E\x19V[[_a\x14\x04\x8A\x82\x8B\x01a\x12\xF0V[\x97PP` a\x14\x15\x8A\x82\x8B\x01a\x13&V[\x96PP`@a\x14&\x8A\x82\x8B\x01a\x13]V[\x95PP``a\x147\x8A\x82\x8B\x01a\x13]V[\x94PP`\x80a\x14H\x8A\x82\x8B\x01a\x13]V[\x93PP`\xA0a\x14Y\x8A\x82\x8B\x01a\x13\x93V[\x92PP`\xC0a\x14j\x8A\x82\x8B\x01a\x13\xC8V[\x91PP\x92\x95\x98\x91\x94\x97P\x92\x95PV[a\x14\x82\x81a\x13\x04V[\x82RPPV[_` \x82\x01\x90Pa\x14\x9B_\x83\x01\x84a\x14yV[\x92\x91PPV[_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x14\xC5\x81a\x14\xA1V[\x81\x14a\x14\xCFW_\x80\xFD[PV[_\x81Q\x90Pa\x14\xE0\x81a\x14\xBCV[\x92\x91PPV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\x14\xFB\x81a\x14\xE6V[\x81\x14a\x15\x05W_\x80\xFD[PV[_\x81Q\x90Pa\x15\x16\x81a\x14\xF2V[\x92\x91PPV[_\x81`\x06\x0B\x90P\x91\x90PV[a\x151\x81a\x15\x1CV[\x81\x14a\x15;W_\x80\xFD[PV[_\x81Q\x90Pa\x15L\x81a\x15(V[\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x15j\x81a\x15RV[\x81\x14a\x15tW_\x80\xFD[PV[_\x81Q\x90Pa\x15\x85\x81a\x15aV[\x92\x91PPV[_\x80_\x80_\x80_\x80a\x01\0\x89\x8B\x03\x12\x15a\x15\xA8Wa\x15\xA7a\x0E\x19V[[_a\x15\xB5\x8B\x82\x8C\x01a\x14\xD2V[\x98PP` a\x15\xC6\x8B\x82\x8C\x01a\x15\x08V[\x97PP`@a\x15\xD7\x8B\x82\x8C\x01a\x10\xF1V[\x96PP``a\x15\xE8\x8B\x82\x8C\x01a\x10\xF1V[\x95PP`\x80a\x15\xF9\x8B\x82\x8C\x01a\x15>V[\x94PP`\xA0a\x16\n\x8B\x82\x8C\x01a\x12\xF0V[\x93PP`\xC0a\x16\x1B\x8B\x82\x8C\x01a\x15wV[\x92PP`\xE0a\x16,\x8B\x82\x8C\x01a\x13\xC8V[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV[_` \x82\x84\x03\x12\x15a\x16QWa\x16Pa\x0E\x19V[[_a\x16^\x84\x82\x85\x01a\x14\xD2V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x16|Wa\x16{a\x0E\x19V[[_a\x16\x89\x84\x82\x85\x01a\x13&V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x16\xC4\x81a\x0E\xFBV[\x82RPPV[a\x16\xD3\x81a\x110V[\x82RPPV[a\x16\xE2\x81a\x13qV[\x82RPPV[a\x16\xF1\x81a\x14\xA1V[\x82RPPV[a\x17\0\x81a\x0E\xDCV[\x82RPPV[a\x17\x0F\x81a\x13\x04V[\x82RPPV[a\x17\x1E\x81a\x12wV[\x82RPPV[a\x17-\x81a\x14\xE6V[\x82RPPV[a\x01\xA0\x82\x01_\x82\x01Qa\x17H_\x85\x01\x82a\x16\xBBV[P` \x82\x01Qa\x17[` \x85\x01\x82a\x16\xCAV[P`@\x82\x01Qa\x17n`@\x85\x01\x82a\x16\xD9V[P``\x82\x01Qa\x17\x81``\x85\x01\x82a\x16\xBBV[P`\x80\x82\x01Qa\x17\x94`\x80\x85\x01\x82a\x16\xCAV[P`\xA0\x82\x01Qa\x17\xA7`\xA0\x85\x01\x82a\x16\xD9V[P`\xC0\x82\x01Qa\x17\xBA`\xC0\x85\x01\x82a\x16\xBBV[P`\xE0\x82\x01Qa\x17\xCD`\xE0\x85\x01\x82a\x16\xE8V[Pa\x01\0\x82\x01Qa\x17\xE2a\x01\0\x85\x01\x82a\x16\xF7V[Pa\x01 \x82\x01Qa\x17\xF7a\x01 \x85\x01\x82a\x17\x06V[Pa\x01@\x82\x01Qa\x18\x0Ca\x01@\x85\x01\x82a\x17\x06V[Pa\x01`\x82\x01Qa\x18!a\x01`\x85\x01\x82a\x17\x15V[Pa\x01\x80\x82\x01Qa\x186a\x01\x80\x85\x01\x82a\x17$V[PPPPV[_a\x18G\x83\x83a\x173V[a\x01\xA0\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x18j\x82a\x16\x92V[a\x18t\x81\x85a\x16\x9CV[\x93Pa\x18\x7F\x83a\x16\xACV[\x80_[\x83\x81\x10\x15a\x18\xAFW\x81Qa\x18\x96\x88\x82a\x18<V[\x97Pa\x18\xA1\x83a\x18TV[\x92PP`\x01\x81\x01\x90Pa\x18\x82V[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x18\xD4\x81\x84a\x18`V[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea2646970667358221220f99caeed6b087120a557f90eb0ee746ed0a9691a4b3ae73f4a25ef55b0b156dc64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 \xF9\x9C\xAE\xEDk\x08q \xA5W\xF9\x0E\xB0\xEEtn\xD0\xA9i\x1AK:\xE7?J%\xEFU\xB0\xB1V\xDCdsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.pools,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pools: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetUniV3PoolData`](self) contract instance.

See the [wrapper's documentation](`GetUniV3PoolDataInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetUniV3PoolDataInstance<T, P, N> {
        GetUniV3PoolDataInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetUniV3PoolDataInstance<T, P, N>>,
    > {
        GetUniV3PoolDataInstance::<T, P, N>::deploy(provider, pools)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetUniV3PoolDataInstance::<T, P, N>::deploy_builder(provider, pools)
    }
    /**A [`GetUniV3PoolData`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetUniV3PoolData`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetUniV3PoolDataInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GetUniV3PoolDataInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetUniV3PoolDataInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV3PoolDataInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetUniV3PoolData`](self) contract instance.

See the [wrapper's documentation](`GetUniV3PoolDataInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetUniV3PoolDataInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, pools);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { pools },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GetUniV3PoolDataInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GetUniV3PoolDataInstance<T, P, N> {
            GetUniV3PoolDataInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV3PoolDataInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV3PoolDataInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
