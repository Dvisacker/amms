/**

Generated by the following Solidity interface...
```solidity
interface GetUniswapV3PoolDataBatchRequest {
    constructor(address[] pools);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GetUniswapV3PoolDataBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060405161129c38038061129c83398181016040528101906100319190610b1f565b5f815167ffffffffffffffff81111561004d5761004c610989565b5b60405190808252806020026020018201604052801561008657816020015b6100736108b3565b81526020019060019003908161006b5790505b5090505f5b8251811015610854575f8382815181106100a8576100a7610b66565b5b602002602001015190506100c18161088260201b60201c565b156100cc5750610849565b6100d46108b3565b8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101419190610b93565b815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e49190610b93565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061022d815f015161088260201b60201c565b15610239575050610849565b61024c816040015161088260201b60201c565b15610258575050610849565b5f80825f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103079190610c10565b5f604051808303815f8787f1925050503d805f8114610341576040519150601f19603f3d011682016040523d82523d5f602084013e610346565b606091505b509150915081156103b5575f60208251036103a5578180602001905181019061036f9190610c59565b90505f81148061037f575060ff81115b1561038e575050505050610849565b80846020019060ff16908160ff16815250506103af565b5050505050610849565b506103be565b50505050610849565b5f80846040015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046e9190610c10565b5f604051808303815f8787f1925050503d805f81146104a8576040519150601f19603f3d011682016040523d82523d5f602084013e6104ad565b606091505b50915091508115610520575f602082510361050e57818060200190518101906104d69190610c59565b90505f8114806104e6575060ff81115b156104f75750505050505050610849565b80866060019060ff16908160ff168152505061051a565b50505050505050610849565b5061052b565b505050505050610849565b5f808773ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015610576573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061059a9190610d86565b5050505050915091505f8873ffffffffffffffffffffffffffffffffffffffff1663f30dba93836040518263ffffffff1660e01b81526004016105dd9190610e32565b61010060405180830381865afa1580156105f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061061d9190610f35565b5050505050509150508873ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b8152600401602060405180830381865afa15801561066f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106939190610fe6565b88608001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508873ffffffffffffffffffffffffffffffffffffffff1663d0c93a7c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561070b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061072f9190611011565b8860e0019060020b908160020b815250508873ffffffffffffffffffffffffffffffffffffffff1663ddca3f436040518163ffffffff1660e01b8152600401602060405180830381865afa158015610789573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ad9190611074565b88610100019062ffffff16908162ffffff1681525050828860a0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050818860c0019060020b908160020b8152505080886101200190600f0b9081600f0b81525050878b8b8151811061083457610833610b66565b5b60200260200101819052505050505050505050505b80600101905061008b565b505f81604051602001610867919061127b565b60405160208183030381529060405290506020810180590381f35b5f808273ffffffffffffffffffffffffffffffffffffffff163b036108aa57600190506108ae565b5f90505b919050565b6040518061014001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f6fffffffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60020b81526020015f60020b81526020015f62ffffff1681526020015f600f0b81525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6109bf82610979565b810181811067ffffffffffffffff821117156109de576109dd610989565b5b80604052505050565b5f6109f0610964565b90506109fc82826109b6565b919050565b5f67ffffffffffffffff821115610a1b57610a1a610989565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610a5982610a30565b9050919050565b610a6981610a4f565b8114610a73575f80fd5b50565b5f81519050610a8481610a60565b92915050565b5f610a9c610a9784610a01565b6109e7565b90508083825260208201905060208402830185811115610abf57610abe610a2c565b5b835b81811015610ae85780610ad48882610a76565b845260208401935050602081019050610ac1565b5050509392505050565b5f82601f830112610b0657610b05610975565b5b8151610b16848260208601610a8a565b91505092915050565b5f60208284031215610b3457610b3361096d565b5b5f82015167ffffffffffffffff811115610b5157610b50610971565b5b610b5d84828501610af2565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215610ba857610ba761096d565b5b5f610bb584828501610a76565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610bea82610bbe565b610bf48185610bc8565b9350610c04818560208601610bd2565b80840191505092915050565b5f610c1b8284610be0565b915081905092915050565b5f819050919050565b610c3881610c26565b8114610c42575f80fd5b50565b5f81519050610c5381610c2f565b92915050565b5f60208284031215610c6e57610c6d61096d565b5b5f610c7b84828501610c45565b91505092915050565b610c8d81610a30565b8114610c97575f80fd5b50565b5f81519050610ca881610c84565b92915050565b5f8160020b9050919050565b610cc381610cae565b8114610ccd575f80fd5b50565b5f81519050610cde81610cba565b92915050565b5f61ffff82169050919050565b610cfa81610ce4565b8114610d04575f80fd5b50565b5f81519050610d1581610cf1565b92915050565b5f60ff82169050919050565b610d3081610d1b565b8114610d3a575f80fd5b50565b5f81519050610d4b81610d27565b92915050565b5f8115159050919050565b610d6581610d51565b8114610d6f575f80fd5b50565b5f81519050610d8081610d5c565b92915050565b5f805f805f805f60e0888a031215610da157610da061096d565b5b5f610dae8a828b01610c9a565b9750506020610dbf8a828b01610cd0565b9650506040610dd08a828b01610d07565b9550506060610de18a828b01610d07565b9450506080610df28a828b01610d07565b93505060a0610e038a828b01610d3d565b92505060c0610e148a828b01610d72565b91505092959891949750929550565b610e2c81610cae565b82525050565b5f602082019050610e455f830184610e23565b92915050565b5f6fffffffffffffffffffffffffffffffff82169050919050565b610e6f81610e4b565b8114610e79575f80fd5b50565b5f81519050610e8a81610e66565b92915050565b5f81600f0b9050919050565b610ea581610e90565b8114610eaf575f80fd5b50565b5f81519050610ec081610e9c565b92915050565b5f8160060b9050919050565b610edb81610ec6565b8114610ee5575f80fd5b50565b5f81519050610ef681610ed2565b92915050565b5f63ffffffff82169050919050565b610f1481610efc565b8114610f1e575f80fd5b50565b5f81519050610f2f81610f0b565b92915050565b5f805f805f805f80610100898b031215610f5257610f5161096d565b5b5f610f5f8b828c01610e7c565b9850506020610f708b828c01610eb2565b9750506040610f818b828c01610c45565b9650506060610f928b828c01610c45565b9550506080610fa38b828c01610ee8565b94505060a0610fb48b828c01610c9a565b93505060c0610fc58b828c01610f21565b92505060e0610fd68b828c01610d72565b9150509295985092959890939650565b5f60208284031215610ffb57610ffa61096d565b5b5f61100884828501610e7c565b91505092915050565b5f602082840312156110265761102561096d565b5b5f61103384828501610cd0565b91505092915050565b5f62ffffff82169050919050565b6110538161103c565b811461105d575f80fd5b50565b5f8151905061106e8161104a565b92915050565b5f602082840312156110895761108861096d565b5b5f61109684828501611060565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6110d181610a4f565b82525050565b6110e081610d1b565b82525050565b6110ef81610e4b565b82525050565b6110fe81610a30565b82525050565b61110d81610cae565b82525050565b61111c8161103c565b82525050565b61112b81610e90565b82525050565b61014082015f8201516111465f8501826110c8565b50602082015161115960208501826110d7565b50604082015161116c60408501826110c8565b50606082015161117f60608501826110d7565b50608082015161119260808501826110e6565b5060a08201516111a560a08501826110f5565b5060c08201516111b860c0850182611104565b5060e08201516111cb60e0850182611104565b506101008201516111e0610100850182611113565b506101208201516111f5610120850182611122565b50505050565b5f6112068383611131565b6101408301905092915050565b5f602082019050919050565b5f6112298261109f565b61123381856110a9565b935061123e836110b9565b805f5b8381101561126e57815161125588826111fb565b975061126083611213565b925050600181019050611241565b5085935050505092915050565b5f6020820190508181035f830152611293818461121f565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x12\x9C8\x03\x80a\x12\x9C\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\x0B\x1FV[_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\t\x89V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x86W\x81` \x01[a\0sa\x08\xB3V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0kW\x90P[P\x90P_[\x82Q\x81\x10\x15a\x08TW_\x83\x82\x81Q\x81\x10a\0\xA8Wa\0\xA7a\x0BfV[[` \x02` \x01\x01Q\x90Pa\0\xC1\x81a\x08\x82` \x1B` \x1CV[\x15a\0\xCCWPa\x08IV[a\0\xD4a\x08\xB3V[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01A\x91\x90a\x0B\x93V[\x81_\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xE4\x91\x90a\x0B\x93V[\x81`@\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x02-\x81_\x01Qa\x08\x82` \x1B` \x1CV[\x15a\x029WPPa\x08IV[a\x02L\x81`@\x01Qa\x08\x82` \x1B` \x1CV[\x15a\x02XWPPa\x08IV[_\x80\x82_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x03\x07\x91\x90a\x0C\x10V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x03AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03FV[``\x91P[P\x91P\x91P\x81\x15a\x03\xB5W_` \x82Q\x03a\x03\xA5W\x81\x80` \x01\x90Q\x81\x01\x90a\x03o\x91\x90a\x0CYV[\x90P_\x81\x14\x80a\x03\x7FWP`\xFF\x81\x11[\x15a\x03\x8EWPPPPPa\x08IV[\x80\x84` \x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x03\xAFV[PPPPPa\x08IV[Pa\x03\xBEV[PPPPa\x08IV[_\x80\x84`@\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x04n\x91\x90a\x0C\x10V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x04\xA8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\xADV[``\x91P[P\x91P\x91P\x81\x15a\x05 W_` \x82Q\x03a\x05\x0EW\x81\x80` \x01\x90Q\x81\x01\x90a\x04\xD6\x91\x90a\x0CYV[\x90P_\x81\x14\x80a\x04\xE6WP`\xFF\x81\x11[\x15a\x04\xF7WPPPPPPPa\x08IV[\x80\x86``\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x05\x1AV[PPPPPPPa\x08IV[Pa\x05+V[PPPPPPa\x08IV[_\x80\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8P\xC7\xBD`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\xE0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05vW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x9A\x91\x90a\r\x86V[PPPPP\x91P\x91P_\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x83`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\xDD\x91\x90a\x0E2V[a\x01\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xF9W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x1D\x91\x90a\x0F5V[PPPPPP\x91PP\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x1Ahe\x02`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06oW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x93\x91\x90a\x0F\xE6V[\x88`\x80\x01\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD0\xC9:|`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\x0BW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07/\x91\x90a\x10\x11V[\x88`\xE0\x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xDD\xCA?C`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\x89W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xAD\x91\x90a\x10tV[\x88a\x01\0\x01\x90b\xFF\xFF\xFF\x16\x90\x81b\xFF\xFF\xFF\x16\x81RPP\x82\x88`\xA0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81\x88`\xC0\x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x80\x88a\x01 \x01\x90`\x0F\x0B\x90\x81`\x0F\x0B\x81RPP\x87\x8B\x8B\x81Q\x81\x10a\x084Wa\x083a\x0BfV[[` \x02` \x01\x01\x81\x90RPPPPPPPPPP[\x80`\x01\x01\x90Pa\0\x8BV[P_\x81`@Q` \x01a\x08g\x91\x90a\x12{V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a\x08\xAAW`\x01\x90Pa\x08\xAEV[_\x90P[\x91\x90PV[`@Q\x80a\x01@\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\xFF\x16\x81R` \x01_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\x02\x0B\x81R` \x01_`\x02\x0B\x81R` \x01_b\xFF\xFF\xFF\x16\x81R` \x01_`\x0F\x0B\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\t\xBF\x82a\tyV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\t\xDEWa\t\xDDa\t\x89V[[\x80`@RPPPV[_a\t\xF0a\tdV[\x90Pa\t\xFC\x82\x82a\t\xB6V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\n\x1BWa\n\x1Aa\t\x89V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\nY\x82a\n0V[\x90P\x91\x90PV[a\ni\x81a\nOV[\x81\x14a\nsW_\x80\xFD[PV[_\x81Q\x90Pa\n\x84\x81a\n`V[\x92\x91PPV[_a\n\x9Ca\n\x97\x84a\n\x01V[a\t\xE7V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\n\xBFWa\n\xBEa\n,V[[\x83[\x81\x81\x10\x15a\n\xE8W\x80a\n\xD4\x88\x82a\nvV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\n\xC1V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0B\x06Wa\x0B\x05a\tuV[[\x81Qa\x0B\x16\x84\x82` \x86\x01a\n\x8AV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0B4Wa\x0B3a\tmV[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0BQWa\x0BPa\tqV[[a\x0B]\x84\x82\x85\x01a\n\xF2V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x0B\xA8Wa\x0B\xA7a\tmV[[_a\x0B\xB5\x84\x82\x85\x01a\nvV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x0B\xEA\x82a\x0B\xBEV[a\x0B\xF4\x81\x85a\x0B\xC8V[\x93Pa\x0C\x04\x81\x85` \x86\x01a\x0B\xD2V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0C\x1B\x82\x84a\x0B\xE0V[\x91P\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0C8\x81a\x0C&V[\x81\x14a\x0CBW_\x80\xFD[PV[_\x81Q\x90Pa\x0CS\x81a\x0C/V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0CnWa\x0Cma\tmV[[_a\x0C{\x84\x82\x85\x01a\x0CEV[\x91PP\x92\x91PPV[a\x0C\x8D\x81a\n0V[\x81\x14a\x0C\x97W_\x80\xFD[PV[_\x81Q\x90Pa\x0C\xA8\x81a\x0C\x84V[\x92\x91PPV[_\x81`\x02\x0B\x90P\x91\x90PV[a\x0C\xC3\x81a\x0C\xAEV[\x81\x14a\x0C\xCDW_\x80\xFD[PV[_\x81Q\x90Pa\x0C\xDE\x81a\x0C\xBAV[\x92\x91PPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0C\xFA\x81a\x0C\xE4V[\x81\x14a\r\x04W_\x80\xFD[PV[_\x81Q\x90Pa\r\x15\x81a\x0C\xF1V[\x92\x91PPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\r0\x81a\r\x1BV[\x81\x14a\r:W_\x80\xFD[PV[_\x81Q\x90Pa\rK\x81a\r'V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\re\x81a\rQV[\x81\x14a\roW_\x80\xFD[PV[_\x81Q\x90Pa\r\x80\x81a\r\\V[\x92\x91PPV[_\x80_\x80_\x80_`\xE0\x88\x8A\x03\x12\x15a\r\xA1Wa\r\xA0a\tmV[[_a\r\xAE\x8A\x82\x8B\x01a\x0C\x9AV[\x97PP` a\r\xBF\x8A\x82\x8B\x01a\x0C\xD0V[\x96PP`@a\r\xD0\x8A\x82\x8B\x01a\r\x07V[\x95PP``a\r\xE1\x8A\x82\x8B\x01a\r\x07V[\x94PP`\x80a\r\xF2\x8A\x82\x8B\x01a\r\x07V[\x93PP`\xA0a\x0E\x03\x8A\x82\x8B\x01a\r=V[\x92PP`\xC0a\x0E\x14\x8A\x82\x8B\x01a\rrV[\x91PP\x92\x95\x98\x91\x94\x97P\x92\x95PV[a\x0E,\x81a\x0C\xAEV[\x82RPPV[_` \x82\x01\x90Pa\x0EE_\x83\x01\x84a\x0E#V[\x92\x91PPV[_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0Eo\x81a\x0EKV[\x81\x14a\x0EyW_\x80\xFD[PV[_\x81Q\x90Pa\x0E\x8A\x81a\x0EfV[\x92\x91PPV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\x0E\xA5\x81a\x0E\x90V[\x81\x14a\x0E\xAFW_\x80\xFD[PV[_\x81Q\x90Pa\x0E\xC0\x81a\x0E\x9CV[\x92\x91PPV[_\x81`\x06\x0B\x90P\x91\x90PV[a\x0E\xDB\x81a\x0E\xC6V[\x81\x14a\x0E\xE5W_\x80\xFD[PV[_\x81Q\x90Pa\x0E\xF6\x81a\x0E\xD2V[\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0F\x14\x81a\x0E\xFCV[\x81\x14a\x0F\x1EW_\x80\xFD[PV[_\x81Q\x90Pa\x0F/\x81a\x0F\x0BV[\x92\x91PPV[_\x80_\x80_\x80_\x80a\x01\0\x89\x8B\x03\x12\x15a\x0FRWa\x0FQa\tmV[[_a\x0F_\x8B\x82\x8C\x01a\x0E|V[\x98PP` a\x0Fp\x8B\x82\x8C\x01a\x0E\xB2V[\x97PP`@a\x0F\x81\x8B\x82\x8C\x01a\x0CEV[\x96PP``a\x0F\x92\x8B\x82\x8C\x01a\x0CEV[\x95PP`\x80a\x0F\xA3\x8B\x82\x8C\x01a\x0E\xE8V[\x94PP`\xA0a\x0F\xB4\x8B\x82\x8C\x01a\x0C\x9AV[\x93PP`\xC0a\x0F\xC5\x8B\x82\x8C\x01a\x0F!V[\x92PP`\xE0a\x0F\xD6\x8B\x82\x8C\x01a\rrV[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV[_` \x82\x84\x03\x12\x15a\x0F\xFBWa\x0F\xFAa\tmV[[_a\x10\x08\x84\x82\x85\x01a\x0E|V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x10&Wa\x10%a\tmV[[_a\x103\x84\x82\x85\x01a\x0C\xD0V[\x91PP\x92\x91PPV[_b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x10S\x81a\x10<V[\x81\x14a\x10]W_\x80\xFD[PV[_\x81Q\x90Pa\x10n\x81a\x10JV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x10\x89Wa\x10\x88a\tmV[[_a\x10\x96\x84\x82\x85\x01a\x10`V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x10\xD1\x81a\nOV[\x82RPPV[a\x10\xE0\x81a\r\x1BV[\x82RPPV[a\x10\xEF\x81a\x0EKV[\x82RPPV[a\x10\xFE\x81a\n0V[\x82RPPV[a\x11\r\x81a\x0C\xAEV[\x82RPPV[a\x11\x1C\x81a\x10<V[\x82RPPV[a\x11+\x81a\x0E\x90V[\x82RPPV[a\x01@\x82\x01_\x82\x01Qa\x11F_\x85\x01\x82a\x10\xC8V[P` \x82\x01Qa\x11Y` \x85\x01\x82a\x10\xD7V[P`@\x82\x01Qa\x11l`@\x85\x01\x82a\x10\xC8V[P``\x82\x01Qa\x11\x7F``\x85\x01\x82a\x10\xD7V[P`\x80\x82\x01Qa\x11\x92`\x80\x85\x01\x82a\x10\xE6V[P`\xA0\x82\x01Qa\x11\xA5`\xA0\x85\x01\x82a\x10\xF5V[P`\xC0\x82\x01Qa\x11\xB8`\xC0\x85\x01\x82a\x11\x04V[P`\xE0\x82\x01Qa\x11\xCB`\xE0\x85\x01\x82a\x11\x04V[Pa\x01\0\x82\x01Qa\x11\xE0a\x01\0\x85\x01\x82a\x11\x13V[Pa\x01 \x82\x01Qa\x11\xF5a\x01 \x85\x01\x82a\x11\"V[PPPPV[_a\x12\x06\x83\x83a\x111V[a\x01@\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x12)\x82a\x10\x9FV[a\x123\x81\x85a\x10\xA9V[\x93Pa\x12>\x83a\x10\xB9V[\x80_[\x83\x81\x10\x15a\x12nW\x81Qa\x12U\x88\x82a\x11\xFBV[\x97Pa\x12`\x83a\x12\x13V[\x92PP`\x01\x81\x01\x90Pa\x12AV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x12\x93\x81\x84a\x12\x1FV[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea26469706673582212206ad6d09a2b2dbc8d5c496a6ebb29f11af24d526a158142380930b6f214a65d9364736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 j\xD6\xD0\x9A+-\xBC\x8D\\Ijn\xBB)\xF1\x1A\xF2MRj\x15\x81B8\t0\xB6\xF2\x14\xA6]\x93dsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.pools,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pools: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetUniswapV3PoolDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetUniswapV3PoolDataBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetUniswapV3PoolDataBatchRequestInstance<T, P, N> {
        GetUniswapV3PoolDataBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            GetUniswapV3PoolDataBatchRequestInstance<T, P, N>,
        >,
    > {
        GetUniswapV3PoolDataBatchRequestInstance::<T, P, N>::deploy(provider, pools)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetUniswapV3PoolDataBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, pools)
    }
    /**A [`GetUniswapV3PoolDataBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetUniswapV3PoolDataBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetUniswapV3PoolDataBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for GetUniswapV3PoolDataBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetUniswapV3PoolDataBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV3PoolDataBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetUniswapV3PoolDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetUniswapV3PoolDataBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetUniswapV3PoolDataBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, pools);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { pools },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > GetUniswapV3PoolDataBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> GetUniswapV3PoolDataBatchRequestInstance<T, P, N> {
            GetUniswapV3PoolDataBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV3PoolDataBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV3PoolDataBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
