/**

Generated by the following Solidity interface...
```solidity
interface PositionLens {
    type DEX is uint8;
    type V3PoolCallee is address;

    function getFeesOwed(DEX dex, V3PoolCallee pool, address owner, int24 tickLower, int24 tickUpper) external view returns (uint128 tokensOwed0, uint128 tokensOwed1);
    function getTotalAmounts(DEX dex, V3PoolCallee pool, address owner, int24 tickLower, int24 tickUpper) external view returns (uint256 amount0, uint256 amount1);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "getFeesOwed",
    "inputs": [
      {
        "name": "dex",
        "type": "uint8",
        "internalType": "enum DEX"
      },
      {
        "name": "pool",
        "type": "address",
        "internalType": "V3PoolCallee"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "outputs": [
      {
        "name": "tokensOwed0",
        "type": "uint128",
        "internalType": "uint128"
      },
      {
        "name": "tokensOwed1",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getTotalAmounts",
    "inputs": [
      {
        "name": "dex",
        "type": "uint8",
        "internalType": "enum DEX"
      },
      {
        "name": "pool",
        "type": "address",
        "internalType": "V3PoolCallee"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tickLower",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "tickUpper",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "outputs": [
      {
        "name": "amount0",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "amount1",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod PositionLens {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506113c68061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063e6f888d814610038578063f6e4e2a314610069575b5f80fd5b610052600480360381019061004d9190610ef2565b61009a565b604051610060929190610f93565b60405180910390f35b610083600480360381019061007e9190610ef2565b61018c565b604051610091929190610fd2565b60405180910390f35b5f805f6100dc60405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760020b81526020018660020b8152506102cb565b90505f610108828973ffffffffffffffffffffffffffffffffffffffff166102ec90919063ffffffff16565b90505f61012a8973ffffffffffffffffffffffffffffffffffffffff16610316565b9150505f825f01516fffffffffffffffffffffffffffffffff161461017f575f806101588c8c8b8b8761033c565b91509150610174845f0151838387602001518860400151610690565b809750819850505050505b5050509550959350505050565b5f805f6101ce60405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760020b81526020018660020b8152506102cb565b90505f6101fa828973ffffffffffffffffffffffffffffffffffffffff166102ec90919063ffffffff16565b90505f61021c8973ffffffffffffffffffffffffffffffffffffffff16610316565b5090505f825f01516fffffffffffffffffffffffffffffffff16146102be576102608161024b8960020b610714565b6102578960020b610714565b855f0151610a46565b80955081965050505f806102778c8c8c8c8c61009a565b6fffffffffffffffffffffffffffffffff1691506fffffffffffffffffffffffffffffffff16915081876102ab9190611026565b965080866102b99190611026565b955050505b5050509550959350505050565b5f6040820151600652602082015160035281515f52601a600c209050919050565b6102f4610db1565b5f81905061030f8463514ea4bf60e01b855f1c8460a0610b09565b5092915050565b5f805f8061032b85633850c7bd60e01b610b27565b915091508193508092505050915091565b5f805f805f8060028081111561035557610354611059565b5b8b600281111561036857610367611059565b5b036104c8578973ffffffffffffffffffffffffffffffffffffffff1663f30dba938a6040518263ffffffff1660e01b81526004016103a69190611095565b61014060405180830381865afa1580156103c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103e69190611206565b90919293949596979850909192939495969750909192939495965090919293509091925090915090505080945081955050508973ffffffffffffffffffffffffffffffffffffffff1663f30dba93896040518263ffffffff1660e01b81526004016104519190611095565b61014060405180830381865afa15801561046d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104919190611206565b90919293949596979850909192939495969750909192939495965090919293509091925090915090505080925081935050506105fd565b8973ffffffffffffffffffffffffffffffffffffffff1663f30dba938a6040518263ffffffff1660e01b81526004016105019190611095565b61010060405180830381865afa15801561051d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054191906112df565b9091929394959650909192939495509091925090915090505080945081955050508973ffffffffffffffffffffffffffffffffffffffff1663f30dba93896040518263ffffffff1660e01b815260040161059b9190611095565b61010060405180830381865afa1580156105b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105db91906112df565b9091929394959650909192939495509091925090915090505080925081935050505b8860020b8760020b121561061a5781840395508083039450610682565b8760020b8760020b126106365783820395508281039450610681565b81846106578c73ffffffffffffffffffffffffffffffffffffffff16610b4d565b03039550808361067c8c73ffffffffffffffffffffffffffffffffffffffff16610b66565b030394505b5b505050509550959350505050565b5f806106cc848703700100000000000000000000000000000000896fffffffffffffffffffffffffffffffff16610b7f9092919063ffffffff16565b9150610708838603700100000000000000000000000000000000896fffffffffffffffffffffffffffffffff16610b7f9092919063ffffffff16565b90509550959350505050565b5f808290505f61072382610b94565b9050620d89e8811115610747576308c379a05f52602080526101546041526045601cfd5b5f600182166ffffcb933bd6fad37aa2d162d1a594001600160801b1802600160801b1890505f60028316146107905760806ffff97272373d413259a46990580e213a8202901c90505b5f60048316146107b45760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b5f60088316146107d85760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b5f60108316146107fc5760806fffcb9843d60f6159c9db58835c9266448202901c90505b5f60208316146108205760806fff973b41fa98c081472e6896dfb254c08202901c90505b5f60408316146108445760806fff2ea16466c96a3843ec78b326b528618202901c90505b5f60808316146108685760806ffe5dee046a99a2a811c461f1969c30538202901c90505b5f61010083161461088d5760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b5f6102008316146108b25760806ff987a7253ac413176f2b074cf7815e548202901c90505b5f6104008316146108d75760806ff3392b0822b70005940c7a398e4b70f38202901c90505b5f6108008316146108fc5760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b5f6110008316146109215760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b5f6120008316146109465760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b5f61400083161461096b5760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b5f6180008316146109905760806f31be135f97d08fd981231505542fcfa68202901c90505b5f620100008316146109b65760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b5f620200008316146109db5760806e5d6af8dedb81196699c329225ee6048202901c90505b5f620400008316146109ff5760806d2216e584f5fa1ea926041bedfe988202901c90505b5f62080000831614610a215760806b048a170391f7dc42444e8fa28202901c90505b5f851315610a3057805f190490505b60018060201b03810160201c9350505050919050565b5f80610a528585610ba6565b80955081965050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1611610a9f57610a98858585610bc7565b9150610b00565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1611610af157610add868585610bc7565b9150610aea858785610c4b565b9050610aff565b610afc858585610c4b565b90505b5b94509492505050565b835f5282600452808260245f885afa610b20575f80fd5b5050505050565b5f80825f5260405f60045f875afa610b3d575f80fd5b5f51915060205190509250929050565b5f610b5f8263f305839960e01b610c89565b9050919050565b5f610b7882634614131960e01b610c89565b9050919050565b5f610b8b848484610ca8565b90509392505050565b5f8160ff1d8281018118915050919050565b5f808383108385180280851894508084189350508383915091509250929050565b5f610c428473ffffffffffffffffffffffffffffffffffffffff16610c34606060ff16856fffffffffffffffffffffffffffffffff16901b87870373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16610b7f565b610d6090919063ffffffff16565b90509392505050565b5f610c80826fffffffffffffffffffffffffffffffff1685850373ffffffffffffffffffffffffffffffffffffffff16610d6c565b90509392505050565b5f815f5260205f60045f865afa610c9e575f80fd5b5f51905092915050565b5f8284029050600115610d595781838583041485151702610d53575f198385098181108201810383858709845f038516828611610cec5763ae47f7025f526004601cfd5b808604955085600302600218808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080818802600203028284880304600184855f030401888611870302170295505050505050610d59565b81810490505b9392505050565b5f818304905092915050565b5f8183025f1983850981811082018103806c0100000000000000000000000011610d9d5763ae47f7025f526004601cfd5b8060a01b8360601c17935050505092915050565b6040518060a001604052805f6fffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f6fffffffffffffffffffffffffffffffff1681526020015f6fffffffffffffffffffffffffffffffff1681525090565b5f80fd5b60038110610e21575f80fd5b50565b5f81359050610e3281610e15565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e6182610e38565b9050919050565b610e7181610e57565b8114610e7b575f80fd5b50565b5f81359050610e8c81610e68565b92915050565b610e9b81610e57565b8114610ea5575f80fd5b50565b5f81359050610eb681610e92565b92915050565b5f8160020b9050919050565b610ed181610ebc565b8114610edb575f80fd5b50565b5f81359050610eec81610ec8565b92915050565b5f805f805f60a08688031215610f0b57610f0a610e11565b5b5f610f1888828901610e24565b9550506020610f2988828901610e7e565b9450506040610f3a88828901610ea8565b9350506060610f4b88828901610ede565b9250506080610f5c88828901610ede565b9150509295509295909350565b5f6fffffffffffffffffffffffffffffffff82169050919050565b610f8d81610f69565b82525050565b5f604082019050610fa65f830185610f84565b610fb36020830184610f84565b9392505050565b5f819050919050565b610fcc81610fba565b82525050565b5f604082019050610fe55f830185610fc3565b610ff26020830184610fc3565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61103082610fba565b915061103b83610fba565b925082820190508082111561105357611052610ff9565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b61108f81610ebc565b82525050565b5f6020820190506110a85f830184611086565b92915050565b6110b781610f69565b81146110c1575f80fd5b50565b5f815190506110d2816110ae565b92915050565b5f81600f0b9050919050565b6110ed816110d8565b81146110f7575f80fd5b50565b5f81519050611108816110e4565b92915050565b61111781610fba565b8114611121575f80fd5b50565b5f815190506111328161110e565b92915050565b5f8160060b9050919050565b61114d81611138565b8114611157575f80fd5b50565b5f8151905061116881611144565b92915050565b61117781610e38565b8114611181575f80fd5b50565b5f815190506111928161116e565b92915050565b5f63ffffffff82169050919050565b6111b081611198565b81146111ba575f80fd5b50565b5f815190506111cb816111a7565b92915050565b5f8115159050919050565b6111e5816111d1565b81146111ef575f80fd5b50565b5f81519050611200816111dc565b92915050565b5f805f805f805f805f806101408b8d03121561122557611224610e11565b5b5f6112328d828e016110c4565b9a505060206112438d828e016110fa565b99505060406112548d828e016110fa565b98505060606112658d828e01611124565b97505060806112768d828e01611124565b96505060a06112878d828e01611124565b95505060c06112988d828e0161115a565b94505060e06112a98d828e01611184565b9350506101006112bb8d828e016111bd565b9250506101206112cd8d828e016111f2565b9150509295989b9194979a5092959850565b5f805f805f805f80610100898b0312156112fc576112fb610e11565b5b5f6113098b828c016110c4565b985050602061131a8b828c016110fa565b975050604061132b8b828c01611124565b965050606061133c8b828c01611124565b955050608061134d8b828c0161115a565b94505060a061135e8b828c01611184565b93505060c061136f8b828c016111bd565b92505060e06113808b828c016111f2565b915050929598509295989093965056fea264697066735822122086fddd7224b73a31418b824d9ec80534fe881034608e64e0b5dd6ee3bfdbdeb064736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x13\xC6\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xE6\xF8\x88\xD8\x14a\08W\x80c\xF6\xE4\xE2\xA3\x14a\0iW[_\x80\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x0E\xF2V[a\0\x9AV[`@Qa\0`\x92\x91\x90a\x0F\x93V[`@Q\x80\x91\x03\x90\xF3[a\0\x83`\x04\x806\x03\x81\x01\x90a\0~\x91\x90a\x0E\xF2V[a\x01\x8CV[`@Qa\0\x91\x92\x91\x90a\x0F\xD2V[`@Q\x80\x91\x03\x90\xF3[_\x80_a\0\xDC`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RPa\x02\xCBV[\x90P_a\x01\x08\x82\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x02\xEC\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_a\x01*\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x03\x16V[\x91PP_\x82_\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x01\x7FW_\x80a\x01X\x8C\x8C\x8B\x8B\x87a\x03<V[\x91P\x91Pa\x01t\x84_\x01Q\x83\x83\x87` \x01Q\x88`@\x01Qa\x06\x90V[\x80\x97P\x81\x98PPPPP[PPP\x95P\x95\x93PPPPV[_\x80_a\x01\xCE`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RPa\x02\xCBV[\x90P_a\x01\xFA\x82\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x02\xEC\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_a\x02\x1C\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x03\x16V[P\x90P_\x82_\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02\xBEWa\x02`\x81a\x02K\x89`\x02\x0Ba\x07\x14V[a\x02W\x89`\x02\x0Ba\x07\x14V[\x85_\x01Qa\nFV[\x80\x95P\x81\x96PPP_\x80a\x02w\x8C\x8C\x8C\x8C\x8Ca\0\x9AV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91P\x81\x87a\x02\xAB\x91\x90a\x10&V[\x96P\x80\x86a\x02\xB9\x91\x90a\x10&V[\x95PPP[PPP\x95P\x95\x93PPPPV[_`@\x82\x01Q`\x06R` \x82\x01Q`\x03R\x81Q_R`\x1A`\x0C \x90P\x91\x90PV[a\x02\xF4a\r\xB1V[_\x81\x90Pa\x03\x0F\x84cQN\xA4\xBF`\xE0\x1B\x85_\x1C\x84`\xA0a\x0B\tV[P\x92\x91PPV[_\x80_\x80a\x03+\x85c8P\xC7\xBD`\xE0\x1Ba\x0B'V[\x91P\x91P\x81\x93P\x80\x92PPP\x91P\x91V[_\x80_\x80_\x80`\x02\x80\x81\x11\x15a\x03UWa\x03Ta\x10YV[[\x8B`\x02\x81\x11\x15a\x03hWa\x03ga\x10YV[[\x03a\x04\xC8W\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x8A`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xA6\x91\x90a\x10\x95V[a\x01@`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xC2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xE6\x91\x90a\x12\x06V[\x90\x91\x92\x93\x94\x95\x96\x97\x98P\x90\x91\x92\x93\x94\x95\x96\x97P\x90\x91\x92\x93\x94\x95\x96P\x90\x91\x92\x93P\x90\x91\x92P\x90\x91P\x90PP\x80\x94P\x81\x95PPP\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x89`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04Q\x91\x90a\x10\x95V[a\x01@`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04mW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x91\x91\x90a\x12\x06V[\x90\x91\x92\x93\x94\x95\x96\x97\x98P\x90\x91\x92\x93\x94\x95\x96\x97P\x90\x91\x92\x93\x94\x95\x96P\x90\x91\x92\x93P\x90\x91\x92P\x90\x91P\x90PP\x80\x92P\x81\x93PPPa\x05\xFDV[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x8A`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\x01\x91\x90a\x10\x95V[a\x01\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05A\x91\x90a\x12\xDFV[\x90\x91\x92\x93\x94\x95\x96P\x90\x91\x92\x93\x94\x95P\x90\x91\x92P\x90\x91P\x90PP\x80\x94P\x81\x95PPP\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x89`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\x9B\x91\x90a\x10\x95V[a\x01\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xB7W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xDB\x91\x90a\x12\xDFV[\x90\x91\x92\x93\x94\x95\x96P\x90\x91\x92\x93\x94\x95P\x90\x91\x92P\x90\x91P\x90PP\x80\x92P\x81\x93PPP[\x88`\x02\x0B\x87`\x02\x0B\x12\x15a\x06\x1AW\x81\x84\x03\x95P\x80\x83\x03\x94Pa\x06\x82V[\x87`\x02\x0B\x87`\x02\x0B\x12a\x066W\x83\x82\x03\x95P\x82\x81\x03\x94Pa\x06\x81V[\x81\x84a\x06W\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0BMV[\x03\x03\x95P\x80\x83a\x06|\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0BfV[\x03\x03\x94P[[PPPP\x95P\x95\x93PPPPV[_\x80a\x06\xCC\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x7F\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x91Pa\x07\x08\x83\x86\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x7F\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x95P\x95\x93PPPPV[_\x80\x82\x90P_a\x07#\x82a\x0B\x94V[\x90Pb\r\x89\xE8\x81\x11\x15a\x07GWc\x08\xC3y\xA0_R` \x80Ra\x01T`AR`E`\x1C\xFD[_`\x01\x82\x16o\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01`\x01`\x80\x1B\x18\x02`\x01`\x80\x1B\x18\x90P_`\x02\x83\x16\x14a\x07\x90W`\x80o\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x82\x02\x90\x1C\x90P[_`\x04\x83\x16\x14a\x07\xB4W`\x80o\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x82\x02\x90\x1C\x90P[_`\x08\x83\x16\x14a\x07\xD8W`\x80o\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x82\x02\x90\x1C\x90P[_`\x10\x83\x16\x14a\x07\xFCW`\x80o\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x82\x02\x90\x1C\x90P[_` \x83\x16\x14a\x08 W`\x80o\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x82\x02\x90\x1C\x90P[_`@\x83\x16\x14a\x08DW`\x80o\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x82\x02\x90\x1C\x90P[_`\x80\x83\x16\x14a\x08hW`\x80o\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x82\x02\x90\x1C\x90P[_a\x01\0\x83\x16\x14a\x08\x8DW`\x80o\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x82\x02\x90\x1C\x90P[_a\x02\0\x83\x16\x14a\x08\xB2W`\x80o\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x82\x02\x90\x1C\x90P[_a\x04\0\x83\x16\x14a\x08\xD7W`\x80o\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x82\x02\x90\x1C\x90P[_a\x08\0\x83\x16\x14a\x08\xFCW`\x80o\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x82\x02\x90\x1C\x90P[_a\x10\0\x83\x16\x14a\t!W`\x80o\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x82\x02\x90\x1C\x90P[_a \0\x83\x16\x14a\tFW`\x80o\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x82\x02\x90\x1C\x90P[_a@\0\x83\x16\x14a\tkW`\x80op\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x82\x02\x90\x1C\x90P[_a\x80\0\x83\x16\x14a\t\x90W`\x80o1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x82\x02\x90\x1C\x90P[_b\x01\0\0\x83\x16\x14a\t\xB6W`\x80o\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x82\x02\x90\x1C\x90P[_b\x02\0\0\x83\x16\x14a\t\xDBW`\x80n]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x82\x02\x90\x1C\x90P[_b\x04\0\0\x83\x16\x14a\t\xFFW`\x80m\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x82\x02\x90\x1C\x90P[_b\x08\0\0\x83\x16\x14a\n!W`\x80k\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x82\x02\x90\x1C\x90P[_\x85\x13\x15a\n0W\x80_\x19\x04\x90P[`\x01\x80` \x1B\x03\x81\x01` \x1C\x93PPPP\x91\x90PV[_\x80a\nR\x85\x85a\x0B\xA6V[\x80\x95P\x81\x96PPP\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11a\n\x9FWa\n\x98\x85\x85\x85a\x0B\xC7V[\x91Pa\x0B\0V[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11a\n\xF1Wa\n\xDD\x86\x85\x85a\x0B\xC7V[\x91Pa\n\xEA\x85\x87\x85a\x0CKV[\x90Pa\n\xFFV[a\n\xFC\x85\x85\x85a\x0CKV[\x90P[[\x94P\x94\x92PPPV[\x83_R\x82`\x04R\x80\x82`$_\x88Z\xFAa\x0B W_\x80\xFD[PPPPPV[_\x80\x82_R`@_`\x04_\x87Z\xFAa\x0B=W_\x80\xFD[_Q\x91P` Q\x90P\x92P\x92\x90PV[_a\x0B_\x82c\xF3\x05\x83\x99`\xE0\x1Ba\x0C\x89V[\x90P\x91\x90PV[_a\x0Bx\x82cF\x14\x13\x19`\xE0\x1Ba\x0C\x89V[\x90P\x91\x90PV[_a\x0B\x8B\x84\x84\x84a\x0C\xA8V[\x90P\x93\x92PPPV[_\x81`\xFF\x1D\x82\x81\x01\x81\x18\x91PP\x91\x90PV[_\x80\x83\x83\x10\x83\x85\x18\x02\x80\x85\x18\x94P\x80\x84\x18\x93PP\x83\x83\x91P\x91P\x92P\x92\x90PV[_a\x0CB\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0C4```\xFF\x16\x85o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x87\x87\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x7FV[a\r`\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x93\x92PPPV[_a\x0C\x80\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85\x85\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\rlV[\x90P\x93\x92PPPV[_\x81_R` _`\x04_\x86Z\xFAa\x0C\x9EW_\x80\xFD[_Q\x90P\x92\x91PPV[_\x82\x84\x02\x90P`\x01\x15a\rYW\x81\x83\x85\x83\x04\x14\x85\x15\x17\x02a\rSW_\x19\x83\x85\t\x81\x81\x10\x82\x01\x81\x03\x83\x85\x87\t\x84_\x03\x85\x16\x82\x86\x11a\x0C\xECWc\xAEG\xF7\x02_R`\x04`\x1C\xFD[\x80\x86\x04\x95P\x85`\x03\x02`\x02\x18\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x81\x88\x02`\x02\x03\x02\x82\x84\x88\x03\x04`\x01\x84\x85_\x03\x04\x01\x88\x86\x11\x87\x03\x02\x17\x02\x95PPPPPPa\rYV[\x81\x81\x04\x90P[\x93\x92PPPV[_\x81\x83\x04\x90P\x92\x91PPV[_\x81\x83\x02_\x19\x83\x85\t\x81\x81\x10\x82\x01\x81\x03\x80l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x11a\r\x9DWc\xAEG\xF7\x02_R`\x04`\x1C\xFD[\x80`\xA0\x1B\x83``\x1C\x17\x93PPPP\x92\x91PPV[`@Q\x80`\xA0\x01`@R\x80_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[_\x80\xFD[`\x03\x81\x10a\x0E!W_\x80\xFD[PV[_\x815\x90Pa\x0E2\x81a\x0E\x15V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0Ea\x82a\x0E8V[\x90P\x91\x90PV[a\x0Eq\x81a\x0EWV[\x81\x14a\x0E{W_\x80\xFD[PV[_\x815\x90Pa\x0E\x8C\x81a\x0EhV[\x92\x91PPV[a\x0E\x9B\x81a\x0EWV[\x81\x14a\x0E\xA5W_\x80\xFD[PV[_\x815\x90Pa\x0E\xB6\x81a\x0E\x92V[\x92\x91PPV[_\x81`\x02\x0B\x90P\x91\x90PV[a\x0E\xD1\x81a\x0E\xBCV[\x81\x14a\x0E\xDBW_\x80\xFD[PV[_\x815\x90Pa\x0E\xEC\x81a\x0E\xC8V[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x0F\x0BWa\x0F\na\x0E\x11V[[_a\x0F\x18\x88\x82\x89\x01a\x0E$V[\x95PP` a\x0F)\x88\x82\x89\x01a\x0E~V[\x94PP`@a\x0F:\x88\x82\x89\x01a\x0E\xA8V[\x93PP``a\x0FK\x88\x82\x89\x01a\x0E\xDEV[\x92PP`\x80a\x0F\\\x88\x82\x89\x01a\x0E\xDEV[\x91PP\x92\x95P\x92\x95\x90\x93PV[_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0F\x8D\x81a\x0FiV[\x82RPPV[_`@\x82\x01\x90Pa\x0F\xA6_\x83\x01\x85a\x0F\x84V[a\x0F\xB3` \x83\x01\x84a\x0F\x84V[\x93\x92PPPV[_\x81\x90P\x91\x90PV[a\x0F\xCC\x81a\x0F\xBAV[\x82RPPV[_`@\x82\x01\x90Pa\x0F\xE5_\x83\x01\x85a\x0F\xC3V[a\x0F\xF2` \x83\x01\x84a\x0F\xC3V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x100\x82a\x0F\xBAV[\x91Pa\x10;\x83a\x0F\xBAV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x10SWa\x10Ra\x0F\xF9V[[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`!`\x04R`$_\xFD[a\x10\x8F\x81a\x0E\xBCV[\x82RPPV[_` \x82\x01\x90Pa\x10\xA8_\x83\x01\x84a\x10\x86V[\x92\x91PPV[a\x10\xB7\x81a\x0FiV[\x81\x14a\x10\xC1W_\x80\xFD[PV[_\x81Q\x90Pa\x10\xD2\x81a\x10\xAEV[\x92\x91PPV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\x10\xED\x81a\x10\xD8V[\x81\x14a\x10\xF7W_\x80\xFD[PV[_\x81Q\x90Pa\x11\x08\x81a\x10\xE4V[\x92\x91PPV[a\x11\x17\x81a\x0F\xBAV[\x81\x14a\x11!W_\x80\xFD[PV[_\x81Q\x90Pa\x112\x81a\x11\x0EV[\x92\x91PPV[_\x81`\x06\x0B\x90P\x91\x90PV[a\x11M\x81a\x118V[\x81\x14a\x11WW_\x80\xFD[PV[_\x81Q\x90Pa\x11h\x81a\x11DV[\x92\x91PPV[a\x11w\x81a\x0E8V[\x81\x14a\x11\x81W_\x80\xFD[PV[_\x81Q\x90Pa\x11\x92\x81a\x11nV[\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x11\xB0\x81a\x11\x98V[\x81\x14a\x11\xBAW_\x80\xFD[PV[_\x81Q\x90Pa\x11\xCB\x81a\x11\xA7V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x11\xE5\x81a\x11\xD1V[\x81\x14a\x11\xEFW_\x80\xFD[PV[_\x81Q\x90Pa\x12\0\x81a\x11\xDCV[\x92\x91PPV[_\x80_\x80_\x80_\x80_\x80a\x01@\x8B\x8D\x03\x12\x15a\x12%Wa\x12$a\x0E\x11V[[_a\x122\x8D\x82\x8E\x01a\x10\xC4V[\x9APP` a\x12C\x8D\x82\x8E\x01a\x10\xFAV[\x99PP`@a\x12T\x8D\x82\x8E\x01a\x10\xFAV[\x98PP``a\x12e\x8D\x82\x8E\x01a\x11$V[\x97PP`\x80a\x12v\x8D\x82\x8E\x01a\x11$V[\x96PP`\xA0a\x12\x87\x8D\x82\x8E\x01a\x11$V[\x95PP`\xC0a\x12\x98\x8D\x82\x8E\x01a\x11ZV[\x94PP`\xE0a\x12\xA9\x8D\x82\x8E\x01a\x11\x84V[\x93PPa\x01\0a\x12\xBB\x8D\x82\x8E\x01a\x11\xBDV[\x92PPa\x01 a\x12\xCD\x8D\x82\x8E\x01a\x11\xF2V[\x91PP\x92\x95\x98\x9B\x91\x94\x97\x9AP\x92\x95\x98PV[_\x80_\x80_\x80_\x80a\x01\0\x89\x8B\x03\x12\x15a\x12\xFCWa\x12\xFBa\x0E\x11V[[_a\x13\t\x8B\x82\x8C\x01a\x10\xC4V[\x98PP` a\x13\x1A\x8B\x82\x8C\x01a\x10\xFAV[\x97PP`@a\x13+\x8B\x82\x8C\x01a\x11$V[\x96PP``a\x13<\x8B\x82\x8C\x01a\x11$V[\x95PP`\x80a\x13M\x8B\x82\x8C\x01a\x11ZV[\x94PP`\xA0a\x13^\x8B\x82\x8C\x01a\x11\x84V[\x93PP`\xC0a\x13o\x8B\x82\x8C\x01a\x11\xBDV[\x92PP`\xE0a\x13\x80\x8B\x82\x8C\x01a\x11\xF2V[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV\xFE\xA2dipfsX\"\x12 \x86\xFD\xDDr$\xB7:1A\x8B\x82M\x9E\xC8\x054\xFE\x88\x104`\x8Ed\xE0\xB5\xDDn\xE3\xBF\xDB\xDE\xB0dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610034575f3560e01c8063e6f888d814610038578063f6e4e2a314610069575b5f80fd5b610052600480360381019061004d9190610ef2565b61009a565b604051610060929190610f93565b60405180910390f35b610083600480360381019061007e9190610ef2565b61018c565b604051610091929190610fd2565b60405180910390f35b5f805f6100dc60405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760020b81526020018660020b8152506102cb565b90505f610108828973ffffffffffffffffffffffffffffffffffffffff166102ec90919063ffffffff16565b90505f61012a8973ffffffffffffffffffffffffffffffffffffffff16610316565b9150505f825f01516fffffffffffffffffffffffffffffffff161461017f575f806101588c8c8b8b8761033c565b91509150610174845f0151838387602001518860400151610690565b809750819850505050505b5050509550959350505050565b5f805f6101ce60405180606001604052808873ffffffffffffffffffffffffffffffffffffffff1681526020018760020b81526020018660020b8152506102cb565b90505f6101fa828973ffffffffffffffffffffffffffffffffffffffff166102ec90919063ffffffff16565b90505f61021c8973ffffffffffffffffffffffffffffffffffffffff16610316565b5090505f825f01516fffffffffffffffffffffffffffffffff16146102be576102608161024b8960020b610714565b6102578960020b610714565b855f0151610a46565b80955081965050505f806102778c8c8c8c8c61009a565b6fffffffffffffffffffffffffffffffff1691506fffffffffffffffffffffffffffffffff16915081876102ab9190611026565b965080866102b99190611026565b955050505b5050509550959350505050565b5f6040820151600652602082015160035281515f52601a600c209050919050565b6102f4610db1565b5f81905061030f8463514ea4bf60e01b855f1c8460a0610b09565b5092915050565b5f805f8061032b85633850c7bd60e01b610b27565b915091508193508092505050915091565b5f805f805f8060028081111561035557610354611059565b5b8b600281111561036857610367611059565b5b036104c8578973ffffffffffffffffffffffffffffffffffffffff1663f30dba938a6040518263ffffffff1660e01b81526004016103a69190611095565b61014060405180830381865afa1580156103c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103e69190611206565b90919293949596979850909192939495969750909192939495965090919293509091925090915090505080945081955050508973ffffffffffffffffffffffffffffffffffffffff1663f30dba93896040518263ffffffff1660e01b81526004016104519190611095565b61014060405180830381865afa15801561046d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104919190611206565b90919293949596979850909192939495969750909192939495965090919293509091925090915090505080925081935050506105fd565b8973ffffffffffffffffffffffffffffffffffffffff1663f30dba938a6040518263ffffffff1660e01b81526004016105019190611095565b61010060405180830381865afa15801561051d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061054191906112df565b9091929394959650909192939495509091925090915090505080945081955050508973ffffffffffffffffffffffffffffffffffffffff1663f30dba93896040518263ffffffff1660e01b815260040161059b9190611095565b61010060405180830381865afa1580156105b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105db91906112df565b9091929394959650909192939495509091925090915090505080925081935050505b8860020b8760020b121561061a5781840395508083039450610682565b8760020b8760020b126106365783820395508281039450610681565b81846106578c73ffffffffffffffffffffffffffffffffffffffff16610b4d565b03039550808361067c8c73ffffffffffffffffffffffffffffffffffffffff16610b66565b030394505b5b505050509550959350505050565b5f806106cc848703700100000000000000000000000000000000896fffffffffffffffffffffffffffffffff16610b7f9092919063ffffffff16565b9150610708838603700100000000000000000000000000000000896fffffffffffffffffffffffffffffffff16610b7f9092919063ffffffff16565b90509550959350505050565b5f808290505f61072382610b94565b9050620d89e8811115610747576308c379a05f52602080526101546041526045601cfd5b5f600182166ffffcb933bd6fad37aa2d162d1a594001600160801b1802600160801b1890505f60028316146107905760806ffff97272373d413259a46990580e213a8202901c90505b5f60048316146107b45760806ffff2e50f5f656932ef12357cf3c7fdcc8202901c90505b5f60088316146107d85760806fffe5caca7e10e4e61c3624eaa0941cd08202901c90505b5f60108316146107fc5760806fffcb9843d60f6159c9db58835c9266448202901c90505b5f60208316146108205760806fff973b41fa98c081472e6896dfb254c08202901c90505b5f60408316146108445760806fff2ea16466c96a3843ec78b326b528618202901c90505b5f60808316146108685760806ffe5dee046a99a2a811c461f1969c30538202901c90505b5f61010083161461088d5760806ffcbe86c7900a88aedcffc83b479aa3a48202901c90505b5f6102008316146108b25760806ff987a7253ac413176f2b074cf7815e548202901c90505b5f6104008316146108d75760806ff3392b0822b70005940c7a398e4b70f38202901c90505b5f6108008316146108fc5760806fe7159475a2c29b7443b29c7fa6e889d98202901c90505b5f6110008316146109215760806fd097f3bdfd2022b8845ad8f792aa58258202901c90505b5f6120008316146109465760806fa9f746462d870fdf8a65dc1f90e061e58202901c90505b5f61400083161461096b5760806f70d869a156d2a1b890bb3df62baf32f78202901c90505b5f6180008316146109905760806f31be135f97d08fd981231505542fcfa68202901c90505b5f620100008316146109b65760806f09aa508b5b7a84e1c677de54f3e99bc98202901c90505b5f620200008316146109db5760806e5d6af8dedb81196699c329225ee6048202901c90505b5f620400008316146109ff5760806d2216e584f5fa1ea926041bedfe988202901c90505b5f62080000831614610a215760806b048a170391f7dc42444e8fa28202901c90505b5f851315610a3057805f190490505b60018060201b03810160201c9350505050919050565b5f80610a528585610ba6565b80955081965050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1611610a9f57610a98858585610bc7565b9150610b00565b8373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1611610af157610add868585610bc7565b9150610aea858785610c4b565b9050610aff565b610afc858585610c4b565b90505b5b94509492505050565b835f5282600452808260245f885afa610b20575f80fd5b5050505050565b5f80825f5260405f60045f875afa610b3d575f80fd5b5f51915060205190509250929050565b5f610b5f8263f305839960e01b610c89565b9050919050565b5f610b7882634614131960e01b610c89565b9050919050565b5f610b8b848484610ca8565b90509392505050565b5f8160ff1d8281018118915050919050565b5f808383108385180280851894508084189350508383915091509250929050565b5f610c428473ffffffffffffffffffffffffffffffffffffffff16610c34606060ff16856fffffffffffffffffffffffffffffffff16901b87870373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16610b7f565b610d6090919063ffffffff16565b90509392505050565b5f610c80826fffffffffffffffffffffffffffffffff1685850373ffffffffffffffffffffffffffffffffffffffff16610d6c565b90509392505050565b5f815f5260205f60045f865afa610c9e575f80fd5b5f51905092915050565b5f8284029050600115610d595781838583041485151702610d53575f198385098181108201810383858709845f038516828611610cec5763ae47f7025f526004601cfd5b808604955085600302600218808702600203810290508087026002038102905080870260020381029050808702600203810290508087026002038102905080818802600203028284880304600184855f030401888611870302170295505050505050610d59565b81810490505b9392505050565b5f818304905092915050565b5f8183025f1983850981811082018103806c0100000000000000000000000011610d9d5763ae47f7025f526004601cfd5b8060a01b8360601c17935050505092915050565b6040518060a001604052805f6fffffffffffffffffffffffffffffffff1681526020015f81526020015f81526020015f6fffffffffffffffffffffffffffffffff1681526020015f6fffffffffffffffffffffffffffffffff1681525090565b5f80fd5b60038110610e21575f80fd5b50565b5f81359050610e3281610e15565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610e6182610e38565b9050919050565b610e7181610e57565b8114610e7b575f80fd5b50565b5f81359050610e8c81610e68565b92915050565b610e9b81610e57565b8114610ea5575f80fd5b50565b5f81359050610eb681610e92565b92915050565b5f8160020b9050919050565b610ed181610ebc565b8114610edb575f80fd5b50565b5f81359050610eec81610ec8565b92915050565b5f805f805f60a08688031215610f0b57610f0a610e11565b5b5f610f1888828901610e24565b9550506020610f2988828901610e7e565b9450506040610f3a88828901610ea8565b9350506060610f4b88828901610ede565b9250506080610f5c88828901610ede565b9150509295509295909350565b5f6fffffffffffffffffffffffffffffffff82169050919050565b610f8d81610f69565b82525050565b5f604082019050610fa65f830185610f84565b610fb36020830184610f84565b9392505050565b5f819050919050565b610fcc81610fba565b82525050565b5f604082019050610fe55f830185610fc3565b610ff26020830184610fc3565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f61103082610fba565b915061103b83610fba565b925082820190508082111561105357611052610ff9565b5b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b61108f81610ebc565b82525050565b5f6020820190506110a85f830184611086565b92915050565b6110b781610f69565b81146110c1575f80fd5b50565b5f815190506110d2816110ae565b92915050565b5f81600f0b9050919050565b6110ed816110d8565b81146110f7575f80fd5b50565b5f81519050611108816110e4565b92915050565b61111781610fba565b8114611121575f80fd5b50565b5f815190506111328161110e565b92915050565b5f8160060b9050919050565b61114d81611138565b8114611157575f80fd5b50565b5f8151905061116881611144565b92915050565b61117781610e38565b8114611181575f80fd5b50565b5f815190506111928161116e565b92915050565b5f63ffffffff82169050919050565b6111b081611198565b81146111ba575f80fd5b50565b5f815190506111cb816111a7565b92915050565b5f8115159050919050565b6111e5816111d1565b81146111ef575f80fd5b50565b5f81519050611200816111dc565b92915050565b5f805f805f805f805f806101408b8d03121561122557611224610e11565b5b5f6112328d828e016110c4565b9a505060206112438d828e016110fa565b99505060406112548d828e016110fa565b98505060606112658d828e01611124565b97505060806112768d828e01611124565b96505060a06112878d828e01611124565b95505060c06112988d828e0161115a565b94505060e06112a98d828e01611184565b9350506101006112bb8d828e016111bd565b9250506101206112cd8d828e016111f2565b9150509295989b9194979a5092959850565b5f805f805f805f80610100898b0312156112fc576112fb610e11565b5b5f6113098b828c016110c4565b985050602061131a8b828c016110fa565b975050604061132b8b828c01611124565b965050606061133c8b828c01611124565b955050608061134d8b828c0161115a565b94505060a061135e8b828c01611184565b93505060c061136f8b828c016111bd565b92505060e06113808b828c016111f2565b915050929598509295989093965056fea264697066735822122086fddd7224b73a31418b824d9ec80534fe881034608e64e0b5dd6ee3bfdbdeb064736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\xE6\xF8\x88\xD8\x14a\08W\x80c\xF6\xE4\xE2\xA3\x14a\0iW[_\x80\xFD[a\0R`\x04\x806\x03\x81\x01\x90a\0M\x91\x90a\x0E\xF2V[a\0\x9AV[`@Qa\0`\x92\x91\x90a\x0F\x93V[`@Q\x80\x91\x03\x90\xF3[a\0\x83`\x04\x806\x03\x81\x01\x90a\0~\x91\x90a\x0E\xF2V[a\x01\x8CV[`@Qa\0\x91\x92\x91\x90a\x0F\xD2V[`@Q\x80\x91\x03\x90\xF3[_\x80_a\0\xDC`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RPa\x02\xCBV[\x90P_a\x01\x08\x82\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x02\xEC\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_a\x01*\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x03\x16V[\x91PP_\x82_\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x01\x7FW_\x80a\x01X\x8C\x8C\x8B\x8B\x87a\x03<V[\x91P\x91Pa\x01t\x84_\x01Q\x83\x83\x87` \x01Q\x88`@\x01Qa\x06\x90V[\x80\x97P\x81\x98PPPPP[PPP\x95P\x95\x93PPPPV[_\x80_a\x01\xCE`@Q\x80``\x01`@R\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x87`\x02\x0B\x81R` \x01\x86`\x02\x0B\x81RPa\x02\xCBV[\x90P_a\x01\xFA\x82\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x02\xEC\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P_a\x02\x1C\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x03\x16V[P\x90P_\x82_\x01Qo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x02\xBEWa\x02`\x81a\x02K\x89`\x02\x0Ba\x07\x14V[a\x02W\x89`\x02\x0Ba\x07\x14V[\x85_\x01Qa\nFV[\x80\x95P\x81\x96PPP_\x80a\x02w\x8C\x8C\x8C\x8C\x8Ca\0\x9AV[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x91P\x81\x87a\x02\xAB\x91\x90a\x10&V[\x96P\x80\x86a\x02\xB9\x91\x90a\x10&V[\x95PPP[PPP\x95P\x95\x93PPPPV[_`@\x82\x01Q`\x06R` \x82\x01Q`\x03R\x81Q_R`\x1A`\x0C \x90P\x91\x90PV[a\x02\xF4a\r\xB1V[_\x81\x90Pa\x03\x0F\x84cQN\xA4\xBF`\xE0\x1B\x85_\x1C\x84`\xA0a\x0B\tV[P\x92\x91PPV[_\x80_\x80a\x03+\x85c8P\xC7\xBD`\xE0\x1Ba\x0B'V[\x91P\x91P\x81\x93P\x80\x92PPP\x91P\x91V[_\x80_\x80_\x80`\x02\x80\x81\x11\x15a\x03UWa\x03Ta\x10YV[[\x8B`\x02\x81\x11\x15a\x03hWa\x03ga\x10YV[[\x03a\x04\xC8W\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x8A`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03\xA6\x91\x90a\x10\x95V[a\x01@`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xC2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03\xE6\x91\x90a\x12\x06V[\x90\x91\x92\x93\x94\x95\x96\x97\x98P\x90\x91\x92\x93\x94\x95\x96\x97P\x90\x91\x92\x93\x94\x95\x96P\x90\x91\x92\x93P\x90\x91\x92P\x90\x91P\x90PP\x80\x94P\x81\x95PPP\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x89`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04Q\x91\x90a\x10\x95V[a\x01@`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04mW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x91\x91\x90a\x12\x06V[\x90\x91\x92\x93\x94\x95\x96\x97\x98P\x90\x91\x92\x93\x94\x95\x96\x97P\x90\x91\x92\x93\x94\x95\x96P\x90\x91\x92\x93P\x90\x91\x92P\x90\x91P\x90PP\x80\x92P\x81\x93PPPa\x05\xFDV[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x8A`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\x01\x91\x90a\x10\x95V[a\x01\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05A\x91\x90a\x12\xDFV[\x90\x91\x92\x93\x94\x95\x96P\x90\x91\x92\x93\x94\x95P\x90\x91\x92P\x90\x91P\x90PP\x80\x94P\x81\x95PPP\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x89`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\x9B\x91\x90a\x10\x95V[a\x01\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xB7W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xDB\x91\x90a\x12\xDFV[\x90\x91\x92\x93\x94\x95\x96P\x90\x91\x92\x93\x94\x95P\x90\x91\x92P\x90\x91P\x90PP\x80\x92P\x81\x93PPP[\x88`\x02\x0B\x87`\x02\x0B\x12\x15a\x06\x1AW\x81\x84\x03\x95P\x80\x83\x03\x94Pa\x06\x82V[\x87`\x02\x0B\x87`\x02\x0B\x12a\x066W\x83\x82\x03\x95P\x82\x81\x03\x94Pa\x06\x81V[\x81\x84a\x06W\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0BMV[\x03\x03\x95P\x80\x83a\x06|\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0BfV[\x03\x03\x94P[[PPPP\x95P\x95\x93PPPPV[_\x80a\x06\xCC\x84\x87\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x7F\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x91Pa\x07\x08\x83\x86\x03p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x89o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x7F\x90\x92\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x95P\x95\x93PPPPV[_\x80\x82\x90P_a\x07#\x82a\x0B\x94V[\x90Pb\r\x89\xE8\x81\x11\x15a\x07GWc\x08\xC3y\xA0_R` \x80Ra\x01T`AR`E`\x1C\xFD[_`\x01\x82\x16o\xFF\xFC\xB93\xBDo\xAD7\xAA-\x16-\x1AY@\x01`\x01`\x80\x1B\x18\x02`\x01`\x80\x1B\x18\x90P_`\x02\x83\x16\x14a\x07\x90W`\x80o\xFF\xF9rr7=A2Y\xA4i\x90X\x0E!:\x82\x02\x90\x1C\x90P[_`\x04\x83\x16\x14a\x07\xB4W`\x80o\xFF\xF2\xE5\x0F_ei2\xEF\x125|\xF3\xC7\xFD\xCC\x82\x02\x90\x1C\x90P[_`\x08\x83\x16\x14a\x07\xD8W`\x80o\xFF\xE5\xCA\xCA~\x10\xE4\xE6\x1C6$\xEA\xA0\x94\x1C\xD0\x82\x02\x90\x1C\x90P[_`\x10\x83\x16\x14a\x07\xFCW`\x80o\xFF\xCB\x98C\xD6\x0FaY\xC9\xDBX\x83\\\x92fD\x82\x02\x90\x1C\x90P[_` \x83\x16\x14a\x08 W`\x80o\xFF\x97;A\xFA\x98\xC0\x81G.h\x96\xDF\xB2T\xC0\x82\x02\x90\x1C\x90P[_`@\x83\x16\x14a\x08DW`\x80o\xFF.\xA1df\xC9j8C\xECx\xB3&\xB5(a\x82\x02\x90\x1C\x90P[_`\x80\x83\x16\x14a\x08hW`\x80o\xFE]\xEE\x04j\x99\xA2\xA8\x11\xC4a\xF1\x96\x9C0S\x82\x02\x90\x1C\x90P[_a\x01\0\x83\x16\x14a\x08\x8DW`\x80o\xFC\xBE\x86\xC7\x90\n\x88\xAE\xDC\xFF\xC8;G\x9A\xA3\xA4\x82\x02\x90\x1C\x90P[_a\x02\0\x83\x16\x14a\x08\xB2W`\x80o\xF9\x87\xA7%:\xC4\x13\x17o+\x07L\xF7\x81^T\x82\x02\x90\x1C\x90P[_a\x04\0\x83\x16\x14a\x08\xD7W`\x80o\xF39+\x08\"\xB7\0\x05\x94\x0Cz9\x8EKp\xF3\x82\x02\x90\x1C\x90P[_a\x08\0\x83\x16\x14a\x08\xFCW`\x80o\xE7\x15\x94u\xA2\xC2\x9BtC\xB2\x9C\x7F\xA6\xE8\x89\xD9\x82\x02\x90\x1C\x90P[_a\x10\0\x83\x16\x14a\t!W`\x80o\xD0\x97\xF3\xBD\xFD \"\xB8\x84Z\xD8\xF7\x92\xAAX%\x82\x02\x90\x1C\x90P[_a \0\x83\x16\x14a\tFW`\x80o\xA9\xF7FF-\x87\x0F\xDF\x8Ae\xDC\x1F\x90\xE0a\xE5\x82\x02\x90\x1C\x90P[_a@\0\x83\x16\x14a\tkW`\x80op\xD8i\xA1V\xD2\xA1\xB8\x90\xBB=\xF6+\xAF2\xF7\x82\x02\x90\x1C\x90P[_a\x80\0\x83\x16\x14a\t\x90W`\x80o1\xBE\x13_\x97\xD0\x8F\xD9\x81#\x15\x05T/\xCF\xA6\x82\x02\x90\x1C\x90P[_b\x01\0\0\x83\x16\x14a\t\xB6W`\x80o\t\xAAP\x8B[z\x84\xE1\xC6w\xDET\xF3\xE9\x9B\xC9\x82\x02\x90\x1C\x90P[_b\x02\0\0\x83\x16\x14a\t\xDBW`\x80n]j\xF8\xDE\xDB\x81\x19f\x99\xC3)\"^\xE6\x04\x82\x02\x90\x1C\x90P[_b\x04\0\0\x83\x16\x14a\t\xFFW`\x80m\"\x16\xE5\x84\xF5\xFA\x1E\xA9&\x04\x1B\xED\xFE\x98\x82\x02\x90\x1C\x90P[_b\x08\0\0\x83\x16\x14a\n!W`\x80k\x04\x8A\x17\x03\x91\xF7\xDCBDN\x8F\xA2\x82\x02\x90\x1C\x90P[_\x85\x13\x15a\n0W\x80_\x19\x04\x90P[`\x01\x80` \x1B\x03\x81\x01` \x1C\x93PPPP\x91\x90PV[_\x80a\nR\x85\x85a\x0B\xA6V[\x80\x95P\x81\x96PPP\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11a\n\x9FWa\n\x98\x85\x85\x85a\x0B\xC7V[\x91Pa\x0B\0V[\x83s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x11a\n\xF1Wa\n\xDD\x86\x85\x85a\x0B\xC7V[\x91Pa\n\xEA\x85\x87\x85a\x0CKV[\x90Pa\n\xFFV[a\n\xFC\x85\x85\x85a\x0CKV[\x90P[[\x94P\x94\x92PPPV[\x83_R\x82`\x04R\x80\x82`$_\x88Z\xFAa\x0B W_\x80\xFD[PPPPPV[_\x80\x82_R`@_`\x04_\x87Z\xFAa\x0B=W_\x80\xFD[_Q\x91P` Q\x90P\x92P\x92\x90PV[_a\x0B_\x82c\xF3\x05\x83\x99`\xE0\x1Ba\x0C\x89V[\x90P\x91\x90PV[_a\x0Bx\x82cF\x14\x13\x19`\xE0\x1Ba\x0C\x89V[\x90P\x91\x90PV[_a\x0B\x8B\x84\x84\x84a\x0C\xA8V[\x90P\x93\x92PPPV[_\x81`\xFF\x1D\x82\x81\x01\x81\x18\x91PP\x91\x90PV[_\x80\x83\x83\x10\x83\x85\x18\x02\x80\x85\x18\x94P\x80\x84\x18\x93PP\x83\x83\x91P\x91P\x92P\x92\x90PV[_a\x0CB\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0C4```\xFF\x16\x85o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x1B\x87\x87\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\x0B\x7FV[a\r`\x90\x91\x90c\xFF\xFF\xFF\xFF\x16V[\x90P\x93\x92PPPV[_a\x0C\x80\x82o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85\x85\x03s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16a\rlV[\x90P\x93\x92PPPV[_\x81_R` _`\x04_\x86Z\xFAa\x0C\x9EW_\x80\xFD[_Q\x90P\x92\x91PPV[_\x82\x84\x02\x90P`\x01\x15a\rYW\x81\x83\x85\x83\x04\x14\x85\x15\x17\x02a\rSW_\x19\x83\x85\t\x81\x81\x10\x82\x01\x81\x03\x83\x85\x87\t\x84_\x03\x85\x16\x82\x86\x11a\x0C\xECWc\xAEG\xF7\x02_R`\x04`\x1C\xFD[\x80\x86\x04\x95P\x85`\x03\x02`\x02\x18\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x87\x02`\x02\x03\x81\x02\x90P\x80\x81\x88\x02`\x02\x03\x02\x82\x84\x88\x03\x04`\x01\x84\x85_\x03\x04\x01\x88\x86\x11\x87\x03\x02\x17\x02\x95PPPPPPa\rYV[\x81\x81\x04\x90P[\x93\x92PPPV[_\x81\x83\x04\x90P\x92\x91PPV[_\x81\x83\x02_\x19\x83\x85\t\x81\x81\x10\x82\x01\x81\x03\x80l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x11a\r\x9DWc\xAEG\xF7\x02_R`\x04`\x1C\xFD[\x80`\xA0\x1B\x83``\x1C\x17\x93PPPP\x92\x91PPV[`@Q\x80`\xA0\x01`@R\x80_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[_\x80\xFD[`\x03\x81\x10a\x0E!W_\x80\xFD[PV[_\x815\x90Pa\x0E2\x81a\x0E\x15V[\x92\x91PPV[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0Ea\x82a\x0E8V[\x90P\x91\x90PV[a\x0Eq\x81a\x0EWV[\x81\x14a\x0E{W_\x80\xFD[PV[_\x815\x90Pa\x0E\x8C\x81a\x0EhV[\x92\x91PPV[a\x0E\x9B\x81a\x0EWV[\x81\x14a\x0E\xA5W_\x80\xFD[PV[_\x815\x90Pa\x0E\xB6\x81a\x0E\x92V[\x92\x91PPV[_\x81`\x02\x0B\x90P\x91\x90PV[a\x0E\xD1\x81a\x0E\xBCV[\x81\x14a\x0E\xDBW_\x80\xFD[PV[_\x815\x90Pa\x0E\xEC\x81a\x0E\xC8V[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x0F\x0BWa\x0F\na\x0E\x11V[[_a\x0F\x18\x88\x82\x89\x01a\x0E$V[\x95PP` a\x0F)\x88\x82\x89\x01a\x0E~V[\x94PP`@a\x0F:\x88\x82\x89\x01a\x0E\xA8V[\x93PP``a\x0FK\x88\x82\x89\x01a\x0E\xDEV[\x92PP`\x80a\x0F\\\x88\x82\x89\x01a\x0E\xDEV[\x91PP\x92\x95P\x92\x95\x90\x93PV[_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0F\x8D\x81a\x0FiV[\x82RPPV[_`@\x82\x01\x90Pa\x0F\xA6_\x83\x01\x85a\x0F\x84V[a\x0F\xB3` \x83\x01\x84a\x0F\x84V[\x93\x92PPPV[_\x81\x90P\x91\x90PV[a\x0F\xCC\x81a\x0F\xBAV[\x82RPPV[_`@\x82\x01\x90Pa\x0F\xE5_\x83\x01\x85a\x0F\xC3V[a\x0F\xF2` \x83\x01\x84a\x0F\xC3V[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x100\x82a\x0F\xBAV[\x91Pa\x10;\x83a\x0F\xBAV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x10SWa\x10Ra\x0F\xF9V[[\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`!`\x04R`$_\xFD[a\x10\x8F\x81a\x0E\xBCV[\x82RPPV[_` \x82\x01\x90Pa\x10\xA8_\x83\x01\x84a\x10\x86V[\x92\x91PPV[a\x10\xB7\x81a\x0FiV[\x81\x14a\x10\xC1W_\x80\xFD[PV[_\x81Q\x90Pa\x10\xD2\x81a\x10\xAEV[\x92\x91PPV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\x10\xED\x81a\x10\xD8V[\x81\x14a\x10\xF7W_\x80\xFD[PV[_\x81Q\x90Pa\x11\x08\x81a\x10\xE4V[\x92\x91PPV[a\x11\x17\x81a\x0F\xBAV[\x81\x14a\x11!W_\x80\xFD[PV[_\x81Q\x90Pa\x112\x81a\x11\x0EV[\x92\x91PPV[_\x81`\x06\x0B\x90P\x91\x90PV[a\x11M\x81a\x118V[\x81\x14a\x11WW_\x80\xFD[PV[_\x81Q\x90Pa\x11h\x81a\x11DV[\x92\x91PPV[a\x11w\x81a\x0E8V[\x81\x14a\x11\x81W_\x80\xFD[PV[_\x81Q\x90Pa\x11\x92\x81a\x11nV[\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x11\xB0\x81a\x11\x98V[\x81\x14a\x11\xBAW_\x80\xFD[PV[_\x81Q\x90Pa\x11\xCB\x81a\x11\xA7V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x11\xE5\x81a\x11\xD1V[\x81\x14a\x11\xEFW_\x80\xFD[PV[_\x81Q\x90Pa\x12\0\x81a\x11\xDCV[\x92\x91PPV[_\x80_\x80_\x80_\x80_\x80a\x01@\x8B\x8D\x03\x12\x15a\x12%Wa\x12$a\x0E\x11V[[_a\x122\x8D\x82\x8E\x01a\x10\xC4V[\x9APP` a\x12C\x8D\x82\x8E\x01a\x10\xFAV[\x99PP`@a\x12T\x8D\x82\x8E\x01a\x10\xFAV[\x98PP``a\x12e\x8D\x82\x8E\x01a\x11$V[\x97PP`\x80a\x12v\x8D\x82\x8E\x01a\x11$V[\x96PP`\xA0a\x12\x87\x8D\x82\x8E\x01a\x11$V[\x95PP`\xC0a\x12\x98\x8D\x82\x8E\x01a\x11ZV[\x94PP`\xE0a\x12\xA9\x8D\x82\x8E\x01a\x11\x84V[\x93PPa\x01\0a\x12\xBB\x8D\x82\x8E\x01a\x11\xBDV[\x92PPa\x01 a\x12\xCD\x8D\x82\x8E\x01a\x11\xF2V[\x91PP\x92\x95\x98\x9B\x91\x94\x97\x9AP\x92\x95\x98PV[_\x80_\x80_\x80_\x80a\x01\0\x89\x8B\x03\x12\x15a\x12\xFCWa\x12\xFBa\x0E\x11V[[_a\x13\t\x8B\x82\x8C\x01a\x10\xC4V[\x98PP` a\x13\x1A\x8B\x82\x8C\x01a\x10\xFAV[\x97PP`@a\x13+\x8B\x82\x8C\x01a\x11$V[\x96PP``a\x13<\x8B\x82\x8C\x01a\x11$V[\x95PP`\x80a\x13M\x8B\x82\x8C\x01a\x11ZV[\x94PP`\xA0a\x13^\x8B\x82\x8C\x01a\x11\x84V[\x93PP`\xC0a\x13o\x8B\x82\x8C\x01a\x11\xBDV[\x92PP`\xE0a\x13\x80\x8B\x82\x8C\x01a\x11\xF2V[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV\xFE\xA2dipfsX\"\x12 \x86\xFD\xDDr$\xB7:1A\x8B\x82M\x9E\xC8\x054\xFE\x88\x104`\x8Ed\xE0\xB5\xDDn\xE3\xBF\xDB\xDE\xB0dsolcC\0\x08\x1A\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DEX(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<DEX> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl DEX {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for DEX {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for DEX {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct V3PoolCallee(alloy::sol_types::private::Address);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<V3PoolCallee>
        for alloy::sol_types::private::Address {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                '_,
            > {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Address,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        self,
                    )
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encode_packed_to(
                    self,
                    out,
                )
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::abi_encoded_size(
                    self,
                )
            }
        }
        #[automatically_derived]
        impl V3PoolCallee {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: alloy::sol_types::private::Address) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> alloy::sol_types::private::Address {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for V3PoolCallee {
            type RustType = alloy::sol_types::private::Address;
            type Token<'a> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::Token<
                'a,
            >;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::type_check(
                    token,
                )
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::detokenize(
                    token,
                )
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for V3PoolCallee {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                    rust,
                )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    out,
                )
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    rust,
                )
            }
        }
    };
    /**Function with signature `getFeesOwed(uint8,address,address,int24,int24)` and selector `0xe6f888d8`.
```solidity
function getFeesOwed(DEX dex, V3PoolCallee pool, address owner, int24 tickLower, int24 tickUpper) external view returns (uint128 tokensOwed0, uint128 tokensOwed1);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFeesOwedCall {
        #[allow(missing_docs)]
        pub dex: <DEX as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub pool: <V3PoolCallee as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tickLower: alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub tickUpper: alloy::sol_types::private::primitives::aliases::I24,
    }
    ///Container type for the return parameters of the [`getFeesOwed(uint8,address,address,int24,int24)`](getFeesOwedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getFeesOwedReturn {
        #[allow(missing_docs)]
        pub tokensOwed0: u128,
        #[allow(missing_docs)]
        pub tokensOwed1: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                DEX,
                V3PoolCallee,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <DEX as alloy::sol_types::SolType>::RustType,
                <V3PoolCallee as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::I24,
                alloy::sol_types::private::primitives::aliases::I24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFeesOwedCall> for UnderlyingRustTuple<'_> {
                fn from(value: getFeesOwedCall) -> Self {
                    (
                        value.dex,
                        value.pool,
                        value.owner,
                        value.tickLower,
                        value.tickUpper,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getFeesOwedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        dex: tuple.0,
                        pool: tuple.1,
                        owner: tuple.2,
                        tickLower: tuple.3,
                        tickUpper: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128, u128);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getFeesOwedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getFeesOwedReturn) -> Self {
                    (value.tokensOwed0, value.tokensOwed1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getFeesOwedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tokensOwed0: tuple.0,
                        tokensOwed1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getFeesOwedCall {
            type Parameters<'a> = (
                DEX,
                V3PoolCallee,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getFeesOwedReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<128>,
                alloy::sol_types::sol_data::Uint<128>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getFeesOwed(uint8,address,address,int24,int24)";
            const SELECTOR: [u8; 4] = [230u8, 248u8, 136u8, 216u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <DEX as alloy_sol_types::SolType>::tokenize(&self.dex),
                    <V3PoolCallee as alloy_sol_types::SolType>::tokenize(&self.pool),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getTotalAmounts(uint8,address,address,int24,int24)` and selector `0xf6e4e2a3`.
```solidity
function getTotalAmounts(DEX dex, V3PoolCallee pool, address owner, int24 tickLower, int24 tickUpper) external view returns (uint256 amount0, uint256 amount1);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalAmountsCall {
        #[allow(missing_docs)]
        pub dex: <DEX as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub pool: <V3PoolCallee as alloy::sol_types::SolType>::RustType,
        #[allow(missing_docs)]
        pub owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub tickLower: alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub tickUpper: alloy::sol_types::private::primitives::aliases::I24,
    }
    ///Container type for the return parameters of the [`getTotalAmounts(uint8,address,address,int24,int24)`](getTotalAmountsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getTotalAmountsReturn {
        #[allow(missing_docs)]
        pub amount0: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub amount1: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                DEX,
                V3PoolCallee,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <DEX as alloy::sol_types::SolType>::RustType,
                <V3PoolCallee as alloy::sol_types::SolType>::RustType,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::I24,
                alloy::sol_types::private::primitives::aliases::I24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalAmountsCall> for UnderlyingRustTuple<'_> {
                fn from(value: getTotalAmountsCall) -> Self {
                    (
                        value.dex,
                        value.pool,
                        value.owner,
                        value.tickLower,
                        value.tickUpper,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getTotalAmountsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        dex: tuple.0,
                        pool: tuple.1,
                        owner: tuple.2,
                        tickLower: tuple.3,
                        tickUpper: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getTotalAmountsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: getTotalAmountsReturn) -> Self {
                    (value.amount0, value.amount1)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for getTotalAmountsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        amount0: tuple.0,
                        amount1: tuple.1,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getTotalAmountsCall {
            type Parameters<'a> = (
                DEX,
                V3PoolCallee,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Int<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getTotalAmountsReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getTotalAmounts(uint8,address,address,int24,int24)";
            const SELECTOR: [u8; 4] = [246u8, 228u8, 226u8, 163u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <DEX as alloy_sol_types::SolType>::tokenize(&self.dex),
                    <V3PoolCallee as alloy_sol_types::SolType>::tokenize(&self.pool),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickLower),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickUpper),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`PositionLens`](self) function calls.
    pub enum PositionLensCalls {
        #[allow(missing_docs)]
        getFeesOwed(getFeesOwedCall),
        #[allow(missing_docs)]
        getTotalAmounts(getTotalAmountsCall),
    }
    #[automatically_derived]
    impl PositionLensCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [230u8, 248u8, 136u8, 216u8],
            [246u8, 228u8, 226u8, 163u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for PositionLensCalls {
        const NAME: &'static str = "PositionLensCalls";
        const MIN_DATA_LENGTH: usize = 160usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getFeesOwed(_) => {
                    <getFeesOwedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getTotalAmounts(_) => {
                    <getTotalAmountsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<PositionLensCalls>] = &[
                {
                    fn getFeesOwed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionLensCalls> {
                        <getFeesOwedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionLensCalls::getFeesOwed)
                    }
                    getFeesOwed
                },
                {
                    fn getTotalAmounts(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<PositionLensCalls> {
                        <getTotalAmountsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(PositionLensCalls::getTotalAmounts)
                    }
                    getTotalAmounts
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getFeesOwed(inner) => {
                    <getFeesOwedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getTotalAmounts(inner) => {
                    <getTotalAmountsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getFeesOwed(inner) => {
                    <getFeesOwedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getTotalAmounts(inner) => {
                    <getTotalAmountsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`PositionLens`](self) contract instance.

See the [wrapper's documentation](`PositionLensInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> PositionLensInstance<T, P, N> {
        PositionLensInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<PositionLensInstance<T, P, N>>,
    > {
        PositionLensInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        PositionLensInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`PositionLens`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`PositionLens`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct PositionLensInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for PositionLensInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("PositionLensInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionLensInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`PositionLens`](self) contract instance.

See the [wrapper's documentation](`PositionLensInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<PositionLensInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> PositionLensInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> PositionLensInstance<T, P, N> {
            PositionLensInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionLensInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getFeesOwed`] function.
        pub fn getFeesOwed(
            &self,
            dex: <DEX as alloy::sol_types::SolType>::RustType,
            pool: <V3PoolCallee as alloy::sol_types::SolType>::RustType,
            owner: alloy::sol_types::private::Address,
            tickLower: alloy::sol_types::private::primitives::aliases::I24,
            tickUpper: alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::SolCallBuilder<T, &P, getFeesOwedCall, N> {
            self.call_builder(
                &getFeesOwedCall {
                    dex,
                    pool,
                    owner,
                    tickLower,
                    tickUpper,
                },
            )
        }
        ///Creates a new call builder for the [`getTotalAmounts`] function.
        pub fn getTotalAmounts(
            &self,
            dex: <DEX as alloy::sol_types::SolType>::RustType,
            pool: <V3PoolCallee as alloy::sol_types::SolType>::RustType,
            owner: alloy::sol_types::private::Address,
            tickLower: alloy::sol_types::private::primitives::aliases::I24,
            tickUpper: alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::SolCallBuilder<T, &P, getTotalAmountsCall, N> {
            self.call_builder(
                &getTotalAmountsCall {
                    dex,
                    pool,
                    owner,
                    tickLower,
                    tickUpper,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > PositionLensInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
