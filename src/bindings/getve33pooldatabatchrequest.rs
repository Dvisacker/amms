/**

Generated by the following Solidity interface...
```solidity
interface GetVe33PoolDataBatchRequest {
    constructor(address[] pools);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetVe33PoolDataBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50604051610d2e380380610d2e8339818101604052810190610031919061097c565b5f815167ffffffffffffffff81111561004d5761004c6107e6565b5b60405190808252806020026020018201604052801561008657816020015b610073610757565b81526020019060019003908161006b5790505b5090505f5b82518110156106f8575f8382815181106100a8576100a76109c3565b5b602002602001015190506100c18161072660201b60201c565b156100cc57506106ed565b6100d4610757565b8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011d573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061014191906109f0565b815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e491906109f0565b816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061022d815f015161072660201b60201c565b156102395750506106ed565b61024c816040015161072660201b60201c565b156102585750506106ed565b5f80825f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103079190610a6d565b5f604051808303815f8787f1925050503d805f8114610341576040519150601f19603f3d011682016040523d82523d5f602084013e610346565b606091505b509150915081156103b5575f60208251036103a5578180602001905181019061036f9190610ab6565b90505f81148061037f575060ff81115b1561038e5750505050506106ed565b80846020019060ff16908160ff16815250506103af565b50505050506106ed565b506103be565b505050506106ed565b5f80846040015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046e9190610a6d565b5f604051808303815f8787f1925050503d805f81146104a8576040519150601f19603f3d011682016040523d82523d5f602084013e6104ad565b606091505b50915091508115610520575f602082510361050e57818060200190518101906104d69190610ab6565b90505f8114806104e6575060ff81115b156104f757505050505050506106ed565b80866060019060ff16908160ff168152505061051a565b505050505050506106ed565b5061052b565b5050505050506106ed565b8573ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa92505050801561059357506040513d601f19601f820116820180604052508101906105909190610ae1565b60015b6105b0575f8560800181815250505f8560a0018181525050610634565b6dffffffffffffffffffffffffffff80168311806105dd57506dffffffffffffffffffffffffffff801682115b156105fb575f8860800181815250505f8860a0018181525050610630565b826dffffffffffffffffffffffffffff16886080018181525050816dffffffffffffffffffffffffffff168860a00181815250505b5050505b8573ffffffffffffffffffffffffffffffffffffffff166322be3de16040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561069c57506040513d601f19601f820116820180604052508101906106999190610b66565b60015b6106b5575f8560c00190151590811515815250506106c7565b808660c0019015159081151581525050505b848888815181106106db576106da6109c3565b5b60200260200101819052505050505050505b80600101905061008b565b505f8160405160200161070b9190610d0d565b60405160208183030381529060405290506020810180590381f35b5f808273ffffffffffffffffffffffffffffffffffffffff163b0361074e5760019050610752565b5f90505b919050565b6040518060e001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f81526020015f81526020015f151581525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61081c826107d6565b810181811067ffffffffffffffff8211171561083b5761083a6107e6565b5b80604052505050565b5f61084d6107c1565b90506108598282610813565b919050565b5f67ffffffffffffffff821115610878576108776107e6565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108b68261088d565b9050919050565b6108c6816108ac565b81146108d0575f80fd5b50565b5f815190506108e1816108bd565b92915050565b5f6108f96108f48461085e565b610844565b9050808382526020820190506020840283018581111561091c5761091b610889565b5b835b81811015610945578061093188826108d3565b84526020840193505060208101905061091e565b5050509392505050565b5f82601f830112610963576109626107d2565b5b81516109738482602086016108e7565b91505092915050565b5f60208284031215610991576109906107ca565b5b5f82015167ffffffffffffffff8111156109ae576109ad6107ce565b5b6109ba8482850161094f565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215610a0557610a046107ca565b5b5f610a12848285016108d3565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610a4782610a1b565b610a518185610a25565b9350610a61818560208601610a2f565b80840191505092915050565b5f610a788284610a3d565b915081905092915050565b5f819050919050565b610a9581610a83565b8114610a9f575f80fd5b50565b5f81519050610ab081610a8c565b92915050565b5f60208284031215610acb57610aca6107ca565b5b5f610ad884828501610aa2565b91505092915050565b5f805f60608486031215610af857610af76107ca565b5b5f610b0586828701610aa2565b9350506020610b1686828701610aa2565b9250506040610b2786828701610aa2565b9150509250925092565b5f8115159050919050565b610b4581610b31565b8114610b4f575f80fd5b50565b5f81519050610b6081610b3c565b92915050565b5f60208284031215610b7b57610b7a6107ca565b5b5f610b8884828501610b52565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610bc3816108ac565b82525050565b5f60ff82169050919050565b610bde81610bc9565b82525050565b610bed81610a83565b82525050565b610bfc81610b31565b82525050565b60e082015f820151610c165f850182610bba565b506020820151610c296020850182610bd5565b506040820151610c3c6040850182610bba565b506060820151610c4f6060850182610bd5565b506080820151610c626080850182610be4565b5060a0820151610c7560a0850182610be4565b5060c0820151610c8860c0850182610bf3565b50505050565b5f610c998383610c02565b60e08301905092915050565b5f602082019050919050565b5f610cbb82610b91565b610cc58185610b9b565b9350610cd083610bab565b805f5b83811015610d00578151610ce78882610c8e565b9750610cf283610ca5565b925050600181019050610cd3565b5085935050505092915050565b5f6020820190508181035f830152610d258184610cb1565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\r.8\x03\x80a\r.\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\t|V[_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\x07\xE6V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x86W\x81` \x01[a\0sa\x07WV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0kW\x90P[P\x90P_[\x82Q\x81\x10\x15a\x06\xF8W_\x83\x82\x81Q\x81\x10a\0\xA8Wa\0\xA7a\t\xC3V[[` \x02` \x01\x01Q\x90Pa\0\xC1\x81a\x07&` \x1B` \x1CV[\x15a\0\xCCWPa\x06\xEDV[a\0\xD4a\x07WV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01A\x91\x90a\t\xF0V[\x81_\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xE4\x91\x90a\t\xF0V[\x81`@\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x02-\x81_\x01Qa\x07&` \x1B` \x1CV[\x15a\x029WPPa\x06\xEDV[a\x02L\x81`@\x01Qa\x07&` \x1B` \x1CV[\x15a\x02XWPPa\x06\xEDV[_\x80\x82_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x03\x07\x91\x90a\nmV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x03AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03FV[``\x91P[P\x91P\x91P\x81\x15a\x03\xB5W_` \x82Q\x03a\x03\xA5W\x81\x80` \x01\x90Q\x81\x01\x90a\x03o\x91\x90a\n\xB6V[\x90P_\x81\x14\x80a\x03\x7FWP`\xFF\x81\x11[\x15a\x03\x8EWPPPPPa\x06\xEDV[\x80\x84` \x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x03\xAFV[PPPPPa\x06\xEDV[Pa\x03\xBEV[PPPPa\x06\xEDV[_\x80\x84`@\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x04n\x91\x90a\nmV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x04\xA8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\xADV[``\x91P[P\x91P\x91P\x81\x15a\x05 W_` \x82Q\x03a\x05\x0EW\x81\x80` \x01\x90Q\x81\x01\x90a\x04\xD6\x91\x90a\n\xB6V[\x90P_\x81\x14\x80a\x04\xE6WP`\xFF\x81\x11[\x15a\x04\xF7WPPPPPPPa\x06\xEDV[\x80\x86``\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x05\x1AV[PPPPPPPa\x06\xEDV[Pa\x05+V[PPPPPPa\x06\xEDV[\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t\x02\xF1\xAC`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01```@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x05\x93WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x90\x91\x90a\n\xE1V[`\x01[a\x05\xB0W_\x85`\x80\x01\x81\x81RPP_\x85`\xA0\x01\x81\x81RPPa\x064V[m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x83\x11\x80a\x05\xDDWPm\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x82\x11[\x15a\x05\xFBW_\x88`\x80\x01\x81\x81RPP_\x88`\xA0\x01\x81\x81RPPa\x060V[\x82m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x88`\x80\x01\x81\x81RPP\x81m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x88`\xA0\x01\x81\x81RPP[PPP[\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\"\xBE=\xE1`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x06\x9CWP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\x99\x91\x90a\x0BfV[`\x01[a\x06\xB5W_\x85`\xC0\x01\x90\x15\x15\x90\x81\x15\x15\x81RPPa\x06\xC7V[\x80\x86`\xC0\x01\x90\x15\x15\x90\x81\x15\x15\x81RPPP[\x84\x88\x88\x81Q\x81\x10a\x06\xDBWa\x06\xDAa\t\xC3V[[` \x02` \x01\x01\x81\x90RPPPPPPP[\x80`\x01\x01\x90Pa\0\x8BV[P_\x81`@Q` \x01a\x07\x0B\x91\x90a\r\rV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a\x07NW`\x01\x90Pa\x07RV[_\x90P[\x91\x90PV[`@Q\x80`\xE0\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x15\x15\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x08\x1C\x82a\x07\xD6V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x08;Wa\x08:a\x07\xE6V[[\x80`@RPPPV[_a\x08Ma\x07\xC1V[\x90Pa\x08Y\x82\x82a\x08\x13V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x08xWa\x08wa\x07\xE6V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x08\xB6\x82a\x08\x8DV[\x90P\x91\x90PV[a\x08\xC6\x81a\x08\xACV[\x81\x14a\x08\xD0W_\x80\xFD[PV[_\x81Q\x90Pa\x08\xE1\x81a\x08\xBDV[\x92\x91PPV[_a\x08\xF9a\x08\xF4\x84a\x08^V[a\x08DV[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\t\x1CWa\t\x1Ba\x08\x89V[[\x83[\x81\x81\x10\x15a\tEW\x80a\t1\x88\x82a\x08\xD3V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\t\x1EV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\tcWa\tba\x07\xD2V[[\x81Qa\ts\x84\x82` \x86\x01a\x08\xE7V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\t\x91Wa\t\x90a\x07\xCAV[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\t\xAEWa\t\xADa\x07\xCEV[[a\t\xBA\x84\x82\x85\x01a\tOV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\n\x05Wa\n\x04a\x07\xCAV[[_a\n\x12\x84\x82\x85\x01a\x08\xD3V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\nG\x82a\n\x1BV[a\nQ\x81\x85a\n%V[\x93Pa\na\x81\x85` \x86\x01a\n/V[\x80\x84\x01\x91PP\x92\x91PPV[_a\nx\x82\x84a\n=V[\x91P\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\n\x95\x81a\n\x83V[\x81\x14a\n\x9FW_\x80\xFD[PV[_\x81Q\x90Pa\n\xB0\x81a\n\x8CV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\n\xCBWa\n\xCAa\x07\xCAV[[_a\n\xD8\x84\x82\x85\x01a\n\xA2V[\x91PP\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\n\xF8Wa\n\xF7a\x07\xCAV[[_a\x0B\x05\x86\x82\x87\x01a\n\xA2V[\x93PP` a\x0B\x16\x86\x82\x87\x01a\n\xA2V[\x92PP`@a\x0B'\x86\x82\x87\x01a\n\xA2V[\x91PP\x92P\x92P\x92V[_\x81\x15\x15\x90P\x91\x90PV[a\x0BE\x81a\x0B1V[\x81\x14a\x0BOW_\x80\xFD[PV[_\x81Q\x90Pa\x0B`\x81a\x0B<V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0B{Wa\x0Bza\x07\xCAV[[_a\x0B\x88\x84\x82\x85\x01a\x0BRV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x0B\xC3\x81a\x08\xACV[\x82RPPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x0B\xDE\x81a\x0B\xC9V[\x82RPPV[a\x0B\xED\x81a\n\x83V[\x82RPPV[a\x0B\xFC\x81a\x0B1V[\x82RPPV[`\xE0\x82\x01_\x82\x01Qa\x0C\x16_\x85\x01\x82a\x0B\xBAV[P` \x82\x01Qa\x0C)` \x85\x01\x82a\x0B\xD5V[P`@\x82\x01Qa\x0C<`@\x85\x01\x82a\x0B\xBAV[P``\x82\x01Qa\x0CO``\x85\x01\x82a\x0B\xD5V[P`\x80\x82\x01Qa\x0Cb`\x80\x85\x01\x82a\x0B\xE4V[P`\xA0\x82\x01Qa\x0Cu`\xA0\x85\x01\x82a\x0B\xE4V[P`\xC0\x82\x01Qa\x0C\x88`\xC0\x85\x01\x82a\x0B\xF3V[PPPPV[_a\x0C\x99\x83\x83a\x0C\x02V[`\xE0\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x0C\xBB\x82a\x0B\x91V[a\x0C\xC5\x81\x85a\x0B\x9BV[\x93Pa\x0C\xD0\x83a\x0B\xABV[\x80_[\x83\x81\x10\x15a\r\0W\x81Qa\x0C\xE7\x88\x82a\x0C\x8EV[\x97Pa\x0C\xF2\x83a\x0C\xA5V[\x92PP`\x01\x81\x01\x90Pa\x0C\xD3V[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\r%\x81\x84a\x0C\xB1V[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea264697066735822122043003c3232bbc0bd675802a1d4b6b9b322d5049ffdc77ffd4fc2d2c07a105cf364736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 C\0<22\xBB\xC0\xBDgX\x02\xA1\xD4\xB6\xB9\xB3\"\xD5\x04\x9F\xFD\xC7\x7F\xFDO\xC2\xD2\xC0z\x10\\\xF3dsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.pools,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pools: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetVe33PoolDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetVe33PoolDataBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetVe33PoolDataBatchRequestInstance<T, P, N> {
        GetVe33PoolDataBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetVe33PoolDataBatchRequestInstance<T, P, N>>,
    > {
        GetVe33PoolDataBatchRequestInstance::<T, P, N>::deploy(provider, pools)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetVe33PoolDataBatchRequestInstance::<T, P, N>::deploy_builder(provider, pools)
    }
    /**A [`GetVe33PoolDataBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetVe33PoolDataBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetVe33PoolDataBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GetVe33PoolDataBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetVe33PoolDataBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetVe33PoolDataBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetVe33PoolDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetVe33PoolDataBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetVe33PoolDataBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, pools);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { pools },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GetVe33PoolDataBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> GetVe33PoolDataBatchRequestInstance<T, P, N> {
            GetVe33PoolDataBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetVe33PoolDataBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetVe33PoolDataBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
