/**

Generated by the following Solidity interface...
```solidity
interface StorageBatchRequest {
    function getStorage(bytes32[] memory slots) external payable returns (bytes32[] memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "getStorage",
    "inputs": [
      {
        "name": "slots",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes32[]",
        "internalType": "bytes32[]"
      }
    ],
    "stateMutability": "payable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod StorageBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f80fd5b506102548061001c5f395ff3fe60806040526004361061001d575f3560e01c8063b6fa2f6214610021575b5f80fd5b61003b600480360381019061003691906100f3565b610051565b60405161004891906101fe565b60405180910390f35b606060205f52816020528160051b6040016040845b600115610086578035548252602082019150602081019050828210610066575b825ff35b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126100b3576100b2610092565b5b8235905067ffffffffffffffff8111156100d0576100cf610096565b5b6020830191508360208202830111156100ec576100eb61009a565b5b9250929050565b5f80602083850312156101095761010861008a565b5b5f83013567ffffffffffffffff8111156101265761012561008e565b5b6101328582860161009e565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f819050919050565b61017981610167565b82525050565b5f61018a8383610170565b60208301905092915050565b5f602082019050919050565b5f6101ac8261013e565b6101b68185610148565b93506101c183610158565b805f5b838110156101f15781516101d8888261017f565b97506101e383610196565b9250506001810190506101c4565b5085935050505092915050565b5f6020820190508181035f83015261021681846101a2565b90509291505056fea2646970667358221220e717abe195355df82e36c51e5599f702ac1dfefea25104bd3713d5668365550064736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW_\x80\xFD[Pa\x02T\x80a\0\x1C_9_\xF3\xFE`\x80`@R`\x046\x10a\0\x1DW_5`\xE0\x1C\x80c\xB6\xFA/b\x14a\0!W[_\x80\xFD[a\0;`\x04\x806\x03\x81\x01\x90a\x006\x91\x90a\0\xF3V[a\0QV[`@Qa\0H\x91\x90a\x01\xFEV[`@Q\x80\x91\x03\x90\xF3[``` _R\x81` R\x81`\x05\x1B`@\x01`@\x84[`\x01\x15a\0\x86W\x805T\x82R` \x82\x01\x91P` \x81\x01\x90P\x82\x82\x10a\0fW[\x82_\xF3[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\0\xB3Wa\0\xB2a\0\x92V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xD0Wa\0\xCFa\0\x96V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\0\xECWa\0\xEBa\0\x9AV[[\x92P\x92\x90PV[_\x80` \x83\x85\x03\x12\x15a\x01\tWa\x01\x08a\0\x8AV[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01&Wa\x01%a\0\x8EV[[a\x012\x85\x82\x86\x01a\0\x9EV[\x92P\x92PP\x92P\x92\x90PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x01y\x81a\x01gV[\x82RPPV[_a\x01\x8A\x83\x83a\x01pV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x01\xAC\x82a\x01>V[a\x01\xB6\x81\x85a\x01HV[\x93Pa\x01\xC1\x83a\x01XV[\x80_[\x83\x81\x10\x15a\x01\xF1W\x81Qa\x01\xD8\x88\x82a\x01\x7FV[\x97Pa\x01\xE3\x83a\x01\x96V[\x92PP`\x01\x81\x01\x90Pa\x01\xC4V[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x02\x16\x81\x84a\x01\xA2V[\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xE7\x17\xAB\xE1\x955]\xF8.6\xC5\x1EU\x99\xF7\x02\xAC\x1D\xFE\xFE\xA2Q\x04\xBD7\x13\xD5f\x83eU\0dsolcC\0\x08\x1A\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061001d575f3560e01c8063b6fa2f6214610021575b5f80fd5b61003b600480360381019061003691906100f3565b610051565b60405161004891906101fe565b60405180910390f35b606060205f52816020528160051b6040016040845b600115610086578035548252602082019150602081019050828210610066575b825ff35b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f8401126100b3576100b2610092565b5b8235905067ffffffffffffffff8111156100d0576100cf610096565b5b6020830191508360208202830111156100ec576100eb61009a565b5b9250929050565b5f80602083850312156101095761010861008a565b5b5f83013567ffffffffffffffff8111156101265761012561008e565b5b6101328582860161009e565b92509250509250929050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f819050919050565b61017981610167565b82525050565b5f61018a8383610170565b60208301905092915050565b5f602082019050919050565b5f6101ac8261013e565b6101b68185610148565b93506101c183610158565b805f5b838110156101f15781516101d8888261017f565b97506101e383610196565b9250506001810190506101c4565b5085935050505092915050565b5f6020820190508181035f83015261021681846101a2565b90509291505056fea2646970667358221220e717abe195355df82e36c51e5599f702ac1dfefea25104bd3713d5668365550064736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\x1DW_5`\xE0\x1C\x80c\xB6\xFA/b\x14a\0!W[_\x80\xFD[a\0;`\x04\x806\x03\x81\x01\x90a\x006\x91\x90a\0\xF3V[a\0QV[`@Qa\0H\x91\x90a\x01\xFEV[`@Q\x80\x91\x03\x90\xF3[``` _R\x81` R\x81`\x05\x1B`@\x01`@\x84[`\x01\x15a\0\x86W\x805T\x82R` \x82\x01\x91P` \x81\x01\x90P\x82\x82\x10a\0fW[\x82_\xF3[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\xFD[_\x80\x83`\x1F\x84\x01\x12a\0\xB3Wa\0\xB2a\0\x92V[[\x825\x90Pg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xD0Wa\0\xCFa\0\x96V[[` \x83\x01\x91P\x83` \x82\x02\x83\x01\x11\x15a\0\xECWa\0\xEBa\0\x9AV[[\x92P\x92\x90PV[_\x80` \x83\x85\x03\x12\x15a\x01\tWa\x01\x08a\0\x8AV[[_\x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01&Wa\x01%a\0\x8EV[[a\x012\x85\x82\x86\x01a\0\x9EV[\x92P\x92PP\x92P\x92\x90PV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[a\x01y\x81a\x01gV[\x82RPPV[_a\x01\x8A\x83\x83a\x01pV[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x01\xAC\x82a\x01>V[a\x01\xB6\x81\x85a\x01HV[\x93Pa\x01\xC1\x83a\x01XV[\x80_[\x83\x81\x10\x15a\x01\xF1W\x81Qa\x01\xD8\x88\x82a\x01\x7FV[\x97Pa\x01\xE3\x83a\x01\x96V[\x92PP`\x01\x81\x01\x90Pa\x01\xC4V[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x02\x16\x81\x84a\x01\xA2V[\x90P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xE7\x17\xAB\xE1\x955]\xF8.6\xC5\x1EU\x99\xF7\x02\xAC\x1D\xFE\xFE\xA2Q\x04\xBD7\x13\xD5f\x83eU\0dsolcC\0\x08\x1A\x003",
    );
    /**Function with signature `getStorage(bytes32[])` and selector `0xb6fa2f62`.
```solidity
function getStorage(bytes32[] memory slots) external payable returns (bytes32[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getStorageCall {
        #[allow(missing_docs)]
        pub slots: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    ///Container type for the return parameters of the [`getStorage(bytes32[])`](getStorageCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getStorageReturn {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::FixedBytes<32>,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getStorageCall> for UnderlyingRustTuple<'_> {
                fn from(value: getStorageCall) -> Self {
                    (value.slots,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getStorageCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { slots: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::FixedBytes<32>,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getStorageReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getStorageReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getStorageReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getStorageCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getStorageReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<
                    alloy::sol_types::sol_data::FixedBytes<32>,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getStorage(bytes32[])";
            const SELECTOR: [u8; 4] = [182u8, 250u8, 47u8, 98u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::FixedBytes<32>,
                    > as alloy_sol_types::SolType>::tokenize(&self.slots),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`StorageBatchRequest`](self) function calls.
    pub enum StorageBatchRequestCalls {
        #[allow(missing_docs)]
        getStorage(getStorageCall),
    }
    #[automatically_derived]
    impl StorageBatchRequestCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[182u8, 250u8, 47u8, 98u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for StorageBatchRequestCalls {
        const NAME: &'static str = "StorageBatchRequestCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::getStorage(_) => {
                    <getStorageCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<StorageBatchRequestCalls>] = &[
                {
                    fn getStorage(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<StorageBatchRequestCalls> {
                        <getStorageCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(StorageBatchRequestCalls::getStorage)
                    }
                    getStorage
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::getStorage(inner) => {
                    <getStorageCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::getStorage(inner) => {
                    <getStorageCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`StorageBatchRequest`](self) contract instance.

See the [wrapper's documentation](`StorageBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> StorageBatchRequestInstance<T, P, N> {
        StorageBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<StorageBatchRequestInstance<T, P, N>>,
    > {
        StorageBatchRequestInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        StorageBatchRequestInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`StorageBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`StorageBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct StorageBatchRequestInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for StorageBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("StorageBatchRequestInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StorageBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`StorageBatchRequest`](self) contract instance.

See the [wrapper's documentation](`StorageBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<StorageBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> StorageBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> StorageBatchRequestInstance<T, P, N> {
            StorageBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StorageBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`getStorage`] function.
        pub fn getStorage(
            &self,
            slots: alloy::sol_types::private::Vec<
                alloy::sol_types::private::FixedBytes<32>,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, getStorageCall, N> {
            self.call_builder(&getStorageCall { slots })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > StorageBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
