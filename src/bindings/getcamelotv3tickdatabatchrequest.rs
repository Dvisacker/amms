/**

Generated by the following Solidity interface...
```solidity
interface GetCamelotV3TickDataBatchRequest {
    constructor(address pool, bool zeroForOne, int24 currentTick, uint16 numTicks, int24 tickSpacing);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pool",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "zeroForOne",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "currentTick",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "numTicks",
        "type": "uint16",
        "internalType": "uint16"
      },
      {
        "name": "tickSpacing",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GetCamelotV3TickDataBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b50604051610f2c380380610f2c83398181016040528101906100319190610948565b5f8261ffff1667ffffffffffffffff8111156100505761004f6109bf565b5b60405190808252806020026020018201604052801561008957816020015b610076610822565b81526020019060019003908161006e5790505b5090505f5b8361ffff168110156103a4575f806100ae8988878b6103d360201b60201c565b915091505f8973ffffffffffffffffffffffffffffffffffffffff1663f30dba93846040518263ffffffff1660e01b81526004016100ec91906109fb565b61010060405180830381865afa158015610108573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061012c9190610b5b565b5050505050509150507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860020b8360020b121561020f577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761892508185858151811061019a57610199610c0c565b5b60200260200101515f019015159081151581525050828585815181106101c3576101c2610c0c565b5b60200260200101516020019060020b908160020b81525050808585815181106101ef576101ee610c0c565b5b602002602001015160400190600f0b9081600f0b815250505050506103a4565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761861023990610c66565b60020b8360020b13156102f2577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761892508185858151811061027d5761027c610c0c565b5b60200260200101515f019015159081151581525050828585815181106102a6576102a5610c0c565b5b60200260200101516020019060020b908160020b81525050808585815181106102d2576102d1610c0c565b5b602002602001015160400190600f0b9081600f0b815250505050506103a4565b8185858151811061030657610305610c0c565b5b60200260200101515f0190151590811515815250508285858151811061032f5761032e610c0c565b5b60200260200101516020019060020b908160020b815250508085858151811061035b5761035a610c0c565b5b602002602001015160400190600f0b9081600f0b81525050838061037e90610cac565b9450508861038c578261039a565b6001836103999190610cf3565b5b975050505061008e565b5f82436040516020016103b8929190610e71565b60405160208183030381529060405290506020810180590381f35b5f805f8460020b8660020b816103ec576103eb610e9f565b5b0590505f8660020b12801561041a57505f8560020b8760020b8161041357610412610e9f565b5b0760020b14155b15610429578080600190039150505b8315610514575f806104408361060360201b60201c565b915091505f8160ff166001901b60018360ff166001901b030190505f818b73ffffffffffffffffffffffffffffffffffffffff1663c677e3e0866040518263ffffffff1660e01b81526004016104969190610ee7565b602060405180830381865afa1580156104b1573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104d59190610f00565b1690505f8114159550856104f057888360ff16860302610509565b886105008261062c60201b60201c565b840360ff168603025b9650505050506105f9565b5f806105286001840161060360201b60201c565b915091505f60018260ff166001901b031990505f818b73ffffffffffffffffffffffffffffffffffffffff1663c677e3e0866040518263ffffffff1660e01b81526004016105769190610ee7565b602060405180830381865afa158015610591573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b59190610f00565b1690505f8114159550856105d657888360ff0360ff166001870101026105f2565b88836105e78361070560201b60201c565b0360ff166001870101025b9650505050505b5094509492505050565b5f8060088360020b901d91506101008360020b8161062457610623610e9f565b5b079050915091565b5f808211610638575f80fd5b700100000000000000000000000000000000821061065e57608082901c91506080810190505b68010000000000000000821061067c57604082901c91506040810190505b640100000000821061069657602082901c91506020810190505b6201000082106106ae57601082901c91506010810190505b61010082106106c557600882901c91506008810190505b601082106106db57600482901c91506004810190505b600482106106f157600282901c91506002810190505b60028210610700576001810190505b919050565b5f808211610711575f80fd5b60ff90505f6fffffffffffffffffffffffffffffffff80168316111561073c57608081039050610744565b608082901c91505b5f67ffffffffffffffff8016831611156107635760408103905061076b565b604082901c91505b5f63ffffffff8016831611156107865760208103905061078e565b602082901c91505b5f61ffff8016831611156107a7576010810390506107af565b601082901c91505b5f60ff8016831611156107c7576008810390506107cf565b600882901c91505b5f600f831611156107e5576004810390506107ed565b600482901c91505b5f6003831611156108035760028103905061080b565b600282901c91505b5f60018316111561081d576001810390505b919050565b60405180606001604052805f151581526020015f60020b81526020015f600f0b81525090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6108758261084c565b9050919050565b6108858161086b565b811461088f575f80fd5b50565b5f815190506108a08161087c565b92915050565b5f8115159050919050565b6108ba816108a6565b81146108c4575f80fd5b50565b5f815190506108d5816108b1565b92915050565b5f8160020b9050919050565b6108f0816108db565b81146108fa575f80fd5b50565b5f8151905061090b816108e7565b92915050565b5f61ffff82169050919050565b61092781610911565b8114610931575f80fd5b50565b5f815190506109428161091e565b92915050565b5f805f805f60a0868803121561096157610960610848565b5b5f61096e88828901610892565b955050602061097f888289016108c7565b9450506040610990888289016108fd565b93505060606109a188828901610934565b92505060806109b2888289016108fd565b9150509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6109f5816108db565b82525050565b5f602082019050610a0e5f8301846109ec565b92915050565b5f6fffffffffffffffffffffffffffffffff82169050919050565b610a3881610a14565b8114610a42575f80fd5b50565b5f81519050610a5381610a2f565b92915050565b5f81600f0b9050919050565b610a6e81610a59565b8114610a78575f80fd5b50565b5f81519050610a8981610a65565b92915050565b5f819050919050565b610aa181610a8f565b8114610aab575f80fd5b50565b5f81519050610abc81610a98565b92915050565b5f8160060b9050919050565b610ad781610ac2565b8114610ae1575f80fd5b50565b5f81519050610af281610ace565b92915050565b610b018161084c565b8114610b0b575f80fd5b50565b5f81519050610b1c81610af8565b92915050565b5f63ffffffff82169050919050565b610b3a81610b22565b8114610b44575f80fd5b50565b5f81519050610b5581610b31565b92915050565b5f805f805f805f80610100898b031215610b7857610b77610848565b5b5f610b858b828c01610a45565b9850506020610b968b828c01610a7b565b9750506040610ba78b828c01610aae565b9650506060610bb88b828c01610aae565b9550506080610bc98b828c01610ae4565b94505060a0610bda8b828c01610b0e565b93505060c0610beb8b828c01610b47565b92505060e0610bfc8b828c016108c7565b9150509295985092959890939650565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610c70826108db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008203610ca257610ca1610c39565b5b815f039050919050565b5f610cb682610a8f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ce857610ce7610c39565b5b600182019050919050565b5f610cfd826108db565b9150610d08836108db565b92508282039050627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082121715610d4757610d46610c39565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610d7f816108a6565b82525050565b610d8e816108db565b82525050565b610d9d81610a59565b82525050565b606082015f820151610db75f850182610d76565b506020820151610dca6020850182610d85565b506040820151610ddd6040850182610d94565b50505050565b5f610dee8383610da3565b60608301905092915050565b5f602082019050919050565b5f610e1082610d4d565b610e1a8185610d57565b9350610e2583610d67565b805f5b83811015610e55578151610e3c8882610de3565b9750610e4783610dfa565b925050600181019050610e28565b5085935050505092915050565b610e6b81610a8f565b82525050565b5f6040820190508181035f830152610e898185610e06565b9050610e986020830184610e62565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f8160010b9050919050565b610ee181610ecc565b82525050565b5f602082019050610efa5f830184610ed8565b92915050565b5f60208284031215610f1557610f14610848565b5b5f610f2284828501610aae565b9150509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x0F,8\x03\x80a\x0F,\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\tHV[_\x82a\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0PWa\0Oa\t\xBFV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x89W\x81` \x01[a\0va\x08\"V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0nW\x90P[P\x90P_[\x83a\xFF\xFF\x16\x81\x10\x15a\x03\xA4W_\x80a\0\xAE\x89\x88\x87\x8Ba\x03\xD3` \x1B` \x1CV[\x91P\x91P_\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x84`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xEC\x91\x90a\t\xFBV[a\x01\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x08W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01,\x91\x90a\x0B[V[PPPPPP\x91PP\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF2v\x18`\x02\x0B\x83`\x02\x0B\x12\x15a\x02\x0FW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF2v\x18\x92P\x81\x85\x85\x81Q\x81\x10a\x01\x9AWa\x01\x99a\x0C\x0CV[[` \x02` \x01\x01Q_\x01\x90\x15\x15\x90\x81\x15\x15\x81RPP\x82\x85\x85\x81Q\x81\x10a\x01\xC3Wa\x01\xC2a\x0C\x0CV[[` \x02` \x01\x01Q` \x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x80\x85\x85\x81Q\x81\x10a\x01\xEFWa\x01\xEEa\x0C\x0CV[[` \x02` \x01\x01Q`@\x01\x90`\x0F\x0B\x90\x81`\x0F\x0B\x81RPPPPPa\x03\xA4V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF2v\x18a\x029\x90a\x0CfV[`\x02\x0B\x83`\x02\x0B\x13\x15a\x02\xF2W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF2v\x18\x92P\x81\x85\x85\x81Q\x81\x10a\x02}Wa\x02|a\x0C\x0CV[[` \x02` \x01\x01Q_\x01\x90\x15\x15\x90\x81\x15\x15\x81RPP\x82\x85\x85\x81Q\x81\x10a\x02\xA6Wa\x02\xA5a\x0C\x0CV[[` \x02` \x01\x01Q` \x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x80\x85\x85\x81Q\x81\x10a\x02\xD2Wa\x02\xD1a\x0C\x0CV[[` \x02` \x01\x01Q`@\x01\x90`\x0F\x0B\x90\x81`\x0F\x0B\x81RPPPPPa\x03\xA4V[\x81\x85\x85\x81Q\x81\x10a\x03\x06Wa\x03\x05a\x0C\x0CV[[` \x02` \x01\x01Q_\x01\x90\x15\x15\x90\x81\x15\x15\x81RPP\x82\x85\x85\x81Q\x81\x10a\x03/Wa\x03.a\x0C\x0CV[[` \x02` \x01\x01Q` \x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x80\x85\x85\x81Q\x81\x10a\x03[Wa\x03Za\x0C\x0CV[[` \x02` \x01\x01Q`@\x01\x90`\x0F\x0B\x90\x81`\x0F\x0B\x81RPP\x83\x80a\x03~\x90a\x0C\xACV[\x94PP\x88a\x03\x8CW\x82a\x03\x9AV[`\x01\x83a\x03\x99\x91\x90a\x0C\xF3V[[\x97PPPPa\0\x8EV[_\x82C`@Q` \x01a\x03\xB8\x92\x91\x90a\x0EqV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80_\x84`\x02\x0B\x86`\x02\x0B\x81a\x03\xECWa\x03\xEBa\x0E\x9FV[[\x05\x90P_\x86`\x02\x0B\x12\x80\x15a\x04\x1AWP_\x85`\x02\x0B\x87`\x02\x0B\x81a\x04\x13Wa\x04\x12a\x0E\x9FV[[\x07`\x02\x0B\x14\x15[\x15a\x04)W\x80\x80`\x01\x90\x03\x91PP[\x83\x15a\x05\x14W_\x80a\x04@\x83a\x06\x03` \x1B` \x1CV[\x91P\x91P_\x81`\xFF\x16`\x01\x90\x1B`\x01\x83`\xFF\x16`\x01\x90\x1B\x03\x01\x90P_\x81\x8Bs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6w\xE3\xE0\x86`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\x96\x91\x90a\x0E\xE7V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xB1W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\xD5\x91\x90a\x0F\0V[\x16\x90P_\x81\x14\x15\x95P\x85a\x04\xF0W\x88\x83`\xFF\x16\x86\x03\x02a\x05\tV[\x88a\x05\0\x82a\x06,` \x1B` \x1CV[\x84\x03`\xFF\x16\x86\x03\x02[\x96PPPPPa\x05\xF9V[_\x80a\x05(`\x01\x84\x01a\x06\x03` \x1B` \x1CV[\x91P\x91P_`\x01\x82`\xFF\x16`\x01\x90\x1B\x03\x19\x90P_\x81\x8Bs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6w\xE3\xE0\x86`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05v\x91\x90a\x0E\xE7V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x91W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xB5\x91\x90a\x0F\0V[\x16\x90P_\x81\x14\x15\x95P\x85a\x05\xD6W\x88\x83`\xFF\x03`\xFF\x16`\x01\x87\x01\x01\x02a\x05\xF2V[\x88\x83a\x05\xE7\x83a\x07\x05` \x1B` \x1CV[\x03`\xFF\x16`\x01\x87\x01\x01\x02[\x96PPPPP[P\x94P\x94\x92PPPV[_\x80`\x08\x83`\x02\x0B\x90\x1D\x91Pa\x01\0\x83`\x02\x0B\x81a\x06$Wa\x06#a\x0E\x9FV[[\x07\x90P\x91P\x91V[_\x80\x82\x11a\x068W_\x80\xFD[p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x10a\x06^W`\x80\x82\x90\x1C\x91P`\x80\x81\x01\x90P[h\x01\0\0\0\0\0\0\0\0\x82\x10a\x06|W`@\x82\x90\x1C\x91P`@\x81\x01\x90P[d\x01\0\0\0\0\x82\x10a\x06\x96W` \x82\x90\x1C\x91P` \x81\x01\x90P[b\x01\0\0\x82\x10a\x06\xAEW`\x10\x82\x90\x1C\x91P`\x10\x81\x01\x90P[a\x01\0\x82\x10a\x06\xC5W`\x08\x82\x90\x1C\x91P`\x08\x81\x01\x90P[`\x10\x82\x10a\x06\xDBW`\x04\x82\x90\x1C\x91P`\x04\x81\x01\x90P[`\x04\x82\x10a\x06\xF1W`\x02\x82\x90\x1C\x91P`\x02\x81\x01\x90P[`\x02\x82\x10a\x07\0W`\x01\x81\x01\x90P[\x91\x90PV[_\x80\x82\x11a\x07\x11W_\x80\xFD[`\xFF\x90P_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x83\x16\x11\x15a\x07<W`\x80\x81\x03\x90Pa\x07DV[`\x80\x82\x90\x1C\x91P[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x83\x16\x11\x15a\x07cW`@\x81\x03\x90Pa\x07kV[`@\x82\x90\x1C\x91P[_c\xFF\xFF\xFF\xFF\x80\x16\x83\x16\x11\x15a\x07\x86W` \x81\x03\x90Pa\x07\x8EV[` \x82\x90\x1C\x91P[_a\xFF\xFF\x80\x16\x83\x16\x11\x15a\x07\xA7W`\x10\x81\x03\x90Pa\x07\xAFV[`\x10\x82\x90\x1C\x91P[_`\xFF\x80\x16\x83\x16\x11\x15a\x07\xC7W`\x08\x81\x03\x90Pa\x07\xCFV[`\x08\x82\x90\x1C\x91P[_`\x0F\x83\x16\x11\x15a\x07\xE5W`\x04\x81\x03\x90Pa\x07\xEDV[`\x04\x82\x90\x1C\x91P[_`\x03\x83\x16\x11\x15a\x08\x03W`\x02\x81\x03\x90Pa\x08\x0BV[`\x02\x82\x90\x1C\x91P[_`\x01\x83\x16\x11\x15a\x08\x1DW`\x01\x81\x03\x90P[\x91\x90PV[`@Q\x80``\x01`@R\x80_\x15\x15\x81R` \x01_`\x02\x0B\x81R` \x01_`\x0F\x0B\x81RP\x90V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x08u\x82a\x08LV[\x90P\x91\x90PV[a\x08\x85\x81a\x08kV[\x81\x14a\x08\x8FW_\x80\xFD[PV[_\x81Q\x90Pa\x08\xA0\x81a\x08|V[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\x08\xBA\x81a\x08\xA6V[\x81\x14a\x08\xC4W_\x80\xFD[PV[_\x81Q\x90Pa\x08\xD5\x81a\x08\xB1V[\x92\x91PPV[_\x81`\x02\x0B\x90P\x91\x90PV[a\x08\xF0\x81a\x08\xDBV[\x81\x14a\x08\xFAW_\x80\xFD[PV[_\x81Q\x90Pa\t\x0B\x81a\x08\xE7V[\x92\x91PPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[a\t'\x81a\t\x11V[\x81\x14a\t1W_\x80\xFD[PV[_\x81Q\x90Pa\tB\x81a\t\x1EV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\taWa\t`a\x08HV[[_a\tn\x88\x82\x89\x01a\x08\x92V[\x95PP` a\t\x7F\x88\x82\x89\x01a\x08\xC7V[\x94PP`@a\t\x90\x88\x82\x89\x01a\x08\xFDV[\x93PP``a\t\xA1\x88\x82\x89\x01a\t4V[\x92PP`\x80a\t\xB2\x88\x82\x89\x01a\x08\xFDV[\x91PP\x92\x95P\x92\x95\x90\x93PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\t\xF5\x81a\x08\xDBV[\x82RPPV[_` \x82\x01\x90Pa\n\x0E_\x83\x01\x84a\t\xECV[\x92\x91PPV[_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\n8\x81a\n\x14V[\x81\x14a\nBW_\x80\xFD[PV[_\x81Q\x90Pa\nS\x81a\n/V[\x92\x91PPV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\nn\x81a\nYV[\x81\x14a\nxW_\x80\xFD[PV[_\x81Q\x90Pa\n\x89\x81a\neV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\n\xA1\x81a\n\x8FV[\x81\x14a\n\xABW_\x80\xFD[PV[_\x81Q\x90Pa\n\xBC\x81a\n\x98V[\x92\x91PPV[_\x81`\x06\x0B\x90P\x91\x90PV[a\n\xD7\x81a\n\xC2V[\x81\x14a\n\xE1W_\x80\xFD[PV[_\x81Q\x90Pa\n\xF2\x81a\n\xCEV[\x92\x91PPV[a\x0B\x01\x81a\x08LV[\x81\x14a\x0B\x0BW_\x80\xFD[PV[_\x81Q\x90Pa\x0B\x1C\x81a\n\xF8V[\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0B:\x81a\x0B\"V[\x81\x14a\x0BDW_\x80\xFD[PV[_\x81Q\x90Pa\x0BU\x81a\x0B1V[\x92\x91PPV[_\x80_\x80_\x80_\x80a\x01\0\x89\x8B\x03\x12\x15a\x0BxWa\x0Bwa\x08HV[[_a\x0B\x85\x8B\x82\x8C\x01a\nEV[\x98PP` a\x0B\x96\x8B\x82\x8C\x01a\n{V[\x97PP`@a\x0B\xA7\x8B\x82\x8C\x01a\n\xAEV[\x96PP``a\x0B\xB8\x8B\x82\x8C\x01a\n\xAEV[\x95PP`\x80a\x0B\xC9\x8B\x82\x8C\x01a\n\xE4V[\x94PP`\xA0a\x0B\xDA\x8B\x82\x8C\x01a\x0B\x0EV[\x93PP`\xC0a\x0B\xEB\x8B\x82\x8C\x01a\x0BGV[\x92PP`\xE0a\x0B\xFC\x8B\x82\x8C\x01a\x08\xC7V[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x0Cp\x82a\x08\xDBV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x82\x03a\x0C\xA2Wa\x0C\xA1a\x0C9V[[\x81_\x03\x90P\x91\x90PV[_a\x0C\xB6\x82a\n\x8FV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\x0C\xE8Wa\x0C\xE7a\x0C9V[[`\x01\x82\x01\x90P\x91\x90PV[_a\x0C\xFD\x82a\x08\xDBV[\x91Pa\r\x08\x83a\x08\xDBV[\x92P\x82\x82\x03\x90Pb\x7F\xFF\xFF\x81\x13\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x82\x12\x17\x15a\rGWa\rFa\x0C9V[[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\r\x7F\x81a\x08\xA6V[\x82RPPV[a\r\x8E\x81a\x08\xDBV[\x82RPPV[a\r\x9D\x81a\nYV[\x82RPPV[``\x82\x01_\x82\x01Qa\r\xB7_\x85\x01\x82a\rvV[P` \x82\x01Qa\r\xCA` \x85\x01\x82a\r\x85V[P`@\x82\x01Qa\r\xDD`@\x85\x01\x82a\r\x94V[PPPPV[_a\r\xEE\x83\x83a\r\xA3V[``\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x0E\x10\x82a\rMV[a\x0E\x1A\x81\x85a\rWV[\x93Pa\x0E%\x83a\rgV[\x80_[\x83\x81\x10\x15a\x0EUW\x81Qa\x0E<\x88\x82a\r\xE3V[\x97Pa\x0EG\x83a\r\xFAV[\x92PP`\x01\x81\x01\x90Pa\x0E(V[P\x85\x93PPPP\x92\x91PPV[a\x0Ek\x81a\n\x8FV[\x82RPPV[_`@\x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0E\x89\x81\x85a\x0E\x06V[\x90Pa\x0E\x98` \x83\x01\x84a\x0EbV[\x93\x92PPPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x81`\x01\x0B\x90P\x91\x90PV[a\x0E\xE1\x81a\x0E\xCCV[\x82RPPV[_` \x82\x01\x90Pa\x0E\xFA_\x83\x01\x84a\x0E\xD8V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0F\x15Wa\x0F\x14a\x08HV[[_a\x0F\"\x84\x82\x85\x01a\n\xAEV[\x91PP\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea2646970667358221220e060e2794ca306731eec4e60077cd8aba9c3fc5f1ad380d7c7233a100fa09b5564736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 \xE0`\xE2yL\xA3\x06s\x1E\xECN`\x07|\xD8\xAB\xA9\xC3\xFC_\x1A\xD3\x80\xD7\xC7#:\x10\x0F\xA0\x9BUdsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address pool, bool zeroForOne, int24 currentTick, uint16 numTicks, int24 tickSpacing);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub pool: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub zeroForOne: bool,
        #[allow(missing_docs)]
        pub currentTick: alloy::sol_types::private::primitives::aliases::I24,
        #[allow(missing_docs)]
        pub numTicks: u16,
        #[allow(missing_docs)]
        pub tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<16>,
                alloy::sol_types::sol_data::Int<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::I24,
                u16,
                alloy::sol_types::private::primitives::aliases::I24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.pool,
                        value.zeroForOne,
                        value.currentTick,
                        value.numTicks,
                        value.tickSpacing,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pool: tuple.0,
                        zeroForOne: tuple.1,
                        currentTick: tuple.2,
                        numTicks: tuple.3,
                        tickSpacing: tuple.4,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<16>,
                alloy::sol_types::sol_data::Int<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.pool,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.zeroForOne,
                    ),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTick),
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.numTicks),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickSpacing),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetCamelotV3TickDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetCamelotV3TickDataBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetCamelotV3TickDataBatchRequestInstance<T, P, N> {
        GetCamelotV3TickDataBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pool: alloy::sol_types::private::Address,
        zeroForOne: bool,
        currentTick: alloy::sol_types::private::primitives::aliases::I24,
        numTicks: u16,
        tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            GetCamelotV3TickDataBatchRequestInstance<T, P, N>,
        >,
    > {
        GetCamelotV3TickDataBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy(provider, pool, zeroForOne, currentTick, numTicks, tickSpacing)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pool: alloy::sol_types::private::Address,
        zeroForOne: bool,
        currentTick: alloy::sol_types::private::primitives::aliases::I24,
        numTicks: u16,
        tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetCamelotV3TickDataBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, pool, zeroForOne, currentTick, numTicks, tickSpacing)
    }
    /**A [`GetCamelotV3TickDataBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetCamelotV3TickDataBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetCamelotV3TickDataBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for GetCamelotV3TickDataBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetCamelotV3TickDataBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetCamelotV3TickDataBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetCamelotV3TickDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetCamelotV3TickDataBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pool: alloy::sol_types::private::Address,
            zeroForOne: bool,
            currentTick: alloy::sol_types::private::primitives::aliases::I24,
            numTicks: u16,
            tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::Result<GetCamelotV3TickDataBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                pool,
                zeroForOne,
                currentTick,
                numTicks,
                tickSpacing,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pool: alloy::sol_types::private::Address,
            zeroForOne: bool,
            currentTick: alloy::sol_types::private::primitives::aliases::I24,
            numTicks: u16,
            tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            pool,
                            zeroForOne,
                            currentTick,
                            numTicks,
                            tickSpacing,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > GetCamelotV3TickDataBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> GetCamelotV3TickDataBatchRequestInstance<T, P, N> {
            GetCamelotV3TickDataBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetCamelotV3TickDataBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetCamelotV3TickDataBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
