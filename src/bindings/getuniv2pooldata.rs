/**

Generated by the following Solidity interface...
```solidity
interface GetUniV2PoolData {
    constructor(address[] pools);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetUniV2PoolData {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060405161126538038061126583398181016040528101906100319190610d26565b5f815167ffffffffffffffff81111561004d5761004c610b90565b5b60405190808252806020026020018201604052801561008657816020015b610073610aba565b81526020019060019003908161006b5790505b5090505f5b8251811015610a35575f8382815181106100a8576100a7610d6d565b5b602002602001015190506100c181610a6360201b60201c565b156100cc5750610a2a565b6100d4610aba565b8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101419190610d9a565b815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e49190610d9a565b816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061022d815f0151610a6360201b60201c565b15610239575050610a2a565b61024c8160600151610a6360201b60201c565b15610258575050610a2a565b5f80825f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103079190610e17565b5f604051808303815f8787f1925050503d805f8114610341576040519150601f19603f3d011682016040523d82523d5f602084013e610346565b606091505b509150915081156103b5575f60208251036103a5578180602001905181019061036f9190610e60565b90505f81148061037f575060ff81115b1561038e575050505050610a2a565b80846040019060ff16908160ff16815250506103af565b5050505050610a2a565b506103be565b50505050610a2a565b5f80846060015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046e9190610e17565b5f604051808303815f8787f1925050503d805f81146104a8576040519150601f19603f3d011682016040523d82523d5f602084013e6104ad565b606091505b50915091508115610520575f602082510361050e57818060200190518101906104d69190610e60565b90505f8114806104e6575060ff81115b156104f75750505050505050610a2a565b808660a0019060ff16908160ff168152505061051a565b50505050505050610a2a565b5061052b565b505050505050610a2a565b5f80865f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105da9190610e17565b5f604051808303815f8787f1925050503d805f8114610614576040519150601f19603f3d011682016040523d82523d5f602084013e610619565b606091505b50915091508115610683575f602082510361064957818060200190518101906106429190610ebe565b9050610673565b5f8280602001905181019061065e9190610f8b565b905061066f81610a9460201b60201c565b9150505b8088602001818152505050610690565b5f801b8760200181815250505b5f80886060015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107409190610e17565b5f604051808303815f8787f1925050503d805f811461077a576040519150601f19603f3d011682016040523d82523d5f602084013e61077f565b606091505b509150915081156107e9575f60208251036107af57818060200190518101906107a89190610ebe565b90506107d9565b5f828060200190518101906107c49190610f8b565b90506107d581610a9460201b60201c565b9150505b808a6080018181525050506107f6565b5f801b8960800181815250505b8973ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561085e57506040513d601f19601f8201168201806040525081019061085b9190610d9a565b60015b6108a0575f89610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506108db565b808a610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505b8973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa92505050801561094357506040513d601f19601f82011682018060405250810190610940919061104e565b60015b6109a4575f8960c001906dffffffffffffffffffffffffffff1690816dffffffffffffffffffffffffffff16815250505f8960e001906dffffffffffffffffffffffffffff1690816dffffffffffffffffffffffffffff1681525050610a00565b828c60c001906dffffffffffffffffffffffffffff1690816dffffffffffffffffffffffffffff1681525050818c60e001906dffffffffffffffffffffffffffff1690816dffffffffffffffffffffffffffff16815250505050505b888c8c81518110610a1457610a13610d6d565b5b6020026020010181905250505050505050505050505b80600101905061008b565b505f81604051602001610a489190611244565b60405160208183030381529060405290506020810180590381f35b5f808273ffffffffffffffffffffffffffffffffffffffff163b03610a8b5760019050610a8f565b5f90505b919050565b5f808290505f815103610aac575f801b915050610ab5565b60208301519150505b919050565b6040518061012001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f80191681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f80191681526020015f60ff1681526020015f6dffffffffffffffffffffffffffff1681526020015f6dffffffffffffffffffffffffffff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610bc682610b80565b810181811067ffffffffffffffff82111715610be557610be4610b90565b5b80604052505050565b5f610bf7610b6b565b9050610c038282610bbd565b919050565b5f67ffffffffffffffff821115610c2257610c21610b90565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c6082610c37565b9050919050565b610c7081610c56565b8114610c7a575f80fd5b50565b5f81519050610c8b81610c67565b92915050565b5f610ca3610c9e84610c08565b610bee565b90508083825260208201905060208402830185811115610cc657610cc5610c33565b5b835b81811015610cef5780610cdb8882610c7d565b845260208401935050602081019050610cc8565b5050509392505050565b5f82601f830112610d0d57610d0c610b7c565b5b8151610d1d848260208601610c91565b91505092915050565b5f60208284031215610d3b57610d3a610b74565b5b5f82015167ffffffffffffffff811115610d5857610d57610b78565b5b610d6484828501610cf9565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215610daf57610dae610b74565b5b5f610dbc84828501610c7d565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610df182610dc5565b610dfb8185610dcf565b9350610e0b818560208601610dd9565b80840191505092915050565b5f610e228284610de7565b915081905092915050565b5f819050919050565b610e3f81610e2d565b8114610e49575f80fd5b50565b5f81519050610e5a81610e36565b92915050565b5f60208284031215610e7557610e74610b74565b5b5f610e8284828501610e4c565b91505092915050565b5f819050919050565b610e9d81610e8b565b8114610ea7575f80fd5b50565b5f81519050610eb881610e94565b92915050565b5f60208284031215610ed357610ed2610b74565b5b5f610ee084828501610eaa565b91505092915050565b5f80fd5b5f67ffffffffffffffff821115610f0757610f06610b90565b5b610f1082610b80565b9050602081019050919050565b5f610f2f610f2a84610eed565b610bee565b905082815260208101848484011115610f4b57610f4a610ee9565b5b610f56848285610dd9565b509392505050565b5f82601f830112610f7257610f71610b7c565b5b8151610f82848260208601610f1d565b91505092915050565b5f60208284031215610fa057610f9f610b74565b5b5f82015167ffffffffffffffff811115610fbd57610fbc610b78565b5b610fc984828501610f5e565b91505092915050565b5f6dffffffffffffffffffffffffffff82169050919050565b610ff481610fd2565b8114610ffe575f80fd5b50565b5f8151905061100f81610feb565b92915050565b5f63ffffffff82169050919050565b61102d81611015565b8114611037575f80fd5b50565b5f8151905061104881611024565b92915050565b5f805f6060848603121561106557611064610b74565b5b5f61107286828701611001565b935050602061108386828701611001565b92505060406110948682870161103a565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6110d081610c56565b82525050565b6110df81610e8b565b82525050565b5f60ff82169050919050565b6110fa816110e5565b82525050565b61110981610fd2565b82525050565b61012082015f8201516111245f8501826110c7565b50602082015161113760208501826110d6565b50604082015161114a60408501826110f1565b50606082015161115d60608501826110c7565b50608082015161117060808501826110d6565b5060a082015161118360a08501826110f1565b5060c082015161119660c0850182611100565b5060e08201516111a960e0850182611100565b506101008201516111be6101008501826110c7565b50505050565b5f6111cf838361110f565b6101208301905092915050565b5f602082019050919050565b5f6111f28261109e565b6111fc81856110a8565b9350611207836110b8565b805f5b8381101561123757815161121e88826111c4565b9750611229836111dc565b92505060018101905061120a565b5085935050505092915050565b5f6020820190508181035f83015261125c81846111e8565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x12e8\x03\x80a\x12e\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\r&V[_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\x0B\x90V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x86W\x81` \x01[a\0sa\n\xBAV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0kW\x90P[P\x90P_[\x82Q\x81\x10\x15a\n5W_\x83\x82\x81Q\x81\x10a\0\xA8Wa\0\xA7a\rmV[[` \x02` \x01\x01Q\x90Pa\0\xC1\x81a\nc` \x1B` \x1CV[\x15a\0\xCCWPa\n*V[a\0\xD4a\n\xBAV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01A\x91\x90a\r\x9AV[\x81_\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xE4\x91\x90a\r\x9AV[\x81``\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x02-\x81_\x01Qa\nc` \x1B` \x1CV[\x15a\x029WPPa\n*V[a\x02L\x81``\x01Qa\nc` \x1B` \x1CV[\x15a\x02XWPPa\n*V[_\x80\x82_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x03\x07\x91\x90a\x0E\x17V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x03AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03FV[``\x91P[P\x91P\x91P\x81\x15a\x03\xB5W_` \x82Q\x03a\x03\xA5W\x81\x80` \x01\x90Q\x81\x01\x90a\x03o\x91\x90a\x0E`V[\x90P_\x81\x14\x80a\x03\x7FWP`\xFF\x81\x11[\x15a\x03\x8EWPPPPPa\n*V[\x80\x84`@\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x03\xAFV[PPPPPa\n*V[Pa\x03\xBEV[PPPPa\n*V[_\x80\x84``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x04n\x91\x90a\x0E\x17V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x04\xA8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\xADV[``\x91P[P\x91P\x91P\x81\x15a\x05 W_` \x82Q\x03a\x05\x0EW\x81\x80` \x01\x90Q\x81\x01\x90a\x04\xD6\x91\x90a\x0E`V[\x90P_\x81\x14\x80a\x04\xE6WP`\xFF\x81\x11[\x15a\x04\xF7WPPPPPPPa\n*V[\x80\x86`\xA0\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x05\x1AV[PPPPPPPa\n*V[Pa\x05+V[PPPPPPa\n*V[_\x80\x86_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x05\xDA\x91\x90a\x0E\x17V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x06\x14W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x06\x19V[``\x91P[P\x91P\x91P\x81\x15a\x06\x83W_` \x82Q\x03a\x06IW\x81\x80` \x01\x90Q\x81\x01\x90a\x06B\x91\x90a\x0E\xBEV[\x90Pa\x06sV[_\x82\x80` \x01\x90Q\x81\x01\x90a\x06^\x91\x90a\x0F\x8BV[\x90Pa\x06o\x81a\n\x94` \x1B` \x1CV[\x91PP[\x80\x88` \x01\x81\x81RPPPa\x06\x90V[_\x80\x1B\x87` \x01\x81\x81RPP[_\x80\x88``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x07@\x91\x90a\x0E\x17V[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x07zW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x07\x7FV[``\x91P[P\x91P\x91P\x81\x15a\x07\xE9W_` \x82Q\x03a\x07\xAFW\x81\x80` \x01\x90Q\x81\x01\x90a\x07\xA8\x91\x90a\x0E\xBEV[\x90Pa\x07\xD9V[_\x82\x80` \x01\x90Q\x81\x01\x90a\x07\xC4\x91\x90a\x0F\x8BV[\x90Pa\x07\xD5\x81a\n\x94` \x1B` \x1CV[\x91PP[\x80\x8A`\x80\x01\x81\x81RPPPa\x07\xF6V[_\x80\x1B\x89`\x80\x01\x81\x81RPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC4Z\x01U`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x08^WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08[\x91\x90a\r\x9AV[`\x01[a\x08\xA0W_\x89a\x01\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x08\xDBV[\x80\x8Aa\x01\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t\x02\xF1\xAC`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01```@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\tCWP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t@\x91\x90a\x10NV[`\x01[a\t\xA4W_\x89`\xC0\x01\x90m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP_\x89`\xE0\x01\x90m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\n\0V[\x82\x8C`\xC0\x01\x90m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81\x8C`\xE0\x01\x90m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPPPP[\x88\x8C\x8C\x81Q\x81\x10a\n\x14Wa\n\x13a\rmV[[` \x02` \x01\x01\x81\x90RPPPPPPPPPPP[\x80`\x01\x01\x90Pa\0\x8BV[P_\x81`@Q` \x01a\nH\x91\x90a\x12DV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a\n\x8BW`\x01\x90Pa\n\x8FV[_\x90P[\x91\x90PV[_\x80\x82\x90P_\x81Q\x03a\n\xACW_\x80\x1B\x91PPa\n\xB5V[` \x83\x01Q\x91PP[\x91\x90PV[`@Q\x80a\x01 \x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x80\x19\x16\x81R` \x01_`\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x80\x19\x16\x81R` \x01_`\xFF\x16\x81R` \x01_m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x0B\xC6\x82a\x0B\x80V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0B\xE5Wa\x0B\xE4a\x0B\x90V[[\x80`@RPPPV[_a\x0B\xF7a\x0BkV[\x90Pa\x0C\x03\x82\x82a\x0B\xBDV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0C\"Wa\x0C!a\x0B\x90V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0C`\x82a\x0C7V[\x90P\x91\x90PV[a\x0Cp\x81a\x0CVV[\x81\x14a\x0CzW_\x80\xFD[PV[_\x81Q\x90Pa\x0C\x8B\x81a\x0CgV[\x92\x91PPV[_a\x0C\xA3a\x0C\x9E\x84a\x0C\x08V[a\x0B\xEEV[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0C\xC6Wa\x0C\xC5a\x0C3V[[\x83[\x81\x81\x10\x15a\x0C\xEFW\x80a\x0C\xDB\x88\x82a\x0C}V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0C\xC8V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\r\rWa\r\x0Ca\x0B|V[[\x81Qa\r\x1D\x84\x82` \x86\x01a\x0C\x91V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\r;Wa\r:a\x0BtV[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rXWa\rWa\x0BxV[[a\rd\x84\x82\x85\x01a\x0C\xF9V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\r\xAFWa\r\xAEa\x0BtV[[_a\r\xBC\x84\x82\x85\x01a\x0C}V[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\r\xF1\x82a\r\xC5V[a\r\xFB\x81\x85a\r\xCFV[\x93Pa\x0E\x0B\x81\x85` \x86\x01a\r\xD9V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0E\"\x82\x84a\r\xE7V[\x91P\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0E?\x81a\x0E-V[\x81\x14a\x0EIW_\x80\xFD[PV[_\x81Q\x90Pa\x0EZ\x81a\x0E6V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0EuWa\x0Eta\x0BtV[[_a\x0E\x82\x84\x82\x85\x01a\x0ELV[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0E\x9D\x81a\x0E\x8BV[\x81\x14a\x0E\xA7W_\x80\xFD[PV[_\x81Q\x90Pa\x0E\xB8\x81a\x0E\x94V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0E\xD3Wa\x0E\xD2a\x0BtV[[_a\x0E\xE0\x84\x82\x85\x01a\x0E\xAAV[\x91PP\x92\x91PPV[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0F\x07Wa\x0F\x06a\x0B\x90V[[a\x0F\x10\x82a\x0B\x80V[\x90P` \x81\x01\x90P\x91\x90PV[_a\x0F/a\x0F*\x84a\x0E\xEDV[a\x0B\xEEV[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x0FKWa\x0FJa\x0E\xE9V[[a\x0FV\x84\x82\x85a\r\xD9V[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0FrWa\x0Fqa\x0B|V[[\x81Qa\x0F\x82\x84\x82` \x86\x01a\x0F\x1DV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0F\xA0Wa\x0F\x9Fa\x0BtV[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\xBDWa\x0F\xBCa\x0BxV[[a\x0F\xC9\x84\x82\x85\x01a\x0F^V[\x91PP\x92\x91PPV[_m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0F\xF4\x81a\x0F\xD2V[\x81\x14a\x0F\xFEW_\x80\xFD[PV[_\x81Q\x90Pa\x10\x0F\x81a\x0F\xEBV[\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x10-\x81a\x10\x15V[\x81\x14a\x107W_\x80\xFD[PV[_\x81Q\x90Pa\x10H\x81a\x10$V[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x10eWa\x10da\x0BtV[[_a\x10r\x86\x82\x87\x01a\x10\x01V[\x93PP` a\x10\x83\x86\x82\x87\x01a\x10\x01V[\x92PP`@a\x10\x94\x86\x82\x87\x01a\x10:V[\x91PP\x92P\x92P\x92V[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x10\xD0\x81a\x0CVV[\x82RPPV[a\x10\xDF\x81a\x0E\x8BV[\x82RPPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x10\xFA\x81a\x10\xE5V[\x82RPPV[a\x11\t\x81a\x0F\xD2V[\x82RPPV[a\x01 \x82\x01_\x82\x01Qa\x11$_\x85\x01\x82a\x10\xC7V[P` \x82\x01Qa\x117` \x85\x01\x82a\x10\xD6V[P`@\x82\x01Qa\x11J`@\x85\x01\x82a\x10\xF1V[P``\x82\x01Qa\x11]``\x85\x01\x82a\x10\xC7V[P`\x80\x82\x01Qa\x11p`\x80\x85\x01\x82a\x10\xD6V[P`\xA0\x82\x01Qa\x11\x83`\xA0\x85\x01\x82a\x10\xF1V[P`\xC0\x82\x01Qa\x11\x96`\xC0\x85\x01\x82a\x11\0V[P`\xE0\x82\x01Qa\x11\xA9`\xE0\x85\x01\x82a\x11\0V[Pa\x01\0\x82\x01Qa\x11\xBEa\x01\0\x85\x01\x82a\x10\xC7V[PPPPV[_a\x11\xCF\x83\x83a\x11\x0FV[a\x01 \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x11\xF2\x82a\x10\x9EV[a\x11\xFC\x81\x85a\x10\xA8V[\x93Pa\x12\x07\x83a\x10\xB8V[\x80_[\x83\x81\x10\x15a\x127W\x81Qa\x12\x1E\x88\x82a\x11\xC4V[\x97Pa\x12)\x83a\x11\xDCV[\x92PP`\x01\x81\x01\x90Pa\x12\nV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x12\\\x81\x84a\x11\xE8V[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea2646970667358221220de86919a382bbc86d09636cde855435b0dfcdb375e58b9efb1e8e5e0208128f364736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 \xDE\x86\x91\x9A8+\xBC\x86\xD0\x966\xCD\xE8UC[\r\xFC\xDB7^X\xB9\xEF\xB1\xE8\xE5\xE0 \x81(\xF3dsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.pools,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pools: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetUniV2PoolData`](self) contract instance.

See the [wrapper's documentation](`GetUniV2PoolDataInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetUniV2PoolDataInstance<T, P, N> {
        GetUniV2PoolDataInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetUniV2PoolDataInstance<T, P, N>>,
    > {
        GetUniV2PoolDataInstance::<T, P, N>::deploy(provider, pools)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetUniV2PoolDataInstance::<T, P, N>::deploy_builder(provider, pools)
    }
    /**A [`GetUniV2PoolData`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetUniV2PoolData`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetUniV2PoolDataInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GetUniV2PoolDataInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetUniV2PoolDataInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV2PoolDataInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetUniV2PoolData`](self) contract instance.

See the [wrapper's documentation](`GetUniV2PoolDataInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetUniV2PoolDataInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, pools);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { pools },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GetUniV2PoolDataInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GetUniV2PoolDataInstance<T, P, N> {
            GetUniV2PoolDataInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV2PoolDataInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV2PoolDataInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
