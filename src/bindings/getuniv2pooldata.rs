/**

Generated by the following Solidity interface...
```solidity
interface GetUniV2PoolData {
    constructor(address[] pools);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetUniV2PoolData {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506040516111e63803806111e683398181016040528101906100319190610cea565b5f815167ffffffffffffffff81111561004d5761004c610b54565b5b60405190808252806020026020018201604052801561008657816020015b610073610a9e565b81526020019060019003908161006b5790505b5090505f5b8251811015610a19575f8382815181106100a8576100a7610d31565b5b602002602001015190506100c181610a4760201b60201c565b156100cc5750610a0e565b6100d4610a9e565b8173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561011d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101419190610d5e565b815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e49190610d5e565b816060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061022d815f0151610a4760201b60201c565b15610239575050610a0e565b61024c8160600151610a4760201b60201c565b15610258575050610a0e565b5f80825f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516103079190610ddb565b5f604051808303815f8787f1925050503d805f8114610341576040519150601f19603f3d011682016040523d82523d5f602084013e610346565b606091505b509150915081156103b5575f60208251036103a5578180602001905181019061036f9190610e24565b90505f81148061037f575060ff81115b1561038e575050505050610a0e565b80846040019060ff16908160ff16815250506103af565b5050505050610a0e565b506103be565b50505050610a0e565b5f80846060015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161046e9190610ddb565b5f604051808303815f8787f1925050503d805f81146104a8576040519150601f19603f3d011682016040523d82523d5f602084013e6104ad565b606091505b50915091508115610520575f602082510361050e57818060200190518101906104d69190610e24565b90505f8114806104e6575060ff81115b156104f75750505050505050610a0e565b808660a0019060ff16908160ff168152505061051a565b50505050505050610a0e565b5061052b565b505050505050610a0e565b5f80865f015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516105da9190610ddb565b5f604051808303815f8787f1925050503d805f8114610614576040519150601f19603f3d011682016040523d82523d5f602084013e610619565b606091505b50915091508115610683575f602082510361064957818060200190518101906106429190610e82565b9050610673565b5f8280602001905181019061065e9190610f4f565b905061066f81610a7860201b60201c565b9150505b8088602001818152505050610690565b5f801b8760200181815250505b5f80886060015173ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f95d89b41000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107409190610ddb565b5f604051808303815f8787f1925050503d805f811461077a576040519150601f19603f3d011682016040523d82523d5f602084013e61077f565b606091505b509150915081156107e9575f60208251036107af57818060200190518101906107a89190610e82565b90506107d9565b5f828060200190518101906107c49190610f4f565b90506107d581610a7860201b60201c565b9150505b808a6080018181525050506107f6565b5f801b8960800181815250505b8973ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561085e57506040513d601f19601f8201168201806040525081019061085b9190610d5e565b60015b6108a0575f89610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506108db565b808a610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050505b8973ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa92505050801561094357506040513d601f19601f820116820180604052508101906109409190610fcf565b60015b610960575f8960c00181815250505f8960e00181815250506109e4565b6dffffffffffffffffffffffffffff801683118061098d57506dffffffffffffffffffffffffffff801682115b156109ab575f8c60c00181815250505f8c60e00181815250506109e0565b826dffffffffffffffffffffffffffff168c60c0018181525050816dffffffffffffffffffffffffffff168c60e00181815250505b5050505b888c8c815181106109f8576109f7610d31565b5b6020026020010181905250505050505050505050505b80600101905061008b565b505f81604051602001610a2c91906111c5565b60405160208183030381529060405290506020810180590381f35b5f808273ffffffffffffffffffffffffffffffffffffffff163b03610a6f5760019050610a73565b5f90505b919050565b5f808290505f815103610a90575f801b915050610a99565b60208301519150505b919050565b6040518061012001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f80191681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f80191681526020015f60ff1681526020015f81526020015f81526020015f73ffffffffffffffffffffffffffffffffffffffff1681525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610b8a82610b44565b810181811067ffffffffffffffff82111715610ba957610ba8610b54565b5b80604052505050565b5f610bbb610b2f565b9050610bc78282610b81565b919050565b5f67ffffffffffffffff821115610be657610be5610b54565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610c2482610bfb565b9050919050565b610c3481610c1a565b8114610c3e575f80fd5b50565b5f81519050610c4f81610c2b565b92915050565b5f610c67610c6284610bcc565b610bb2565b90508083825260208201905060208402830185811115610c8a57610c89610bf7565b5b835b81811015610cb35780610c9f8882610c41565b845260208401935050602081019050610c8c565b5050509392505050565b5f82601f830112610cd157610cd0610b40565b5b8151610ce1848260208601610c55565b91505092915050565b5f60208284031215610cff57610cfe610b38565b5b5f82015167ffffffffffffffff811115610d1c57610d1b610b3c565b5b610d2884828501610cbd565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215610d7357610d72610b38565b5b5f610d8084828501610c41565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610db582610d89565b610dbf8185610d93565b9350610dcf818560208601610d9d565b80840191505092915050565b5f610de68284610dab565b915081905092915050565b5f819050919050565b610e0381610df1565b8114610e0d575f80fd5b50565b5f81519050610e1e81610dfa565b92915050565b5f60208284031215610e3957610e38610b38565b5b5f610e4684828501610e10565b91505092915050565b5f819050919050565b610e6181610e4f565b8114610e6b575f80fd5b50565b5f81519050610e7c81610e58565b92915050565b5f60208284031215610e9757610e96610b38565b5b5f610ea484828501610e6e565b91505092915050565b5f80fd5b5f67ffffffffffffffff821115610ecb57610eca610b54565b5b610ed482610b44565b9050602081019050919050565b5f610ef3610eee84610eb1565b610bb2565b905082815260208101848484011115610f0f57610f0e610ead565b5b610f1a848285610d9d565b509392505050565b5f82601f830112610f3657610f35610b40565b5b8151610f46848260208601610ee1565b91505092915050565b5f60208284031215610f6457610f63610b38565b5b5f82015167ffffffffffffffff811115610f8157610f80610b3c565b5b610f8d84828501610f22565b91505092915050565b5f63ffffffff82169050919050565b610fae81610f96565b8114610fb8575f80fd5b50565b5f81519050610fc981610fa5565b92915050565b5f805f60608486031215610fe657610fe5610b38565b5b5f610ff386828701610e10565b935050602061100486828701610e10565b925050604061101586828701610fbb565b9150509250925092565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b61105181610c1a565b82525050565b61106081610e4f565b82525050565b5f60ff82169050919050565b61107b81611066565b82525050565b61108a81610df1565b82525050565b61012082015f8201516110a55f850182611048565b5060208201516110b86020850182611057565b5060408201516110cb6040850182611072565b5060608201516110de6060850182611048565b5060808201516110f16080850182611057565b5060a082015161110460a0850182611072565b5060c082015161111760c0850182611081565b5060e082015161112a60e0850182611081565b5061010082015161113f610100850182611048565b50505050565b5f6111508383611090565b6101208301905092915050565b5f602082019050919050565b5f6111738261101f565b61117d8185611029565b935061118883611039565b805f5b838110156111b857815161119f8882611145565b97506111aa8361115d565b92505060018101905061118b565b5085935050505092915050565b5f6020820190508181035f8301526111dd8184611169565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x11\xE68\x03\x80a\x11\xE6\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\x0C\xEAV[_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\x0BTV[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x86W\x81` \x01[a\0sa\n\x9EV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0kW\x90P[P\x90P_[\x82Q\x81\x10\x15a\n\x19W_\x83\x82\x81Q\x81\x10a\0\xA8Wa\0\xA7a\r1V[[` \x02` \x01\x01Q\x90Pa\0\xC1\x81a\nG` \x1B` \x1CV[\x15a\0\xCCWPa\n\x0EV[a\0\xD4a\n\x9EV[\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x1DW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01A\x91\x90a\r^V[\x81_\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xC0W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\xE4\x91\x90a\r^V[\x81``\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x02-\x81_\x01Qa\nG` \x1B` \x1CV[\x15a\x029WPPa\n\x0EV[a\x02L\x81``\x01Qa\nG` \x1B` \x1CV[\x15a\x02XWPPa\n\x0EV[_\x80\x82_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x03\x07\x91\x90a\r\xDBV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x03AW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x03FV[``\x91P[P\x91P\x91P\x81\x15a\x03\xB5W_` \x82Q\x03a\x03\xA5W\x81\x80` \x01\x90Q\x81\x01\x90a\x03o\x91\x90a\x0E$V[\x90P_\x81\x14\x80a\x03\x7FWP`\xFF\x81\x11[\x15a\x03\x8EWPPPPPa\n\x0EV[\x80\x84`@\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x03\xAFV[PPPPPa\n\x0EV[Pa\x03\xBEV[PPPPa\n\x0EV[_\x80\x84``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x04n\x91\x90a\r\xDBV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x04\xA8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x04\xADV[``\x91P[P\x91P\x91P\x81\x15a\x05 W_` \x82Q\x03a\x05\x0EW\x81\x80` \x01\x90Q\x81\x01\x90a\x04\xD6\x91\x90a\x0E$V[\x90P_\x81\x14\x80a\x04\xE6WP`\xFF\x81\x11[\x15a\x04\xF7WPPPPPPPa\n\x0EV[\x80\x86`\xA0\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPPa\x05\x1AV[PPPPPPPa\n\x0EV[Pa\x05+V[PPPPPPa\n\x0EV[_\x80\x86_\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x05\xDA\x91\x90a\r\xDBV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x06\x14W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x06\x19V[``\x91P[P\x91P\x91P\x81\x15a\x06\x83W_` \x82Q\x03a\x06IW\x81\x80` \x01\x90Q\x81\x01\x90a\x06B\x91\x90a\x0E\x82V[\x90Pa\x06sV[_\x82\x80` \x01\x90Q\x81\x01\x90a\x06^\x91\x90a\x0FOV[\x90Pa\x06o\x81a\nx` \x1B` \x1CV[\x91PP[\x80\x88` \x01\x81\x81RPPPa\x06\x90V[_\x80\x1B\x87` \x01\x81\x81RPP[_\x80\x88``\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F\x95\xD8\x9BA\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x07@\x91\x90a\r\xDBV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x07zW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x07\x7FV[``\x91P[P\x91P\x91P\x81\x15a\x07\xE9W_` \x82Q\x03a\x07\xAFW\x81\x80` \x01\x90Q\x81\x01\x90a\x07\xA8\x91\x90a\x0E\x82V[\x90Pa\x07\xD9V[_\x82\x80` \x01\x90Q\x81\x01\x90a\x07\xC4\x91\x90a\x0FOV[\x90Pa\x07\xD5\x81a\nx` \x1B` \x1CV[\x91PP[\x80\x8A`\x80\x01\x81\x81RPPPa\x07\xF6V[_\x80\x1B\x89`\x80\x01\x81\x81RPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC4Z\x01U`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x08^WP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08[\x91\x90a\r^V[`\x01[a\x08\xA0W_\x89a\x01\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPa\x08\xDBV[\x80\x8Aa\x01\0\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPPP[\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t\x02\xF1\xAC`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01```@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\tCWP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\t@\x91\x90a\x0F\xCFV[`\x01[a\t`W_\x89`\xC0\x01\x81\x81RPP_\x89`\xE0\x01\x81\x81RPPa\t\xE4V[m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x83\x11\x80a\t\x8DWPm\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x82\x11[\x15a\t\xABW_\x8C`\xC0\x01\x81\x81RPP_\x8C`\xE0\x01\x81\x81RPPa\t\xE0V[\x82m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8C`\xC0\x01\x81\x81RPP\x81m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8C`\xE0\x01\x81\x81RPP[PPP[\x88\x8C\x8C\x81Q\x81\x10a\t\xF8Wa\t\xF7a\r1V[[` \x02` \x01\x01\x81\x90RPPPPPPPPPPP[\x80`\x01\x01\x90Pa\0\x8BV[P_\x81`@Q` \x01a\n,\x91\x90a\x11\xC5V[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a\noW`\x01\x90Pa\nsV[_\x90P[\x91\x90PV[_\x80\x82\x90P_\x81Q\x03a\n\x90W_\x80\x1B\x91PPa\n\x99V[` \x83\x01Q\x91PP[\x91\x90PV[`@Q\x80a\x01 \x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x80\x19\x16\x81R` \x01_`\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_\x80\x19\x16\x81R` \x01_`\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x0B\x8A\x82a\x0BDV[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0B\xA9Wa\x0B\xA8a\x0BTV[[\x80`@RPPPV[_a\x0B\xBBa\x0B/V[\x90Pa\x0B\xC7\x82\x82a\x0B\x81V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0B\xE6Wa\x0B\xE5a\x0BTV[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0C$\x82a\x0B\xFBV[\x90P\x91\x90PV[a\x0C4\x81a\x0C\x1AV[\x81\x14a\x0C>W_\x80\xFD[PV[_\x81Q\x90Pa\x0CO\x81a\x0C+V[\x92\x91PPV[_a\x0Cga\x0Cb\x84a\x0B\xCCV[a\x0B\xB2V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x0C\x8AWa\x0C\x89a\x0B\xF7V[[\x83[\x81\x81\x10\x15a\x0C\xB3W\x80a\x0C\x9F\x88\x82a\x0CAV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x0C\x8CV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0C\xD1Wa\x0C\xD0a\x0B@V[[\x81Qa\x0C\xE1\x84\x82` \x86\x01a\x0CUV[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0C\xFFWa\x0C\xFEa\x0B8V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x1CWa\r\x1Ba\x0B<V[[a\r(\x84\x82\x85\x01a\x0C\xBDV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\rsWa\rra\x0B8V[[_a\r\x80\x84\x82\x85\x01a\x0CAV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\r\xB5\x82a\r\x89V[a\r\xBF\x81\x85a\r\x93V[\x93Pa\r\xCF\x81\x85` \x86\x01a\r\x9DV[\x80\x84\x01\x91PP\x92\x91PPV[_a\r\xE6\x82\x84a\r\xABV[\x91P\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0E\x03\x81a\r\xF1V[\x81\x14a\x0E\rW_\x80\xFD[PV[_\x81Q\x90Pa\x0E\x1E\x81a\r\xFAV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0E9Wa\x0E8a\x0B8V[[_a\x0EF\x84\x82\x85\x01a\x0E\x10V[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0Ea\x81a\x0EOV[\x81\x14a\x0EkW_\x80\xFD[PV[_\x81Q\x90Pa\x0E|\x81a\x0EXV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0E\x97Wa\x0E\x96a\x0B8V[[_a\x0E\xA4\x84\x82\x85\x01a\x0EnV[\x91PP\x92\x91PPV[_\x80\xFD[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0E\xCBWa\x0E\xCAa\x0BTV[[a\x0E\xD4\x82a\x0BDV[\x90P` \x81\x01\x90P\x91\x90PV[_a\x0E\xF3a\x0E\xEE\x84a\x0E\xB1V[a\x0B\xB2V[\x90P\x82\x81R` \x81\x01\x84\x84\x84\x01\x11\x15a\x0F\x0FWa\x0F\x0Ea\x0E\xADV[[a\x0F\x1A\x84\x82\x85a\r\x9DV[P\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x0F6Wa\x0F5a\x0B@V[[\x81Qa\x0FF\x84\x82` \x86\x01a\x0E\xE1V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0FdWa\x0Fca\x0B8V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F\x81Wa\x0F\x80a\x0B<V[[a\x0F\x8D\x84\x82\x85\x01a\x0F\"V[\x91PP\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0F\xAE\x81a\x0F\x96V[\x81\x14a\x0F\xB8W_\x80\xFD[PV[_\x81Q\x90Pa\x0F\xC9\x81a\x0F\xA5V[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x0F\xE6Wa\x0F\xE5a\x0B8V[[_a\x0F\xF3\x86\x82\x87\x01a\x0E\x10V[\x93PP` a\x10\x04\x86\x82\x87\x01a\x0E\x10V[\x92PP`@a\x10\x15\x86\x82\x87\x01a\x0F\xBBV[\x91PP\x92P\x92P\x92V[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x10Q\x81a\x0C\x1AV[\x82RPPV[a\x10`\x81a\x0EOV[\x82RPPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x10{\x81a\x10fV[\x82RPPV[a\x10\x8A\x81a\r\xF1V[\x82RPPV[a\x01 \x82\x01_\x82\x01Qa\x10\xA5_\x85\x01\x82a\x10HV[P` \x82\x01Qa\x10\xB8` \x85\x01\x82a\x10WV[P`@\x82\x01Qa\x10\xCB`@\x85\x01\x82a\x10rV[P``\x82\x01Qa\x10\xDE``\x85\x01\x82a\x10HV[P`\x80\x82\x01Qa\x10\xF1`\x80\x85\x01\x82a\x10WV[P`\xA0\x82\x01Qa\x11\x04`\xA0\x85\x01\x82a\x10rV[P`\xC0\x82\x01Qa\x11\x17`\xC0\x85\x01\x82a\x10\x81V[P`\xE0\x82\x01Qa\x11*`\xE0\x85\x01\x82a\x10\x81V[Pa\x01\0\x82\x01Qa\x11?a\x01\0\x85\x01\x82a\x10HV[PPPPV[_a\x11P\x83\x83a\x10\x90V[a\x01 \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x11s\x82a\x10\x1FV[a\x11}\x81\x85a\x10)V[\x93Pa\x11\x88\x83a\x109V[\x80_[\x83\x81\x10\x15a\x11\xB8W\x81Qa\x11\x9F\x88\x82a\x11EV[\x97Pa\x11\xAA\x83a\x11]V[\x92PP`\x01\x81\x01\x90Pa\x11\x8BV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x11\xDD\x81\x84a\x11iV[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea2646970667358221220d9a1c30bd988f646ac0d9e3a7afc948ad773e8f7451290ed0d8ecc85274a480c64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 \xD9\xA1\xC3\x0B\xD9\x88\xF6F\xAC\r\x9E:z\xFC\x94\x8A\xD7s\xE8\xF7E\x12\x90\xED\r\x8E\xCC\x85'JH\x0CdsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.pools,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { pools: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetUniV2PoolData`](self) contract instance.

See the [wrapper's documentation](`GetUniV2PoolDataInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetUniV2PoolDataInstance<T, P, N> {
        GetUniV2PoolDataInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetUniV2PoolDataInstance<T, P, N>>,
    > {
        GetUniV2PoolDataInstance::<T, P, N>::deploy(provider, pools)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetUniV2PoolDataInstance::<T, P, N>::deploy_builder(provider, pools)
    }
    /**A [`GetUniV2PoolData`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetUniV2PoolData`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetUniV2PoolDataInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for GetUniV2PoolDataInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetUniV2PoolDataInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV2PoolDataInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetUniV2PoolData`](self) contract instance.

See the [wrapper's documentation](`GetUniV2PoolDataInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetUniV2PoolDataInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, pools);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { pools },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> GetUniV2PoolDataInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> GetUniV2PoolDataInstance<T, P, N> {
            GetUniV2PoolDataInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV2PoolDataInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniV2PoolDataInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
