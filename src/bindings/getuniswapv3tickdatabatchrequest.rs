/**

Generated by the following Solidity interface...
```solidity
interface GetUniswapV3TickDataBatchRequest {
    constructor(address pool, bool zeroForOne, int24 currentTick, uint16 numTicks, int24 tickSpacing);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pool",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "zeroForOne",
        "type": "bool",
        "internalType": "bool"
      },
      {
        "name": "currentTick",
        "type": "int24",
        "internalType": "int24"
      },
      {
        "name": "numTicks",
        "type": "uint16",
        "internalType": "uint16"
      },
      {
        "name": "tickSpacing",
        "type": "int24",
        "internalType": "int24"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetUniswapV3TickDataBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060405161108b38038061108b83398181016040528101906100319190610a59565b5f8261ffff1667ffffffffffffffff8111156100505761004f610ad0565b5b60405190808252806020026020018201604052801561008957816020015b61007661091b565b81526020019060019003908161006e5790505b5090505f5b8361ffff16811015610487575f806100ae8988878b6104cc60201b60201c565b915091505f808a73ffffffffffffffffffffffffffffffffffffffff1663f30dba93856040518263ffffffff1660e01b81526004016100ed9190610b0c565b61010060405180830381865afa158015610109573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061012d9190610c6c565b505050505050915091507ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761860020b8460020b121561025c577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761893508286868151811061019c5761019b610d1d565b5b60200260200101515f019015159081151581525050838686815181106101c5576101c4610d1d565b5b60200260200101516020019060020b908160020b81525050818686815181106101f1576101f0610d1d565b5b6020026020010151604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508086868151811061023b5761023a610d1d565b5b602002602001015160600190600f0b9081600f0b8152505050505050610487565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2761861028690610d77565b60020b8460020b131561038a577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff276189350828686815181106102ca576102c9610d1d565b5b60200260200101515f019015159081151581525050838686815181106102f3576102f2610d1d565b5b60200260200101516020019060020b908160020b815250508186868151811061031f5761031e610d1d565b5b6020026020010151604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508086868151811061036957610368610d1d565b5b602002602001015160600190600f0b9081600f0b8152505050505050610487565b8286868151811061039e5761039d610d1d565b5b60200260200101515f019015159081151581525050838686815181106103c7576103c6610d1d565b5b60200260200101516020019060020b908160020b81525050818686815181106103f3576103f2610d1d565b5b6020026020010151604001906fffffffffffffffffffffffffffffffff1690816fffffffffffffffffffffffffffffffff16815250508086868151811061043d5761043c610d1d565b5b602002602001015160600190600f0b9081600f0b81525050848061046090610dbd565b9550508961046e578361047c565b60018461047b9190610e04565b5b98505050505061008e565b5f60405180604001604052808481526020014381525090505f816040516020016104b19190610fde565b60405160208183030381529060405290506020810180590381f35b5f805f8460020b8660020b816104e5576104e4610ffe565b5b0590505f8660020b12801561051357505f8560020b8760020b8161050c5761050b610ffe565b5b0760020b14155b15610522578080600190039150505b831561060d575f80610539836106fc60201b60201c565b915091505f8160ff166001901b60018360ff166001901b030190505f818b73ffffffffffffffffffffffffffffffffffffffff16635339c296866040518263ffffffff1660e01b815260040161058f9190611046565b602060405180830381865afa1580156105aa573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105ce919061105f565b1690505f8114159550856105e957888360ff16860302610602565b886105f98261072560201b60201c565b840360ff168603025b9650505050506106f2565b5f80610621600184016106fc60201b60201c565b915091505f60018260ff166001901b031990505f818b73ffffffffffffffffffffffffffffffffffffffff16635339c296866040518263ffffffff1660e01b815260040161066f9190611046565b602060405180830381865afa15801561068a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ae919061105f565b1690505f8114159550856106cf57888360ff0360ff166001870101026106eb565b88836106e0836107fe60201b60201c565b0360ff166001870101025b9650505050505b5094509492505050565b5f8060088360020b901d91506101008360020b8161071d5761071c610ffe565b5b079050915091565b5f808211610731575f80fd5b700100000000000000000000000000000000821061075757608082901c91506080810190505b68010000000000000000821061077557604082901c91506040810190505b640100000000821061078f57602082901c91506020810190505b6201000082106107a757601082901c91506010810190505b61010082106107be57600882901c91506008810190505b601082106107d457600482901c91506004810190505b600482106107ea57600282901c91506002810190505b600282106107f9576001810190505b919050565b5f80821161080a575f80fd5b60ff90505f6fffffffffffffffffffffffffffffffff8016831611156108355760808103905061083d565b608082901c91505b5f67ffffffffffffffff80168316111561085c57604081039050610864565b604082901c91505b5f63ffffffff80168316111561087f57602081039050610887565b602082901c91505b5f61ffff8016831611156108a0576010810390506108a8565b601082901c91505b5f60ff8016831611156108c0576008810390506108c8565b600882901c91505b5f600f831611156108de576004810390506108e6565b600482901c91505b5f6003831611156108fc57600281039050610904565b600282901c91505b5f600183161115610916576001810390505b919050565b60405180608001604052805f151581526020015f60020b81526020015f6fffffffffffffffffffffffffffffffff1681526020015f600f0b81525090565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6109868261095d565b9050919050565b6109968161097c565b81146109a0575f80fd5b50565b5f815190506109b18161098d565b92915050565b5f8115159050919050565b6109cb816109b7565b81146109d5575f80fd5b50565b5f815190506109e6816109c2565b92915050565b5f8160020b9050919050565b610a01816109ec565b8114610a0b575f80fd5b50565b5f81519050610a1c816109f8565b92915050565b5f61ffff82169050919050565b610a3881610a22565b8114610a42575f80fd5b50565b5f81519050610a5381610a2f565b92915050565b5f805f805f60a08688031215610a7257610a71610959565b5b5f610a7f888289016109a3565b9550506020610a90888289016109d8565b9450506040610aa188828901610a0e565b9350506060610ab288828901610a45565b9250506080610ac388828901610a0e565b9150509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610b06816109ec565b82525050565b5f602082019050610b1f5f830184610afd565b92915050565b5f6fffffffffffffffffffffffffffffffff82169050919050565b610b4981610b25565b8114610b53575f80fd5b50565b5f81519050610b6481610b40565b92915050565b5f81600f0b9050919050565b610b7f81610b6a565b8114610b89575f80fd5b50565b5f81519050610b9a81610b76565b92915050565b5f819050919050565b610bb281610ba0565b8114610bbc575f80fd5b50565b5f81519050610bcd81610ba9565b92915050565b5f8160060b9050919050565b610be881610bd3565b8114610bf2575f80fd5b50565b5f81519050610c0381610bdf565b92915050565b610c128161095d565b8114610c1c575f80fd5b50565b5f81519050610c2d81610c09565b92915050565b5f63ffffffff82169050919050565b610c4b81610c33565b8114610c55575f80fd5b50565b5f81519050610c6681610c42565b92915050565b5f805f805f805f80610100898b031215610c8957610c88610959565b5b5f610c968b828c01610b56565b9850506020610ca78b828c01610b8c565b9750506040610cb88b828c01610bbf565b9650506060610cc98b828c01610bbf565b9550506080610cda8b828c01610bf5565b94505060a0610ceb8b828c01610c1f565b93505060c0610cfc8b828c01610c58565b92505060e0610d0d8b828c016109d8565b9150509295985092959890939650565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d81826109ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008203610db357610db2610d4a565b5b815f039050919050565b5f610dc782610ba0565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610df957610df8610d4a565b5b600182019050919050565b5f610e0e826109ec565b9150610e19836109ec565b92508282039050627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082121715610e5857610e57610d4a565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b610e90816109b7565b82525050565b610e9f816109ec565b82525050565b610eae81610b25565b82525050565b610ebd81610b6a565b82525050565b608082015f820151610ed75f850182610e87565b506020820151610eea6020850182610e96565b506040820151610efd6040850182610ea5565b506060820151610f106060850182610eb4565b50505050565b5f610f218383610ec3565b60808301905092915050565b5f602082019050919050565b5f610f4382610e5e565b610f4d8185610e68565b9350610f5883610e78565b805f5b83811015610f88578151610f6f8882610f16565b9750610f7a83610f2d565b925050600181019050610f5b565b5085935050505092915050565b610f9e81610ba0565b82525050565b5f604083015f8301518482035f860152610fbe8282610f39565b9150506020830151610fd36020860182610f95565b508091505092915050565b5f6020820190508181035f830152610ff68184610fa4565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f8160010b9050919050565b6110408161102b565b82525050565b5f6020820190506110595f830184611037565b92915050565b5f6020828403121561107457611073610959565b5b5f61108184828501610bbf565b9150509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x10\x8B8\x03\x80a\x10\x8B\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\nYV[_\x82a\xFF\xFF\x16g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0PWa\0Oa\n\xD0V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x89W\x81` \x01[a\0va\t\x1BV[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0nW\x90P[P\x90P_[\x83a\xFF\xFF\x16\x81\x10\x15a\x04\x87W_\x80a\0\xAE\x89\x88\x87\x8Ba\x04\xCC` \x1B` \x1CV[\x91P\x91P_\x80\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xF3\r\xBA\x93\x85`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\0\xED\x91\x90a\x0B\x0CV[a\x01\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\tW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01-\x91\x90a\x0ClV[PPPPPP\x91P\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF2v\x18`\x02\x0B\x84`\x02\x0B\x12\x15a\x02\\W\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF2v\x18\x93P\x82\x86\x86\x81Q\x81\x10a\x01\x9CWa\x01\x9Ba\r\x1DV[[` \x02` \x01\x01Q_\x01\x90\x15\x15\x90\x81\x15\x15\x81RPP\x83\x86\x86\x81Q\x81\x10a\x01\xC5Wa\x01\xC4a\r\x1DV[[` \x02` \x01\x01Q` \x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x81\x86\x86\x81Q\x81\x10a\x01\xF1Wa\x01\xF0a\r\x1DV[[` \x02` \x01\x01Q`@\x01\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80\x86\x86\x81Q\x81\x10a\x02;Wa\x02:a\r\x1DV[[` \x02` \x01\x01Q``\x01\x90`\x0F\x0B\x90\x81`\x0F\x0B\x81RPPPPPPa\x04\x87V[\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF2v\x18a\x02\x86\x90a\rwV[`\x02\x0B\x84`\x02\x0B\x13\x15a\x03\x8AW\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xF2v\x18\x93P\x82\x86\x86\x81Q\x81\x10a\x02\xCAWa\x02\xC9a\r\x1DV[[` \x02` \x01\x01Q_\x01\x90\x15\x15\x90\x81\x15\x15\x81RPP\x83\x86\x86\x81Q\x81\x10a\x02\xF3Wa\x02\xF2a\r\x1DV[[` \x02` \x01\x01Q` \x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x81\x86\x86\x81Q\x81\x10a\x03\x1FWa\x03\x1Ea\r\x1DV[[` \x02` \x01\x01Q`@\x01\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80\x86\x86\x81Q\x81\x10a\x03iWa\x03ha\r\x1DV[[` \x02` \x01\x01Q``\x01\x90`\x0F\x0B\x90\x81`\x0F\x0B\x81RPPPPPPa\x04\x87V[\x82\x86\x86\x81Q\x81\x10a\x03\x9EWa\x03\x9Da\r\x1DV[[` \x02` \x01\x01Q_\x01\x90\x15\x15\x90\x81\x15\x15\x81RPP\x83\x86\x86\x81Q\x81\x10a\x03\xC7Wa\x03\xC6a\r\x1DV[[` \x02` \x01\x01Q` \x01\x90`\x02\x0B\x90\x81`\x02\x0B\x81RPP\x81\x86\x86\x81Q\x81\x10a\x03\xF3Wa\x03\xF2a\r\x1DV[[` \x02` \x01\x01Q`@\x01\x90o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x80\x86\x86\x81Q\x81\x10a\x04=Wa\x04<a\r\x1DV[[` \x02` \x01\x01Q``\x01\x90`\x0F\x0B\x90\x81`\x0F\x0B\x81RPP\x84\x80a\x04`\x90a\r\xBDV[\x95PP\x89a\x04nW\x83a\x04|V[`\x01\x84a\x04{\x91\x90a\x0E\x04V[[\x98PPPPPa\0\x8EV[_`@Q\x80`@\x01`@R\x80\x84\x81R` \x01C\x81RP\x90P_\x81`@Q` \x01a\x04\xB1\x91\x90a\x0F\xDEV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80_\x84`\x02\x0B\x86`\x02\x0B\x81a\x04\xE5Wa\x04\xE4a\x0F\xFEV[[\x05\x90P_\x86`\x02\x0B\x12\x80\x15a\x05\x13WP_\x85`\x02\x0B\x87`\x02\x0B\x81a\x05\x0CWa\x05\x0Ba\x0F\xFEV[[\x07`\x02\x0B\x14\x15[\x15a\x05\"W\x80\x80`\x01\x90\x03\x91PP[\x83\x15a\x06\rW_\x80a\x059\x83a\x06\xFC` \x1B` \x1CV[\x91P\x91P_\x81`\xFF\x16`\x01\x90\x1B`\x01\x83`\xFF\x16`\x01\x90\x1B\x03\x01\x90P_\x81\x8Bs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cS9\xC2\x96\x86`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05\x8F\x91\x90a\x10FV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\xAAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xCE\x91\x90a\x10_V[\x16\x90P_\x81\x14\x15\x95P\x85a\x05\xE9W\x88\x83`\xFF\x16\x86\x03\x02a\x06\x02V[\x88a\x05\xF9\x82a\x07%` \x1B` \x1CV[\x84\x03`\xFF\x16\x86\x03\x02[\x96PPPPPa\x06\xF2V[_\x80a\x06!`\x01\x84\x01a\x06\xFC` \x1B` \x1CV[\x91P\x91P_`\x01\x82`\xFF\x16`\x01\x90\x1B\x03\x19\x90P_\x81\x8Bs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cS9\xC2\x96\x86`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06o\x91\x90a\x10FV[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06\x8AW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\xAE\x91\x90a\x10_V[\x16\x90P_\x81\x14\x15\x95P\x85a\x06\xCFW\x88\x83`\xFF\x03`\xFF\x16`\x01\x87\x01\x01\x02a\x06\xEBV[\x88\x83a\x06\xE0\x83a\x07\xFE` \x1B` \x1CV[\x03`\xFF\x16`\x01\x87\x01\x01\x02[\x96PPPPP[P\x94P\x94\x92PPPV[_\x80`\x08\x83`\x02\x0B\x90\x1D\x91Pa\x01\0\x83`\x02\x0B\x81a\x07\x1DWa\x07\x1Ca\x0F\xFEV[[\x07\x90P\x91P\x91V[_\x80\x82\x11a\x071W_\x80\xFD[p\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x82\x10a\x07WW`\x80\x82\x90\x1C\x91P`\x80\x81\x01\x90P[h\x01\0\0\0\0\0\0\0\0\x82\x10a\x07uW`@\x82\x90\x1C\x91P`@\x81\x01\x90P[d\x01\0\0\0\0\x82\x10a\x07\x8FW` \x82\x90\x1C\x91P` \x81\x01\x90P[b\x01\0\0\x82\x10a\x07\xA7W`\x10\x82\x90\x1C\x91P`\x10\x81\x01\x90P[a\x01\0\x82\x10a\x07\xBEW`\x08\x82\x90\x1C\x91P`\x08\x81\x01\x90P[`\x10\x82\x10a\x07\xD4W`\x04\x82\x90\x1C\x91P`\x04\x81\x01\x90P[`\x04\x82\x10a\x07\xEAW`\x02\x82\x90\x1C\x91P`\x02\x81\x01\x90P[`\x02\x82\x10a\x07\xF9W`\x01\x81\x01\x90P[\x91\x90PV[_\x80\x82\x11a\x08\nW_\x80\xFD[`\xFF\x90P_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x83\x16\x11\x15a\x085W`\x80\x81\x03\x90Pa\x08=V[`\x80\x82\x90\x1C\x91P[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x16\x83\x16\x11\x15a\x08\\W`@\x81\x03\x90Pa\x08dV[`@\x82\x90\x1C\x91P[_c\xFF\xFF\xFF\xFF\x80\x16\x83\x16\x11\x15a\x08\x7FW` \x81\x03\x90Pa\x08\x87V[` \x82\x90\x1C\x91P[_a\xFF\xFF\x80\x16\x83\x16\x11\x15a\x08\xA0W`\x10\x81\x03\x90Pa\x08\xA8V[`\x10\x82\x90\x1C\x91P[_`\xFF\x80\x16\x83\x16\x11\x15a\x08\xC0W`\x08\x81\x03\x90Pa\x08\xC8V[`\x08\x82\x90\x1C\x91P[_`\x0F\x83\x16\x11\x15a\x08\xDEW`\x04\x81\x03\x90Pa\x08\xE6V[`\x04\x82\x90\x1C\x91P[_`\x03\x83\x16\x11\x15a\x08\xFCW`\x02\x81\x03\x90Pa\t\x04V[`\x02\x82\x90\x1C\x91P[_`\x01\x83\x16\x11\x15a\t\x16W`\x01\x81\x03\x90P[\x91\x90PV[`@Q\x80`\x80\x01`@R\x80_\x15\x15\x81R` \x01_`\x02\x0B\x81R` \x01_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\x0F\x0B\x81RP\x90V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\t\x86\x82a\t]V[\x90P\x91\x90PV[a\t\x96\x81a\t|V[\x81\x14a\t\xA0W_\x80\xFD[PV[_\x81Q\x90Pa\t\xB1\x81a\t\x8DV[\x92\x91PPV[_\x81\x15\x15\x90P\x91\x90PV[a\t\xCB\x81a\t\xB7V[\x81\x14a\t\xD5W_\x80\xFD[PV[_\x81Q\x90Pa\t\xE6\x81a\t\xC2V[\x92\x91PPV[_\x81`\x02\x0B\x90P\x91\x90PV[a\n\x01\x81a\t\xECV[\x81\x14a\n\x0BW_\x80\xFD[PV[_\x81Q\x90Pa\n\x1C\x81a\t\xF8V[\x92\x91PPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[a\n8\x81a\n\"V[\x81\x14a\nBW_\x80\xFD[PV[_\x81Q\x90Pa\nS\x81a\n/V[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\nrWa\nqa\tYV[[_a\n\x7F\x88\x82\x89\x01a\t\xA3V[\x95PP` a\n\x90\x88\x82\x89\x01a\t\xD8V[\x94PP`@a\n\xA1\x88\x82\x89\x01a\n\x0EV[\x93PP``a\n\xB2\x88\x82\x89\x01a\nEV[\x92PP`\x80a\n\xC3\x88\x82\x89\x01a\n\x0EV[\x91PP\x92\x95P\x92\x95\x90\x93PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x0B\x06\x81a\t\xECV[\x82RPPV[_` \x82\x01\x90Pa\x0B\x1F_\x83\x01\x84a\n\xFDV[\x92\x91PPV[_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0BI\x81a\x0B%V[\x81\x14a\x0BSW_\x80\xFD[PV[_\x81Q\x90Pa\x0Bd\x81a\x0B@V[\x92\x91PPV[_\x81`\x0F\x0B\x90P\x91\x90PV[a\x0B\x7F\x81a\x0BjV[\x81\x14a\x0B\x89W_\x80\xFD[PV[_\x81Q\x90Pa\x0B\x9A\x81a\x0BvV[\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0B\xB2\x81a\x0B\xA0V[\x81\x14a\x0B\xBCW_\x80\xFD[PV[_\x81Q\x90Pa\x0B\xCD\x81a\x0B\xA9V[\x92\x91PPV[_\x81`\x06\x0B\x90P\x91\x90PV[a\x0B\xE8\x81a\x0B\xD3V[\x81\x14a\x0B\xF2W_\x80\xFD[PV[_\x81Q\x90Pa\x0C\x03\x81a\x0B\xDFV[\x92\x91PPV[a\x0C\x12\x81a\t]V[\x81\x14a\x0C\x1CW_\x80\xFD[PV[_\x81Q\x90Pa\x0C-\x81a\x0C\tV[\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x0CK\x81a\x0C3V[\x81\x14a\x0CUW_\x80\xFD[PV[_\x81Q\x90Pa\x0Cf\x81a\x0CBV[\x92\x91PPV[_\x80_\x80_\x80_\x80a\x01\0\x89\x8B\x03\x12\x15a\x0C\x89Wa\x0C\x88a\tYV[[_a\x0C\x96\x8B\x82\x8C\x01a\x0BVV[\x98PP` a\x0C\xA7\x8B\x82\x8C\x01a\x0B\x8CV[\x97PP`@a\x0C\xB8\x8B\x82\x8C\x01a\x0B\xBFV[\x96PP``a\x0C\xC9\x8B\x82\x8C\x01a\x0B\xBFV[\x95PP`\x80a\x0C\xDA\x8B\x82\x8C\x01a\x0B\xF5V[\x94PP`\xA0a\x0C\xEB\x8B\x82\x8C\x01a\x0C\x1FV[\x93PP`\xC0a\x0C\xFC\x8B\x82\x8C\x01a\x0CXV[\x92PP`\xE0a\r\r\x8B\x82\x8C\x01a\t\xD8V[\x91PP\x92\x95\x98P\x92\x95\x98\x90\x93\x96PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\r\x81\x82a\t\xECV[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x82\x03a\r\xB3Wa\r\xB2a\rJV[[\x81_\x03\x90P\x91\x90PV[_a\r\xC7\x82a\x0B\xA0V[\x91P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x03a\r\xF9Wa\r\xF8a\rJV[[`\x01\x82\x01\x90P\x91\x90PV[_a\x0E\x0E\x82a\t\xECV[\x91Pa\x0E\x19\x83a\t\xECV[\x92P\x82\x82\x03\x90Pb\x7F\xFF\xFF\x81\x13\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\0\0\x82\x12\x17\x15a\x0EXWa\x0EWa\rJV[[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x0E\x90\x81a\t\xB7V[\x82RPPV[a\x0E\x9F\x81a\t\xECV[\x82RPPV[a\x0E\xAE\x81a\x0B%V[\x82RPPV[a\x0E\xBD\x81a\x0BjV[\x82RPPV[`\x80\x82\x01_\x82\x01Qa\x0E\xD7_\x85\x01\x82a\x0E\x87V[P` \x82\x01Qa\x0E\xEA` \x85\x01\x82a\x0E\x96V[P`@\x82\x01Qa\x0E\xFD`@\x85\x01\x82a\x0E\xA5V[P``\x82\x01Qa\x0F\x10``\x85\x01\x82a\x0E\xB4V[PPPPV[_a\x0F!\x83\x83a\x0E\xC3V[`\x80\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x0FC\x82a\x0E^V[a\x0FM\x81\x85a\x0EhV[\x93Pa\x0FX\x83a\x0ExV[\x80_[\x83\x81\x10\x15a\x0F\x88W\x81Qa\x0Fo\x88\x82a\x0F\x16V[\x97Pa\x0Fz\x83a\x0F-V[\x92PP`\x01\x81\x01\x90Pa\x0F[V[P\x85\x93PPPP\x92\x91PPV[a\x0F\x9E\x81a\x0B\xA0V[\x82RPPV[_`@\x83\x01_\x83\x01Q\x84\x82\x03_\x86\x01Ra\x0F\xBE\x82\x82a\x0F9V[\x91PP` \x83\x01Qa\x0F\xD3` \x86\x01\x82a\x0F\x95V[P\x80\x91PP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x0F\xF6\x81\x84a\x0F\xA4V[\x90P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_\x81`\x01\x0B\x90P\x91\x90PV[a\x10@\x81a\x10+V[\x82RPPV[_` \x82\x01\x90Pa\x10Y_\x83\x01\x84a\x107V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x10tWa\x10sa\tYV[[_a\x10\x81\x84\x82\x85\x01a\x0B\xBFV[\x91PP\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea26469706673582212205c798aff8aa3ff8caf703604318e92232132d77fc2831f5b63022b6b371c0c8864736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 \\y\x8A\xFF\x8A\xA3\xFF\x8C\xAFp6\x041\x8E\x92#!2\xD7\x7F\xC2\x83\x1F[c\x02+k7\x1C\x0C\x88dsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address pool, bool zeroForOne, int24 currentTick, uint16 numTicks, int24 tickSpacing);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub pool: alloy::sol_types::private::Address,
        pub zeroForOne: bool,
        pub currentTick: alloy::sol_types::private::primitives::aliases::I24,
        pub numTicks: u16,
        pub tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<16>,
                alloy::sol_types::sol_data::Int<24>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                bool,
                alloy::sol_types::private::primitives::aliases::I24,
                u16,
                alloy::sol_types::private::primitives::aliases::I24,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.pool,
                        value.zeroForOne,
                        value.currentTick,
                        value.numTicks,
                        value.tickSpacing,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pool: tuple.0,
                        zeroForOne: tuple.1,
                        currentTick: tuple.2,
                        numTicks: tuple.3,
                        tickSpacing: tuple.4,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
                alloy::sol_types::sol_data::Int<24>,
                alloy::sol_types::sol_data::Uint<16>,
                alloy::sol_types::sol_data::Int<24>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.pool,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.zeroForOne,
                    ),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.currentTick),
                    <alloy::sol_types::sol_data::Uint<
                        16,
                    > as alloy_sol_types::SolType>::tokenize(&self.numTicks),
                    <alloy::sol_types::sol_data::Int<
                        24,
                    > as alloy_sol_types::SolType>::tokenize(&self.tickSpacing),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetUniswapV3TickDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetUniswapV3TickDataBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetUniswapV3TickDataBatchRequestInstance<T, P, N> {
        GetUniswapV3TickDataBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pool: alloy::sol_types::private::Address,
        zeroForOne: bool,
        currentTick: alloy::sol_types::private::primitives::aliases::I24,
        numTicks: u16,
        tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<
            GetUniswapV3TickDataBatchRequestInstance<T, P, N>,
        >,
    > {
        GetUniswapV3TickDataBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy(provider, pool, zeroForOne, currentTick, numTicks, tickSpacing)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pool: alloy::sol_types::private::Address,
        zeroForOne: bool,
        currentTick: alloy::sol_types::private::primitives::aliases::I24,
        numTicks: u16,
        tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetUniswapV3TickDataBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, pool, zeroForOne, currentTick, numTicks, tickSpacing)
    }
    /**A [`GetUniswapV3TickDataBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetUniswapV3TickDataBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetUniswapV3TickDataBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for GetUniswapV3TickDataBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetUniswapV3TickDataBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV3TickDataBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetUniswapV3TickDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetUniswapV3TickDataBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pool: alloy::sol_types::private::Address,
            zeroForOne: bool,
            currentTick: alloy::sol_types::private::primitives::aliases::I24,
            numTicks: u16,
            tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::Result<GetUniswapV3TickDataBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                pool,
                zeroForOne,
                currentTick,
                numTicks,
                tickSpacing,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pool: alloy::sol_types::private::Address,
            zeroForOne: bool,
            currentTick: alloy::sol_types::private::primitives::aliases::I24,
            numTicks: u16,
            tickSpacing: alloy::sol_types::private::primitives::aliases::I24,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            pool,
                            zeroForOne,
                            currentTick,
                            numTicks,
                            tickSpacing,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > GetUniswapV3TickDataBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> GetUniswapV3TickDataBatchRequestInstance<T, P, N> {
            GetUniswapV3TickDataBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV3TickDataBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetUniswapV3TickDataBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
