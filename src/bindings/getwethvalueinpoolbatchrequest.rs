/**

Generated by the following Solidity interface...
```solidity
interface GetWethValueInPoolBatchRequest {
    constructor(address[] pools, address[] dexes, bool[] dexIsUniV3, address weth, uint256 wethInPoolThreshold);

    function tokenToWethPrices(address) external view returns (uint128);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "pools",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "dexes",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "dexIsUniV3",
        "type": "bool[]",
        "internalType": "bool[]"
      },
      {
        "name": "weth",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "wethInPoolThreshold",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "tokenToWethPrices",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint128",
        "internalType": "uint128"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style,
    clippy::empty_structs_with_brackets
)]
pub mod GetWethValueInPoolBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b506040516123a23803806123a283398181016040528101906100319190611983565b5f855167ffffffffffffffff81111561004d5761004c6116c5565b5b60405190808252806020026020018201604052801561007b5781602001602082028036833780820191505090505b5090505f5b865181101561036d576100b287828151811061009f5761009e611a4e565b5b602002602001015161039b60201b60201c565b156100dc575f8282815181106100cb576100ca611a4e565b5b602002602001018181525050610362565b6101058782815181106100f2576100f1611a4e565b5b602002602001015161044760201b60201c565b610340575f87828151811061011d5761011c611a4e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101919190611a7b565b90505f8883815181106101a7576101a6611a4e565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101f7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061021b9190611a7b565b905061022c8261044760201b60201c565b15801561024557506102438161044760201b60201c565b155b15610318575f806102778b868151811061026257610261611a4e565b5b6020026020010151858561047860201b60201c565b915091505f610290858a858e8e8d61052560201b60201c565b90505f6102a7858b858f8f8e61052560201b60201c565b90505f82141580156102b957505f8114155b156102ee5780826102ca9190611ad3565b8888815181106102dd576102dc611a4e565b5b60200260200101818152505061030f565b5f88888151811061030257610301611a4e565b5b6020026020010181815250505b50505050610339565b5f84848151811061032c5761032b611a4e565b5b6020026020010181815250505b5050610361565b5f82828151811061035457610353611a4e565b5b6020026020010181815250505b5b806001019050610080565b505f816040516020016103809190611bbd565b60405160208183030381529060405290506020810180590381f35b5f6103ab826106b460201b60201c565b61043e575f8273ffffffffffffffffffffffffffffffffffffffff16631a6865026040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061041d9190611c22565b6fffffffffffffffffffffffffffffffff160361043d5760019050610442565b5b5f90505b919050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b0361046f5760019050610473565b5f90505b919050565b5f805f8061048d8787876106ee60201b60201c565b9150915061051782828773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16106104cf57876104d1565b885b8873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff161061050a578961050c565b885b61088360201b60201c565b935093505050935093915050565b5f8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1603610561578490506106aa565b5f805f8973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f9054906101000a90046fffffffffffffffffffffffffffffffff1690506001816fffffffffffffffffffffffffffffffff16036105df575f9150506106aa565b5f816fffffffffffffffffffffffffffffffff161461061057610608818761098460201b60201c565b9150506106aa565b5f5b85518110156106a4575f6106638a8a89858151811061063457610633611a4e565b5b602002602001015189868151811061064f5761064e611a4e565b5b602002602001015189610ad060201b60201c565b90505f816fffffffffffffffffffffffffffffffff16146106985761068e818961098460201b60201c565b93505050506106aa565b50806001019050610612565b505f9150505b9695505050505050565b5f807fddca3f43000000000000000000000000000000000000000000000000000000005f525f8060045f80875af190508015915050919050565b5f808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161061072a57828461072d565b83835b80945081955050505f80610746876106b460201b60201c565b156107ec575f808873ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa158015610796573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107ba9190611cc9565b5091509150816dffffffffffffffffffffffffffff169350806dffffffffffffffffffffffffffff1692505050610873565b5f806107fe888a610e5860201b60201c565b915091505f80610814898c610e5860201b60201c565b915091508280156108225750805b1561086e578873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff1610156108665783955081945061086d565b8394508195505b5b505050505b8181935093505050935093915050565b5f805f8061089686610fa460201b60201c565b915091505f806108ab87610fa460201b60201c565b915091508280156108b95750805b156109775760128460ff1611156108f3576012846108d79190611d25565b600a6108e39190611e88565b8a6108ee9190611eff565b610918565b8360126109009190611d25565b600a61090c9190611e88565b8a6109179190611f2f565b5b955060128260ff16111561094f576012826109339190611d25565b600a61093f9190611e88565b8961094a9190611eff565b610974565b81601261095c9190611d25565b600a6109689190611e88565b896109739190611f2f565b5b94505b5050505094509492505050565b5f808214806109a457505f836fffffffffffffffffffffffffffffffff16145b156109b1575f9050610aca565b5f60406fffffffffffffffffffffffffffffffff8416856fffffffffffffffffffffffffffffffff1602901c90505f608084901c856fffffffffffffffffffffffffffffffff1602905077ffffffffffffffffffffffffffffffffffffffffffffffff811115610a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4d90611fca565b60405180910390fd5b604081901b9050817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03811115610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab990612032565b60405180910390fd5b818101925050505b92915050565b5f8215610c9f575f60405180606001604052806101f461ffff168152602001610bb861ffff16815260200161271061ffff1681525090505f5b6003811015610c98575f8673ffffffffffffffffffffffffffffffffffffffff16631698ee828973ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff1610610b685789610b6a565b8a5b8a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff1610610ba3578b610ba5565b8a5b868660038110610bb857610bb7611a4e565b5b60200201516040518463ffffffff1660e01b8152600401610bdb939291906120b3565b602060405180830381865afa158015610bf6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c1a9190611a7b565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610c8c575f610c63878b8b858a61110860201b60201c565b90505f816fffffffffffffffffffffffffffffffff1614610c8a5780945050505050610e4f565b505b50806001019050610b09565b5050610dd8565b5f8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161090505f8573ffffffffffffffffffffffffffffffffffffffff1663e6a4390583610cf95788610cfb565b895b84610d06578a610d08565b895b6040518363ffffffff1660e01b8152600401610d259291906120e8565b602060405180830381865afa158015610d40573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d649190611a7b565b90505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dd5575f610dad868a8a858961110860201b60201c565b90505f816fffffffffffffffffffffffffffffffff1614610dd357809350505050610e4f565b505b50505b60015f808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505f90505b95945050505050565b5f805f808573ffffffffffffffffffffffffffffffffffffffff1685604051602401610e84919061210f565b6040516020818303038152906040527f70a08231000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610f0e919061217a565b5f604051808303815f865af19150503d805f8114610f47576040519150601f19603f3d011682016040523d82523d5f602084013e610f4c565b606091505b50915091508115610f94575f6020825103610f865781806020019051810190610f759190612190565b905080600194509450505050610f9d565b5f8094509450505050610f9d565b5f809350935050505b9250929050565b5f805f808473ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611052919061217a565b5f604051808303815f8787f1925050503d805f811461108c576040519150601f19603f3d011682016040523d82523d5f602084013e611091565b606091505b509150915081156110fa575f60208251036110ec57818060200190518101906110ba9190612190565b90505f8114806110ca575060ff81115b156110dd575f8094509450505050611103565b80600194509450505050611103565b5f8094509450505050611103565b5f809350935050505b915091565b5f808473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16109050866111ba575f8061115386898961047860201b60201c565b9150915082156111755784811015611170575f93505050506112be565b611189565b84821015611188575f93505050506112be565b5b6111b1836111975782611199565b815b846111a457826111a6565b835b6112c760201b60201c565b9350505061124a565b5f8473ffffffffffffffffffffffffffffffffffffffff16633850c7bd6040518163ffffffff1660e01b815260040160e060405180830381865afa158015611204573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611228919061226f565b5050505050509050604061124482848a8a6114a960201b60201c565b901c9250505b815f808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f6101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550505b95945050505050565b5f8082036112d7575f90506114a3565b5f77ffffffffffffffffffffffffffffffffffffffffffffffff84116113135782604085901b8161130b5761130a611ed2565b5b04905061147d565b5f60c090505f60c086901c9050640100000000811061133a57602081901c90506020820191505b62010000811061135257601081901c90506010820191505b610100811061136957600881901c90506008820191505b6010811061137f57600481901c90506004820191505b6004811061139557600281901c90506002820191505b600281106113a4576001820191505b600160bf830360018703901c018260ff0387901b816113c6576113c5611ed2565b5b0492506fffffffffffffffffffffffffffffffff8311156113ec575f93505050506114a3565b5f608086901c840290505f6fffffffffffffffffffffffffffffffff8716850290505f60c089901c90505f60408a901b90508281101561142d576001820391505b8281039050608084901b925082811015611448576001820391505b8281039050608084901c82146114615761146061230c565b5b88818161147157611470611ed2565b5b04870196505050505050505b6fffffffffffffffffffffffffffffffff81111561149e575f9150506114a3565b809150505b92915050565b5f808573ffffffffffffffffffffffffffffffffffffffff16036114cf575f9050611698565b5f806114e085610fa460201b60201c565b915091505f806114f586610fa460201b60201c565b915091508280156115035750805b611513575f945050505050611698565b5f82850390505f80825f0b1261154a578160ff16600a0a60028c73ffffffffffffffffffffffffffffffffffffffff160a0261157d565b815f0360ff16600a0a60028c73ffffffffffffffffffffffffffffffffffffffff160a8161157b5761157a611ed2565b5b045b90505f8a6115dc576c010000000000000000000000006080816115a3576115a2611ed2565b5b0482901b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff816115d6576115d5611ed2565b5b046115ff565b6c010000000000000000000000006080816115fa576115f9611ed2565b5b0482901b5b90508a61160c578061162b565b6c01000000000000000000000000818161162957611628611ed2565b5b045b97507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff881115611690576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168790612383565b60405180910390fd5b505050505050505b949350505050565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6116fb826116b5565b810181811067ffffffffffffffff8211171561171a576117196116c5565b5b80604052505050565b5f61172c6116a0565b905061173882826116f2565b919050565b5f67ffffffffffffffff821115611757576117566116c5565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6117958261176c565b9050919050565b6117a58161178b565b81146117af575f80fd5b50565b5f815190506117c08161179c565b92915050565b5f6117d86117d38461173d565b611723565b905080838252602082019050602084028301858111156117fb576117fa611768565b5b835b81811015611824578061181088826117b2565b8452602084019350506020810190506117fd565b5050509392505050565b5f82601f830112611842576118416116b1565b5b81516118528482602086016117c6565b91505092915050565b5f67ffffffffffffffff821115611875576118746116c5565b5b602082029050602081019050919050565b5f8115159050919050565b61189a81611886565b81146118a4575f80fd5b50565b5f815190506118b581611891565b92915050565b5f6118cd6118c88461185b565b611723565b905080838252602082019050602084028301858111156118f0576118ef611768565b5b835b81811015611919578061190588826118a7565b8452602084019350506020810190506118f2565b5050509392505050565b5f82601f830112611937576119366116b1565b5b81516119478482602086016118bb565b91505092915050565b5f819050919050565b61196281611950565b811461196c575f80fd5b50565b5f8151905061197d81611959565b92915050565b5f805f805f60a0868803121561199c5761199b6116a9565b5b5f86015167ffffffffffffffff8111156119b9576119b86116ad565b5b6119c58882890161182e565b955050602086015167ffffffffffffffff8111156119e6576119e56116ad565b5b6119f28882890161182e565b945050604086015167ffffffffffffffff811115611a1357611a126116ad565b5b611a1f88828901611923565b9350506060611a30888289016117b2565b9250506080611a418882890161196f565b9150509295509295909350565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215611a9057611a8f6116a9565b5b5f611a9d848285016117b2565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f611add82611950565b9150611ae883611950565b9250828201905080821115611b0057611aff611aa6565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b611b3881611950565b82525050565b5f611b498383611b2f565b60208301905092915050565b5f602082019050919050565b5f611b6b82611b06565b611b758185611b10565b9350611b8083611b20565b805f5b83811015611bb0578151611b978882611b3e565b9750611ba283611b55565b925050600181019050611b83565b5085935050505092915050565b5f6020820190508181035f830152611bd58184611b61565b905092915050565b5f6fffffffffffffffffffffffffffffffff82169050919050565b611c0181611bdd565b8114611c0b575f80fd5b50565b5f81519050611c1c81611bf8565b92915050565b5f60208284031215611c3757611c366116a9565b5b5f611c4484828501611c0e565b91505092915050565b5f6dffffffffffffffffffffffffffff82169050919050565b611c6f81611c4d565b8114611c79575f80fd5b50565b5f81519050611c8a81611c66565b92915050565b5f63ffffffff82169050919050565b611ca881611c90565b8114611cb2575f80fd5b50565b5f81519050611cc381611c9f565b92915050565b5f805f60608486031215611ce057611cdf6116a9565b5b5f611ced86828701611c7c565b9350506020611cfe86828701611c7c565b9250506040611d0f86828701611cb5565b9150509250925092565b5f60ff82169050919050565b5f611d2f82611d19565b9150611d3a83611d19565b9250828203905060ff811115611d5357611d52611aa6565b5b92915050565b5f8160011c9050919050565b5f808291508390505b6001851115611dae57808604811115611d8a57611d89611aa6565b5b6001851615611d995780820291505b8081029050611da785611d59565b9450611d6e565b94509492505050565b5f82611dc65760019050611e81565b81611dd3575f9050611e81565b8160018114611de95760028114611df357611e22565b6001915050611e81565b60ff841115611e0557611e04611aa6565b5b8360020a915084821115611e1c57611e1b611aa6565b5b50611e81565b5060208310610133831016604e8410600b8410161715611e575782820a905083811115611e5257611e51611aa6565b5b611e81565b611e648484846001611d65565b92509050818404811115611e7b57611e7a611aa6565b5b81810290505b9392505050565b5f611e9282611950565b9150611e9d83611d19565b9250611eca7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611db7565b905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b5f611f0982611950565b9150611f1483611950565b925082611f2457611f23611ed2565b5b828204905092915050565b5f611f3982611950565b9150611f4483611950565b9250828202611f5281611950565b91508282048414831517611f6957611f68611aa6565b5b5092915050565b5f82825260208201905092915050565b7f6f766572666c6f772d3020696e206d756c3634750000000000000000000000005f82015250565b5f611fb4601483611f70565b9150611fbf82611f80565b602082019050919050565b5f6020820190508181035f830152611fe181611fa8565b9050919050565b7f6f766572666c6f772d3120696e206d756c3634750000000000000000000000005f82015250565b5f61201c601483611f70565b915061202782611fe8565b602082019050919050565b5f6020820190508181035f83015261204981612010565b9050919050565b6120598161178b565b82525050565b5f61ffff82169050919050565b5f62ffffff82169050919050565b5f819050919050565b5f61209d6120986120938461205f565b61207a565b61206c565b9050919050565b6120ad81612083565b82525050565b5f6060820190506120c65f830186612050565b6120d36020830185612050565b6120e060408301846120a4565b949350505050565b5f6040820190506120fb5f830185612050565b6121086020830184612050565b9392505050565b5f6020820190506121225f830184612050565b92915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f61215482612128565b61215e8185612132565b935061216e81856020860161213c565b80840191505092915050565b5f612185828461214a565b915081905092915050565b5f602082840312156121a5576121a46116a9565b5b5f6121b28482850161196f565b91505092915050565b6121c48161176c565b81146121ce575f80fd5b50565b5f815190506121df816121bb565b92915050565b5f8160020b9050919050565b6121fa816121e5565b8114612204575f80fd5b50565b5f81519050612215816121f1565b92915050565b6122248161205f565b811461222e575f80fd5b50565b5f8151905061223f8161221b565b92915050565b61224e81611d19565b8114612258575f80fd5b50565b5f8151905061226981612245565b92915050565b5f805f805f805f60e0888a03121561228a576122896116a9565b5b5f6122978a828b016121d1565b97505060206122a88a828b01612207565b96505060406122b98a828b01612231565b95505060606122ca8a828b01612231565b94505060806122db8a828b01612231565b93505060a06122ec8a828b0161225b565b92505060c06122fd8a828b016118a7565b91505092959891949750929550565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffd5b7f4f766572666c6f770000000000000000000000000000000000000000000000005f82015250565b5f61236d600883611f70565b915061237882612339565b602082019050919050565b5f6020820190508181035f83015261239a81612361565b905091905056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa#\xA28\x03\x80a#\xA2\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\x19\x83V[_\x85Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\x16\xC5V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0{W\x81` \x01` \x82\x02\x806\x837\x80\x82\x01\x91PP\x90P[P\x90P_[\x86Q\x81\x10\x15a\x03mWa\0\xB2\x87\x82\x81Q\x81\x10a\0\x9FWa\0\x9Ea\x1ANV[[` \x02` \x01\x01Qa\x03\x9B` \x1B` \x1CV[\x15a\0\xDCW_\x82\x82\x81Q\x81\x10a\0\xCBWa\0\xCAa\x1ANV[[` \x02` \x01\x01\x81\x81RPPa\x03bV[a\x01\x05\x87\x82\x81Q\x81\x10a\0\xF2Wa\0\xF1a\x1ANV[[` \x02` \x01\x01Qa\x04G` \x1B` \x1CV[a\x03@W_\x87\x82\x81Q\x81\x10a\x01\x1DWa\x01\x1Ca\x1ANV[[` \x02` \x01\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\r\xFE\x16\x81`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01mW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01\x91\x91\x90a\x1A{V[\x90P_\x88\x83\x81Q\x81\x10a\x01\xA7Wa\x01\xA6a\x1ANV[[` \x02` \x01\x01Qs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xD2\x12 \xA7`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\xF7W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x02\x1B\x91\x90a\x1A{V[\x90Pa\x02,\x82a\x04G` \x1B` \x1CV[\x15\x80\x15a\x02EWPa\x02C\x81a\x04G` \x1B` \x1CV[\x15[\x15a\x03\x18W_\x80a\x02w\x8B\x86\x81Q\x81\x10a\x02bWa\x02aa\x1ANV[[` \x02` \x01\x01Q\x85\x85a\x04x` \x1B` \x1CV[\x91P\x91P_a\x02\x90\x85\x8A\x85\x8E\x8E\x8Da\x05%` \x1B` \x1CV[\x90P_a\x02\xA7\x85\x8B\x85\x8F\x8F\x8Ea\x05%` \x1B` \x1CV[\x90P_\x82\x14\x15\x80\x15a\x02\xB9WP_\x81\x14\x15[\x15a\x02\xEEW\x80\x82a\x02\xCA\x91\x90a\x1A\xD3V[\x88\x88\x81Q\x81\x10a\x02\xDDWa\x02\xDCa\x1ANV[[` \x02` \x01\x01\x81\x81RPPa\x03\x0FV[_\x88\x88\x81Q\x81\x10a\x03\x02Wa\x03\x01a\x1ANV[[` \x02` \x01\x01\x81\x81RPP[PPPPa\x039V[_\x84\x84\x81Q\x81\x10a\x03,Wa\x03+a\x1ANV[[` \x02` \x01\x01\x81\x81RPP[PPa\x03aV[_\x82\x82\x81Q\x81\x10a\x03TWa\x03Sa\x1ANV[[` \x02` \x01\x01\x81\x81RPP[[\x80`\x01\x01\x90Pa\0\x80V[P_\x81`@Q` \x01a\x03\x80\x91\x90a\x1B\xBDV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_a\x03\xAB\x82a\x06\xB4` \x1B` \x1CV[a\x04>W_\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x1Ahe\x02`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xF9W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x1D\x91\x90a\x1C\"V[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x04=W`\x01\x90Pa\x04BV[[_\x90P[\x91\x90PV[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x03a\x04oW`\x01\x90Pa\x04sV[_\x90P[\x91\x90PV[_\x80_\x80a\x04\x8D\x87\x87\x87a\x06\xEE` \x1B` \x1CV[\x91P\x91Pa\x05\x17\x82\x82\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10a\x04\xCFW\x87a\x04\xD1V[\x88[\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10a\x05\nW\x89a\x05\x0CV[\x88[a\x08\x83` \x1B` \x1CV[\x93P\x93PPP\x93P\x93\x91PPV[_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x05aW\x84\x90Pa\x06\xAAV[_\x80_\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _\x90T\x90a\x01\0\n\x90\x04o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90P`\x01\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x05\xDFW_\x91PPa\x06\xAAV[_\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x06\x10Wa\x06\x08\x81\x87a\t\x84` \x1B` \x1CV[\x91PPa\x06\xAAV[_[\x85Q\x81\x10\x15a\x06\xA4W_a\x06c\x8A\x8A\x89\x85\x81Q\x81\x10a\x064Wa\x063a\x1ANV[[` \x02` \x01\x01Q\x89\x86\x81Q\x81\x10a\x06OWa\x06Na\x1ANV[[` \x02` \x01\x01Q\x89a\n\xD0` \x1B` \x1CV[\x90P_\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x06\x98Wa\x06\x8E\x81\x89a\t\x84` \x1B` \x1CV[\x93PPPPa\x06\xAAV[P\x80`\x01\x01\x90Pa\x06\x12V[P_\x91PP[\x96\x95PPPPPPV[_\x80\x7F\xDD\xCA?C\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R_\x80`\x04_\x80\x87Z\xF1\x90P\x80\x15\x91PP\x91\x90PV[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10a\x07*W\x82\x84a\x07-V[\x83\x83[\x80\x94P\x81\x95PPP_\x80a\x07F\x87a\x06\xB4` \x1B` \x1CV[\x15a\x07\xECW_\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\t\x02\xF1\xAC`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01```@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\x96W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\xBA\x91\x90a\x1C\xC9V[P\x91P\x91P\x81m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x93P\x80m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x92PPPa\x08sV[_\x80a\x07\xFE\x88\x8Aa\x0EX` \x1B` \x1CV[\x91P\x91P_\x80a\x08\x14\x89\x8Ca\x0EX` \x1B` \x1CV[\x91P\x91P\x82\x80\x15a\x08\"WP\x80[\x15a\x08nW\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x15a\x08fW\x83\x95P\x81\x94Pa\x08mV[\x83\x94P\x81\x95P[[PPPP[\x81\x81\x93P\x93PPP\x93P\x93\x91PPV[_\x80_\x80a\x08\x96\x86a\x0F\xA4` \x1B` \x1CV[\x91P\x91P_\x80a\x08\xAB\x87a\x0F\xA4` \x1B` \x1CV[\x91P\x91P\x82\x80\x15a\x08\xB9WP\x80[\x15a\twW`\x12\x84`\xFF\x16\x11\x15a\x08\xF3W`\x12\x84a\x08\xD7\x91\x90a\x1D%V[`\na\x08\xE3\x91\x90a\x1E\x88V[\x8Aa\x08\xEE\x91\x90a\x1E\xFFV[a\t\x18V[\x83`\x12a\t\0\x91\x90a\x1D%V[`\na\t\x0C\x91\x90a\x1E\x88V[\x8Aa\t\x17\x91\x90a\x1F/V[[\x95P`\x12\x82`\xFF\x16\x11\x15a\tOW`\x12\x82a\t3\x91\x90a\x1D%V[`\na\t?\x91\x90a\x1E\x88V[\x89a\tJ\x91\x90a\x1E\xFFV[a\ttV[\x81`\x12a\t\\\x91\x90a\x1D%V[`\na\th\x91\x90a\x1E\x88V[\x89a\ts\x91\x90a\x1F/V[[\x94P[PPPP\x94P\x94\x92PPPV[_\x80\x82\x14\x80a\t\xA4WP_\x83o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14[\x15a\t\xB1W_\x90Pa\n\xCAV[_`@o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x16\x85o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x90\x1C\x90P_`\x80\x84\x90\x1C\x85o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x90Pw\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\nVW`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\nM\x90a\x1F\xCAV[`@Q\x80\x91\x03\x90\xFD[`@\x81\x90\x1B\x90P\x81\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x03\x81\x11\x15a\n\xC2W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\n\xB9\x90a 2V[`@Q\x80\x91\x03\x90\xFD[\x81\x81\x01\x92PPP[\x92\x91PPV[_\x82\x15a\x0C\x9FW_`@Q\x80``\x01`@R\x80a\x01\xF4a\xFF\xFF\x16\x81R` \x01a\x0B\xB8a\xFF\xFF\x16\x81R` \x01a'\x10a\xFF\xFF\x16\x81RP\x90P_[`\x03\x81\x10\x15a\x0C\x98W_\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x16\x98\xEE\x82\x89s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8Bs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10a\x0BhW\x89a\x0BjV[\x8A[\x8As\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10a\x0B\xA3W\x8Ba\x0B\xA5V[\x8A[\x86\x86`\x03\x81\x10a\x0B\xB8Wa\x0B\xB7a\x1ANV[[` \x02\x01Q`@Q\x84c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x0B\xDB\x93\x92\x91\x90a \xB3V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0B\xF6W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0C\x1A\x91\x90a\x1A{V[\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0C\x8CW_a\x0Cc\x87\x8B\x8B\x85\x8Aa\x11\x08` \x1B` \x1CV[\x90P_\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\x0C\x8AW\x80\x94PPPPPa\x0EOV[P[P\x80`\x01\x01\x90Pa\x0B\tV[PPa\r\xD8V[_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x87s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x90P_\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xE6\xA49\x05\x83a\x0C\xF9W\x88a\x0C\xFBV[\x89[\x84a\r\x06W\x8Aa\r\x08V[\x89[`@Q\x83c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\r%\x92\x91\x90a \xE8V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r@W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\rd\x91\x90a\x1A{V[\x90P_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\r\xD5W_a\r\xAD\x86\x8A\x8A\x85\x89a\x11\x08` \x1B` \x1CV[\x90P_\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x14a\r\xD3W\x80\x93PPPPa\x0EOV[P[PP[`\x01_\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UP_\x90P[\x95\x94PPPPPV[_\x80_\x80\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x85`@Q`$\x01a\x0E\x84\x91\x90a!\x0FV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7Fp\xA0\x821\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x0F\x0E\x91\x90a!zV[_`@Q\x80\x83\x03\x81_\x86Z\xF1\x91PP=\x80_\x81\x14a\x0FGW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0FLV[``\x91P[P\x91P\x91P\x81\x15a\x0F\x94W_` \x82Q\x03a\x0F\x86W\x81\x80` \x01\x90Q\x81\x01\x90a\x0Fu\x91\x90a!\x90V[\x90P\x80`\x01\x94P\x94PPPPa\x0F\x9DV[_\x80\x94P\x94PPPPa\x0F\x9DV[_\x80\x93P\x93PPP[\x92P\x92\x90PV[_\x80_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x10R\x91\x90a!zV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x10\x8CW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x10\x91V[``\x91P[P\x91P\x91P\x81\x15a\x10\xFAW_` \x82Q\x03a\x10\xECW\x81\x80` \x01\x90Q\x81\x01\x90a\x10\xBA\x91\x90a!\x90V[\x90P_\x81\x14\x80a\x10\xCAWP`\xFF\x81\x11[\x15a\x10\xDDW_\x80\x94P\x94PPPPa\x11\x03V[\x80`\x01\x94P\x94PPPPa\x11\x03V[_\x80\x94P\x94PPPPa\x11\x03V[_\x80\x93P\x93PPP[\x91P\x91V[_\x80\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x10\x90P\x86a\x11\xBAW_\x80a\x11S\x86\x89\x89a\x04x` \x1B` \x1CV[\x91P\x91P\x82\x15a\x11uW\x84\x81\x10\x15a\x11pW_\x93PPPPa\x12\xBEV[a\x11\x89V[\x84\x82\x10\x15a\x11\x88W_\x93PPPPa\x12\xBEV[[a\x11\xB1\x83a\x11\x97W\x82a\x11\x99V[\x81[\x84a\x11\xA4W\x82a\x11\xA6V[\x83[a\x12\xC7` \x1B` \x1CV[\x93PPPa\x12JV[_\x84s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8P\xC7\xBD`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01`\xE0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x12\x04W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12(\x91\x90a\"oV[PPPPPP\x90P`@a\x12D\x82\x84\x8A\x8Aa\x14\xA9` \x1B` \x1CV[\x90\x1C\x92PP[\x81_\x80\x88s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01\x90\x81R` \x01_ _a\x01\0\n\x81T\x81o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x02\x19\x16\x90\x83o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x02\x17\x90UPP[\x95\x94PPPPPV[_\x80\x82\x03a\x12\xD7W_\x90Pa\x14\xA3V[_w\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x11a\x13\x13W\x82`@\x85\x90\x1B\x81a\x13\x0BWa\x13\na\x1E\xD2V[[\x04\x90Pa\x14}V[_`\xC0\x90P_`\xC0\x86\x90\x1C\x90Pd\x01\0\0\0\0\x81\x10a\x13:W` \x81\x90\x1C\x90P` \x82\x01\x91P[b\x01\0\0\x81\x10a\x13RW`\x10\x81\x90\x1C\x90P`\x10\x82\x01\x91P[a\x01\0\x81\x10a\x13iW`\x08\x81\x90\x1C\x90P`\x08\x82\x01\x91P[`\x10\x81\x10a\x13\x7FW`\x04\x81\x90\x1C\x90P`\x04\x82\x01\x91P[`\x04\x81\x10a\x13\x95W`\x02\x81\x90\x1C\x90P`\x02\x82\x01\x91P[`\x02\x81\x10a\x13\xA4W`\x01\x82\x01\x91P[`\x01`\xBF\x83\x03`\x01\x87\x03\x90\x1C\x01\x82`\xFF\x03\x87\x90\x1B\x81a\x13\xC6Wa\x13\xC5a\x1E\xD2V[[\x04\x92Po\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x11\x15a\x13\xECW_\x93PPPPa\x14\xA3V[_`\x80\x86\x90\x1C\x84\x02\x90P_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x87\x16\x85\x02\x90P_`\xC0\x89\x90\x1C\x90P_`@\x8A\x90\x1B\x90P\x82\x81\x10\x15a\x14-W`\x01\x82\x03\x91P[\x82\x81\x03\x90P`\x80\x84\x90\x1B\x92P\x82\x81\x10\x15a\x14HW`\x01\x82\x03\x91P[\x82\x81\x03\x90P`\x80\x84\x90\x1C\x82\x14a\x14aWa\x14`a#\x0CV[[\x88\x81\x81a\x14qWa\x14pa\x1E\xD2V[[\x04\x87\x01\x96PPPPPPP[o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x14\x9EW_\x91PPa\x14\xA3V[\x80\x91PP[\x92\x91PPV[_\x80\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x03a\x14\xCFW_\x90Pa\x16\x98V[_\x80a\x14\xE0\x85a\x0F\xA4` \x1B` \x1CV[\x91P\x91P_\x80a\x14\xF5\x86a\x0F\xA4` \x1B` \x1CV[\x91P\x91P\x82\x80\x15a\x15\x03WP\x80[a\x15\x13W_\x94PPPPPa\x16\x98V[_\x82\x85\x03\x90P_\x80\x82_\x0B\x12a\x15JW\x81`\xFF\x16`\n\n`\x02\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\n\x02a\x15}V[\x81_\x03`\xFF\x16`\n\n`\x02\x8Cs\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\n\x81a\x15{Wa\x15za\x1E\xD2V[[\x04[\x90P_\x8Aa\x15\xDCWl\x01\0\0\0\0\0\0\0\0\0\0\0\0`\x80\x81a\x15\xA3Wa\x15\xA2a\x1E\xD2V[[\x04\x82\x90\x1B\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81a\x15\xD6Wa\x15\xD5a\x1E\xD2V[[\x04a\x15\xFFV[l\x01\0\0\0\0\0\0\0\0\0\0\0\0`\x80\x81a\x15\xFAWa\x15\xF9a\x1E\xD2V[[\x04\x82\x90\x1B[\x90P\x8Aa\x16\x0CW\x80a\x16+V[l\x01\0\0\0\0\0\0\0\0\0\0\0\0\x81\x81a\x16)Wa\x16(a\x1E\xD2V[[\x04[\x97P\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x88\x11\x15a\x16\x90W`@Q\x7F\x08\xC3y\xA0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R`\x04\x01a\x16\x87\x90a#\x83V[`@Q\x80\x91\x03\x90\xFD[PPPPPPP[\x94\x93PPPPV[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x16\xFB\x82a\x16\xB5V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x17\x1AWa\x17\x19a\x16\xC5V[[\x80`@RPPPV[_a\x17,a\x16\xA0V[\x90Pa\x178\x82\x82a\x16\xF2V[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x17WWa\x17Va\x16\xC5V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x17\x95\x82a\x17lV[\x90P\x91\x90PV[a\x17\xA5\x81a\x17\x8BV[\x81\x14a\x17\xAFW_\x80\xFD[PV[_\x81Q\x90Pa\x17\xC0\x81a\x17\x9CV[\x92\x91PPV[_a\x17\xD8a\x17\xD3\x84a\x17=V[a\x17#V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x17\xFBWa\x17\xFAa\x17hV[[\x83[\x81\x81\x10\x15a\x18$W\x80a\x18\x10\x88\x82a\x17\xB2V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x17\xFDV[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x18BWa\x18Aa\x16\xB1V[[\x81Qa\x18R\x84\x82` \x86\x01a\x17\xC6V[\x91PP\x92\x91PPV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x18uWa\x18ta\x16\xC5V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x81\x15\x15\x90P\x91\x90PV[a\x18\x9A\x81a\x18\x86V[\x81\x14a\x18\xA4W_\x80\xFD[PV[_\x81Q\x90Pa\x18\xB5\x81a\x18\x91V[\x92\x91PPV[_a\x18\xCDa\x18\xC8\x84a\x18[V[a\x17#V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\x18\xF0Wa\x18\xEFa\x17hV[[\x83[\x81\x81\x10\x15a\x19\x19W\x80a\x19\x05\x88\x82a\x18\xA7V[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\x18\xF2V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\x197Wa\x196a\x16\xB1V[[\x81Qa\x19G\x84\x82` \x86\x01a\x18\xBBV[\x91PP\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x19b\x81a\x19PV[\x81\x14a\x19lW_\x80\xFD[PV[_\x81Q\x90Pa\x19}\x81a\x19YV[\x92\x91PPV[_\x80_\x80_`\xA0\x86\x88\x03\x12\x15a\x19\x9CWa\x19\x9Ba\x16\xA9V[[_\x86\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xB9Wa\x19\xB8a\x16\xADV[[a\x19\xC5\x88\x82\x89\x01a\x18.V[\x95PP` \x86\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x19\xE6Wa\x19\xE5a\x16\xADV[[a\x19\xF2\x88\x82\x89\x01a\x18.V[\x94PP`@\x86\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1A\x13Wa\x1A\x12a\x16\xADV[[a\x1A\x1F\x88\x82\x89\x01a\x19#V[\x93PP``a\x1A0\x88\x82\x89\x01a\x17\xB2V[\x92PP`\x80a\x1AA\x88\x82\x89\x01a\x19oV[\x91PP\x92\x95P\x92\x95\x90\x93PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x1A\x90Wa\x1A\x8Fa\x16\xA9V[[_a\x1A\x9D\x84\x82\x85\x01a\x17\xB2V[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_a\x1A\xDD\x82a\x19PV[\x91Pa\x1A\xE8\x83a\x19PV[\x92P\x82\x82\x01\x90P\x80\x82\x11\x15a\x1B\0Wa\x1A\xFFa\x1A\xA6V[[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x1B8\x81a\x19PV[\x82RPPV[_a\x1BI\x83\x83a\x1B/V[` \x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x1Bk\x82a\x1B\x06V[a\x1Bu\x81\x85a\x1B\x10V[\x93Pa\x1B\x80\x83a\x1B V[\x80_[\x83\x81\x10\x15a\x1B\xB0W\x81Qa\x1B\x97\x88\x82a\x1B>V[\x97Pa\x1B\xA2\x83a\x1BUV[\x92PP`\x01\x81\x01\x90Pa\x1B\x83V[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x1B\xD5\x81\x84a\x1BaV[\x90P\x92\x91PPV[_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x1C\x01\x81a\x1B\xDDV[\x81\x14a\x1C\x0BW_\x80\xFD[PV[_\x81Q\x90Pa\x1C\x1C\x81a\x1B\xF8V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x1C7Wa\x1C6a\x16\xA9V[[_a\x1CD\x84\x82\x85\x01a\x1C\x0EV[\x91PP\x92\x91PPV[_m\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x1Co\x81a\x1CMV[\x81\x14a\x1CyW_\x80\xFD[PV[_\x81Q\x90Pa\x1C\x8A\x81a\x1CfV[\x92\x91PPV[_c\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x1C\xA8\x81a\x1C\x90V[\x81\x14a\x1C\xB2W_\x80\xFD[PV[_\x81Q\x90Pa\x1C\xC3\x81a\x1C\x9FV[\x92\x91PPV[_\x80_``\x84\x86\x03\x12\x15a\x1C\xE0Wa\x1C\xDFa\x16\xA9V[[_a\x1C\xED\x86\x82\x87\x01a\x1C|V[\x93PP` a\x1C\xFE\x86\x82\x87\x01a\x1C|V[\x92PP`@a\x1D\x0F\x86\x82\x87\x01a\x1C\xB5V[\x91PP\x92P\x92P\x92V[_`\xFF\x82\x16\x90P\x91\x90PV[_a\x1D/\x82a\x1D\x19V[\x91Pa\x1D:\x83a\x1D\x19V[\x92P\x82\x82\x03\x90P`\xFF\x81\x11\x15a\x1DSWa\x1DRa\x1A\xA6V[[\x92\x91PPV[_\x81`\x01\x1C\x90P\x91\x90PV[_\x80\x82\x91P\x83\x90P[`\x01\x85\x11\x15a\x1D\xAEW\x80\x86\x04\x81\x11\x15a\x1D\x8AWa\x1D\x89a\x1A\xA6V[[`\x01\x85\x16\x15a\x1D\x99W\x80\x82\x02\x91P[\x80\x81\x02\x90Pa\x1D\xA7\x85a\x1DYV[\x94Pa\x1DnV[\x94P\x94\x92PPPV[_\x82a\x1D\xC6W`\x01\x90Pa\x1E\x81V[\x81a\x1D\xD3W_\x90Pa\x1E\x81V[\x81`\x01\x81\x14a\x1D\xE9W`\x02\x81\x14a\x1D\xF3Wa\x1E\"V[`\x01\x91PPa\x1E\x81V[`\xFF\x84\x11\x15a\x1E\x05Wa\x1E\x04a\x1A\xA6V[[\x83`\x02\n\x91P\x84\x82\x11\x15a\x1E\x1CWa\x1E\x1Ba\x1A\xA6V[[Pa\x1E\x81V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x1EWW\x82\x82\n\x90P\x83\x81\x11\x15a\x1ERWa\x1EQa\x1A\xA6V[[a\x1E\x81V[a\x1Ed\x84\x84\x84`\x01a\x1DeV[\x92P\x90P\x81\x84\x04\x81\x11\x15a\x1E{Wa\x1Eza\x1A\xA6V[[\x81\x81\x02\x90P[\x93\x92PPPV[_a\x1E\x92\x82a\x19PV[\x91Pa\x1E\x9D\x83a\x1D\x19V[\x92Pa\x1E\xCA\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x84a\x1D\xB7V[\x90P\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x12`\x04R`$_\xFD[_a\x1F\t\x82a\x19PV[\x91Pa\x1F\x14\x83a\x19PV[\x92P\x82a\x1F$Wa\x1F#a\x1E\xD2V[[\x82\x82\x04\x90P\x92\x91PPV[_a\x1F9\x82a\x19PV[\x91Pa\x1FD\x83a\x19PV[\x92P\x82\x82\x02a\x1FR\x81a\x19PV[\x91P\x82\x82\x04\x84\x14\x83\x15\x17a\x1FiWa\x1Fha\x1A\xA6V[[P\x92\x91PPV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[\x7Foverflow-0 in mul64u\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a\x1F\xB4`\x14\x83a\x1FpV[\x91Pa\x1F\xBF\x82a\x1F\x80V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x1F\xE1\x81a\x1F\xA8V[\x90P\x91\x90PV[\x7Foverflow-1 in mul64u\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a \x1C`\x14\x83a\x1FpV[\x91Pa '\x82a\x1F\xE8V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra I\x81a \x10V[\x90P\x91\x90PV[a Y\x81a\x17\x8BV[\x82RPPV[_a\xFF\xFF\x82\x16\x90P\x91\x90PV[_b\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_\x81\x90P\x91\x90PV[_a \x9Da \x98a \x93\x84a _V[a zV[a lV[\x90P\x91\x90PV[a \xAD\x81a \x83V[\x82RPPV[_``\x82\x01\x90Pa \xC6_\x83\x01\x86a PV[a \xD3` \x83\x01\x85a PV[a \xE0`@\x83\x01\x84a \xA4V[\x94\x93PPPPV[_`@\x82\x01\x90Pa \xFB_\x83\x01\x85a PV[a!\x08` \x83\x01\x84a PV[\x93\x92PPPV[_` \x82\x01\x90Pa!\"_\x83\x01\x84a PV[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a!T\x82a!(V[a!^\x81\x85a!2V[\x93Pa!n\x81\x85` \x86\x01a!<V[\x80\x84\x01\x91PP\x92\x91PPV[_a!\x85\x82\x84a!JV[\x91P\x81\x90P\x92\x91PPV[_` \x82\x84\x03\x12\x15a!\xA5Wa!\xA4a\x16\xA9V[[_a!\xB2\x84\x82\x85\x01a\x19oV[\x91PP\x92\x91PPV[a!\xC4\x81a\x17lV[\x81\x14a!\xCEW_\x80\xFD[PV[_\x81Q\x90Pa!\xDF\x81a!\xBBV[\x92\x91PPV[_\x81`\x02\x0B\x90P\x91\x90PV[a!\xFA\x81a!\xE5V[\x81\x14a\"\x04W_\x80\xFD[PV[_\x81Q\x90Pa\"\x15\x81a!\xF1V[\x92\x91PPV[a\"$\x81a _V[\x81\x14a\".W_\x80\xFD[PV[_\x81Q\x90Pa\"?\x81a\"\x1BV[\x92\x91PPV[a\"N\x81a\x1D\x19V[\x81\x14a\"XW_\x80\xFD[PV[_\x81Q\x90Pa\"i\x81a\"EV[\x92\x91PPV[_\x80_\x80_\x80_`\xE0\x88\x8A\x03\x12\x15a\"\x8AWa\"\x89a\x16\xA9V[[_a\"\x97\x8A\x82\x8B\x01a!\xD1V[\x97PP` a\"\xA8\x8A\x82\x8B\x01a\"\x07V[\x96PP`@a\"\xB9\x8A\x82\x8B\x01a\"1V[\x95PP``a\"\xCA\x8A\x82\x8B\x01a\"1V[\x94PP`\x80a\"\xDB\x8A\x82\x8B\x01a\"1V[\x93PP`\xA0a\"\xEC\x8A\x82\x8B\x01a\"[V[\x92PP`\xC0a\"\xFD\x8A\x82\x8B\x01a\x18\xA7V[\x91PP\x92\x95\x98\x91\x94\x97P\x92\x95PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x01`\x04R`$_\xFD[\x7FOverflow\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_\x82\x01RPV[_a#m`\x08\x83a\x1FpV[\x91Pa#x\x82a#9V[` \x82\x01\x90P\x91\x90PV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra#\x9A\x81a#aV[\x90P\x91\x90PV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060043610610029575f3560e01c80630ed45c8e1461002d575b5f80fd5b610047600480360381019061004291906100e6565b61005d565b604051610054919061013b565b60405180910390f35b5f602052805f5260405f205f915054906101000a90046fffffffffffffffffffffffffffffffff1681565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100b58261008c565b9050919050565b6100c5816100ab565b81146100cf575f80fd5b50565b5f813590506100e0816100bc565b92915050565b5f602082840312156100fb576100fa610088565b5b5f610108848285016100d2565b91505092915050565b5f6fffffffffffffffffffffffffffffffff82169050919050565b61013581610111565b82525050565b5f60208201905061014e5f83018461012c565b9291505056fea2646970667358221220ff2c434f6cbb91e459be626f50b81de7d1c2935448a94bd4da35f50c6e5f35fd64736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\0)W_5`\xE0\x1C\x80c\x0E\xD4\\\x8E\x14a\0-W[_\x80\xFD[a\0G`\x04\x806\x03\x81\x01\x90a\0B\x91\x90a\0\xE6V[a\0]V[`@Qa\0T\x91\x90a\x01;V[`@Q\x80\x91\x03\x90\xF3[_` R\x80_R`@_ _\x91PT\x90a\x01\0\n\x90\x04o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81V[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\0\xB5\x82a\0\x8CV[\x90P\x91\x90PV[a\0\xC5\x81a\0\xABV[\x81\x14a\0\xCFW_\x80\xFD[PV[_\x815\x90Pa\0\xE0\x81a\0\xBCV[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\0\xFBWa\0\xFAa\0\x88V[[_a\x01\x08\x84\x82\x85\x01a\0\xD2V[\x91PP\x92\x91PPV[_o\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[a\x015\x81a\x01\x11V[\x82RPPV[_` \x82\x01\x90Pa\x01N_\x83\x01\x84a\x01,V[\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xFF,COl\xBB\x91\xE4Y\xBEboP\xB8\x1D\xE7\xD1\xC2\x93TH\xA9K\xD4\xDA5\xF5\x0Cn_5\xFDdsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] pools, address[] dexes, bool[] dexIsUniV3, address weth, uint256 wethInPoolThreshold);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        #[allow(missing_docs)]
        pub pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        #[allow(missing_docs)]
        pub dexes: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        #[allow(missing_docs)]
        pub dexIsUniV3: alloy::sol_types::private::Vec<bool>,
        #[allow(missing_docs)]
        pub weth: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub wethInPoolThreshold: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<bool>,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.pools,
                        value.dexes,
                        value.dexIsUniV3,
                        value.weth,
                        value.wethInPoolThreshold,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        pools: tuple.0,
                        dexes: tuple.1,
                        dexIsUniV3: tuple.2,
                        weth: tuple.3,
                        wethInPoolThreshold: tuple.4,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bool>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.pools),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.dexes),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Bool,
                    > as alloy_sol_types::SolType>::tokenize(&self.dexIsUniV3),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.weth,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.wethInPoolThreshold),
                )
            }
        }
    };
    /**Function with signature `tokenToWethPrices(address)` and selector `0x0ed45c8e`.
```solidity
function tokenToWethPrices(address) external view returns (uint128);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenToWethPricesCall {
        #[allow(missing_docs)]
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`tokenToWethPrices(address)`](tokenToWethPricesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenToWethPricesReturn {
        #[allow(missing_docs)]
        pub _0: u128,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenToWethPricesCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: tokenToWethPricesCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for tokenToWethPricesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<128>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u128,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenToWethPricesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: tokenToWethPricesReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for tokenToWethPricesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenToWethPricesCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenToWethPricesReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<128>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenToWethPrices(address)";
            const SELECTOR: [u8; 4] = [14u8, 212u8, 92u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`GetWethValueInPoolBatchRequest`](self) function calls.
    pub enum GetWethValueInPoolBatchRequestCalls {
        #[allow(missing_docs)]
        tokenToWethPrices(tokenToWethPricesCall),
    }
    #[automatically_derived]
    impl GetWethValueInPoolBatchRequestCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[14u8, 212u8, 92u8, 142u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for GetWethValueInPoolBatchRequestCalls {
        const NAME: &'static str = "GetWethValueInPoolBatchRequestCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::tokenToWethPrices(_) => {
                    <tokenToWethPricesCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<GetWethValueInPoolBatchRequestCalls>] = &[
                {
                    fn tokenToWethPrices(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<GetWethValueInPoolBatchRequestCalls> {
                        <tokenToWethPricesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(GetWethValueInPoolBatchRequestCalls::tokenToWethPrices)
                    }
                    tokenToWethPrices
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            DECODE_SHIMS[idx](data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::tokenToWethPrices(inner) => {
                    <tokenToWethPricesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::tokenToWethPrices(inner) => {
                    <tokenToWethPricesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetWethValueInPoolBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetWethValueInPoolBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetWethValueInPoolBatchRequestInstance<T, P, N> {
        GetWethValueInPoolBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        dexes: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        dexIsUniV3: alloy::sol_types::private::Vec<bool>,
        weth: alloy::sol_types::private::Address,
        wethInPoolThreshold: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetWethValueInPoolBatchRequestInstance<T, P, N>>,
    > {
        GetWethValueInPoolBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy(provider, pools, dexes, dexIsUniV3, weth, wethInPoolThreshold)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        dexes: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        dexIsUniV3: alloy::sol_types::private::Vec<bool>,
        weth: alloy::sol_types::private::Address,
        wethInPoolThreshold: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetWethValueInPoolBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, pools, dexes, dexIsUniV3, weth, wethInPoolThreshold)
    }
    /**A [`GetWethValueInPoolBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetWethValueInPoolBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetWethValueInPoolBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for GetWethValueInPoolBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetWethValueInPoolBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetWethValueInPoolBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetWethValueInPoolBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetWethValueInPoolBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            dexes: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            dexIsUniV3: alloy::sol_types::private::Vec<bool>,
            weth: alloy::sol_types::private::Address,
            wethInPoolThreshold: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<GetWethValueInPoolBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                pools,
                dexes,
                dexIsUniV3,
                weth,
                wethInPoolThreshold,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            pools: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            dexes: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            dexIsUniV3: alloy::sol_types::private::Vec<bool>,
            weth: alloy::sol_types::private::Address,
            wethInPoolThreshold: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            pools,
                            dexes,
                            dexIsUniV3,
                            weth,
                            wethInPoolThreshold,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > GetWethValueInPoolBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> GetWethValueInPoolBatchRequestInstance<T, P, N> {
            GetWethValueInPoolBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetWethValueInPoolBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`tokenToWethPrices`] function.
        pub fn tokenToWethPrices(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenToWethPricesCall, N> {
            self.call_builder(&tokenToWethPricesCall { _0 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetWethValueInPoolBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
