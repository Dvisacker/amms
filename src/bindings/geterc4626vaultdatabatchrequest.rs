/**

Generated by the following Solidity interface...
```solidity
interface GetERC4626VaultDataBatchRequest {
    constructor(address[] vaults);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "vaults",
        "type": "address[]",
        "internalType": "address[]"
      }
    ],
    "stateMutability": "nonpayable"
  }
]
```*/
#[allow(non_camel_case_types, non_snake_case, clippy::style)]
pub mod GetERC4626VaultDataBatchRequest {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f80fd5b5060405161136a38038061136a83398181016040528101906100319190610d77565b5f815167ffffffffffffffff81111561004d5761004c610be1565b5b60405190808252806020026020018201604052801561008657816020015b610073610b35565b81526020019060019003908161006b5790505b5090505f5b8251811015610ae5575f8382815181106100a8576100a7610dbe565b5b602002602001015190506100c181610b1360201b60201c565b156100cc5750610ada565b5f8173ffffffffffffffffffffffffffffffffffffffff166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610116573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061013a9190610deb565b905061014b81610b1360201b60201c565b15610157575050610ada565b5f808273ffffffffffffffffffffffffffffffffffffffff16614e206040516024016040516020818303038152906040527f313ce567000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102039190610e68565b5f604051808303815f8787f1925050503d805f811461023d576040519150601f19603f3d011682016040523d82523d5f602084013e610242565b606091505b5091509150811580610255575060208151145b156102635750505050610ada565b5f818060200190518101906102789190610eb1565b90505f811480610288575060ff81115b15610297575050505050610ada565b61029f610b35565b85815f019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505084816040019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508573ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610357573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061037b9190610f12565b816020019060ff16908160ff168152505081816060019060ff16908160ff16815250508573ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061040b9190610eb1565b8160800181815250508573ffffffffffffffffffffffffffffffffffffffff166301e1d1146040518163ffffffff1660e01b8152600401602060405180830381865afa15801561045d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104819190610eb1565b8160a00181815250508573ffffffffffffffffffffffffffffffffffffffff1663ef8b30f78260600151600a6104b79190611099565b60646104c391906110e3565b6040518263ffffffff1660e01b81526004016104df9190611133565b602060405180830381865afa1580156104fa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061051e9190610eb1565b8673ffffffffffffffffffffffffffffffffffffffff1663c6e6f5928360600151600a61054b9190611099565b606461055791906110e3565b6040518263ffffffff1660e01b81526004016105739190611133565b602060405180830381865afa15801561058e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105b29190610eb1565b6105bc919061114c565b8160c00181815250508573ffffffffffffffffffffffffffffffffffffffff1663ef8b30f78260600151600a6105f29190611099565b60c86105fe91906110e3565b6040518263ffffffff1660e01b815260040161061a9190611133565b602060405180830381865afa158015610635573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106599190610eb1565b8673ffffffffffffffffffffffffffffffffffffffff1663c6e6f5928360600151600a6106869190611099565b60c861069291906110e3565b6040518263ffffffff1660e01b81526004016106ae9190611133565b602060405180830381865afa1580156106c9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106ed9190610eb1565b6106f7919061114c565b8160e00181815250508573ffffffffffffffffffffffffffffffffffffffff1663c6e6f5928260600151600a61072d9190611099565b606461073991906110e3565b6040518263ffffffff1660e01b81526004016107559190611133565b602060405180830381865afa158015610770573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107949190610eb1565b816101000181815250508573ffffffffffffffffffffffffffffffffffffffff16634cdad5068260200151600a6107cb9190611099565b60646107d791906110e3565b6040518263ffffffff1660e01b81526004016107f39190611133565b602060405180830381865afa15801561080e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108329190610eb1565b8673ffffffffffffffffffffffffffffffffffffffff166307a2d13a8360200151600a61085f9190611099565b606461086b91906110e3565b6040518263ffffffff1660e01b81526004016108879190611133565b602060405180830381865afa1580156108a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108c69190610eb1565b6108d0919061114c565b816101200181815250508573ffffffffffffffffffffffffffffffffffffffff16634cdad5068260200151600a6109079190611099565b60c861091391906110e3565b6040518263ffffffff1660e01b815260040161092f9190611133565b602060405180830381865afa15801561094a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061096e9190610eb1565b8673ffffffffffffffffffffffffffffffffffffffff166307a2d13a8360200151600a61099b9190611099565b60c86109a791906110e3565b6040518263ffffffff1660e01b81526004016109c39190611133565b602060405180830381865afa1580156109de573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a029190610eb1565b610a0c919061114c565b816101400181815250508573ffffffffffffffffffffffffffffffffffffffff166307a2d13a8260200151600a610a439190611099565b6064610a4f91906110e3565b6040518263ffffffff1660e01b8152600401610a6b9190611133565b602060405180830381865afa158015610a86573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aaa9190610eb1565b8161016001818152505080888881518110610ac857610ac7610dbe565b5b60200260200101819052505050505050505b80600101905061008b565b505f81604051602001610af89190611349565b60405160208183030381529060405290506020810180590381f35b5f808273ffffffffffffffffffffffffffffffffffffffff163b149050919050565b6040518061018001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f73ffffffffffffffffffffffffffffffffffffffff1681526020015f60ff1681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f604051905090565b5f80fd5b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610c1782610bd1565b810181811067ffffffffffffffff82111715610c3657610c35610be1565b5b80604052505050565b5f610c48610bbc565b9050610c548282610c0e565b919050565b5f67ffffffffffffffff821115610c7357610c72610be1565b5b602082029050602081019050919050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610cb182610c88565b9050919050565b610cc181610ca7565b8114610ccb575f80fd5b50565b5f81519050610cdc81610cb8565b92915050565b5f610cf4610cef84610c59565b610c3f565b90508083825260208201905060208402830185811115610d1757610d16610c84565b5b835b81811015610d405780610d2c8882610cce565b845260208401935050602081019050610d19565b5050509392505050565b5f82601f830112610d5e57610d5d610bcd565b5b8151610d6e848260208601610ce2565b91505092915050565b5f60208284031215610d8c57610d8b610bc5565b5b5f82015167ffffffffffffffff811115610da957610da8610bc9565b5b610db584828501610d4a565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215610e0057610dff610bc5565b5b5f610e0d84828501610cce565b91505092915050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610e4282610e16565b610e4c8185610e20565b9350610e5c818560208601610e2a565b80840191505092915050565b5f610e738284610e38565b915081905092915050565b5f819050919050565b610e9081610e7e565b8114610e9a575f80fd5b50565b5f81519050610eab81610e87565b92915050565b5f60208284031215610ec657610ec5610bc5565b5b5f610ed384828501610e9d565b91505092915050565b5f60ff82169050919050565b610ef181610edc565b8114610efb575f80fd5b50565b5f81519050610f0c81610ee8565b92915050565b5f60208284031215610f2757610f26610bc5565b5b5f610f3484828501610efe565b91505092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f8160011c9050919050565b5f808291508390505b6001851115610fbf57808604811115610f9b57610f9a610f3d565b5b6001851615610faa5780820291505b8081029050610fb885610f6a565b9450610f7f565b94509492505050565b5f82610fd75760019050611092565b81610fe4575f9050611092565b8160018114610ffa576002811461100457611033565b6001915050611092565b60ff84111561101657611015610f3d565b5b8360020a91508482111561102d5761102c610f3d565b5b50611092565b5060208310610133831016604e8410600b84101617156110685782820a90508381111561106357611062610f3d565b5b611092565b6110758484846001610f76565b9250905081840481111561108c5761108b610f3d565b5b81810290505b9392505050565b5f6110a382610e7e565b91506110ae83610edc565b92506110db7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484610fc8565b905092915050565b5f6110ed82610e7e565b91506110f883610e7e565b925082820261110681610e7e565b9150828204841483151761111d5761111c610f3d565b5b5092915050565b61112d81610e7e565b82525050565b5f6020820190506111465f830184611124565b92915050565b5f61115682610e7e565b915061116183610e7e565b925082820390508181111561117957611178610f3d565b5b92915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b6111b181610ca7565b82525050565b6111c081610edc565b82525050565b6111cf81610e7e565b82525050565b61018082015f8201516111ea5f8501826111a8565b5060208201516111fd60208501826111b7565b50604082015161121060408501826111a8565b50606082015161122360608501826111b7565b50608082015161123660808501826111c6565b5060a082015161124960a08501826111c6565b5060c082015161125c60c08501826111c6565b5060e082015161126f60e08501826111c6565b506101008201516112846101008501826111c6565b506101208201516112996101208501826111c6565b506101408201516112ae6101408501826111c6565b506101608201516112c36101608501826111c6565b50505050565b5f6112d483836111d5565b6101808301905092915050565b5f602082019050919050565b5f6112f78261117f565b6113018185611189565b935061130c83611199565b805f5b8381101561133c57815161132388826112c9565b975061132e836112e1565b92505060018101905061130f565b5085935050505092915050565b5f6020820190508181035f83015261136181846112ed565b90509291505056fe
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`@Qa\x13j8\x03\x80a\x13j\x839\x81\x81\x01`@R\x81\x01\x90a\x001\x91\x90a\rwV[_\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0MWa\0La\x0B\xE1V[[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\0\x86W\x81` \x01[a\0sa\x0B5V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0kW\x90P[P\x90P_[\x82Q\x81\x10\x15a\n\xE5W_\x83\x82\x81Q\x81\x10a\0\xA8Wa\0\xA7a\r\xBEV[[` \x02` \x01\x01Q\x90Pa\0\xC1\x81a\x0B\x13` \x1B` \x1CV[\x15a\0\xCCWPa\n\xDAV[_\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c8\xD5.\x0F`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x01\x16W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x01:\x91\x90a\r\xEBV[\x90Pa\x01K\x81a\x0B\x13` \x1B` \x1CV[\x15a\x01WWPPa\n\xDAV[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16aN `@Q`$\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x7F1<\xE5g\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01\x80Q{\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x83\x81\x83\x16\x17\x83RPPPP`@Qa\x02\x03\x91\x90a\x0EhV[_`@Q\x80\x83\x03\x81_\x87\x87\xF1\x92PPP=\x80_\x81\x14a\x02=W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x02BV[``\x91P[P\x91P\x91P\x81\x15\x80a\x02UWP` \x81Q\x14[\x15a\x02cWPPPPa\n\xDAV[_\x81\x80` \x01\x90Q\x81\x01\x90a\x02x\x91\x90a\x0E\xB1V[\x90P_\x81\x14\x80a\x02\x88WP`\xFF\x81\x11[\x15a\x02\x97WPPPPPa\n\xDAV[a\x02\x9Fa\x0B5V[\x85\x81_\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x84\x81`@\x01\x90s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x90\x81s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c1<\xE5g`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03WW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03{\x91\x90a\x0F\x12V[\x81` \x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPP\x81\x81``\x01\x90`\xFF\x16\x90\x81`\xFF\x16\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x18\x16\r\xDD`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03\xE7W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x0B\x91\x90a\x0E\xB1V[\x81`\x80\x01\x81\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x01\xE1\xD1\x14`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04]W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x81\x91\x90a\x0E\xB1V[\x81`\xA0\x01\x81\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEF\x8B0\xF7\x82``\x01Q`\na\x04\xB7\x91\x90a\x10\x99V[`da\x04\xC3\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x04\xDF\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xFAW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\x1E\x91\x90a\x0E\xB1V[\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6\xE6\xF5\x92\x83``\x01Q`\na\x05K\x91\x90a\x10\x99V[`da\x05W\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x05s\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x05\x8EW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xB2\x91\x90a\x0E\xB1V[a\x05\xBC\x91\x90a\x11LV[\x81`\xC0\x01\x81\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xEF\x8B0\xF7\x82``\x01Q`\na\x05\xF2\x91\x90a\x10\x99V[`\xC8a\x05\xFE\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\x1A\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x065W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06Y\x91\x90a\x0E\xB1V[\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6\xE6\xF5\x92\x83``\x01Q`\na\x06\x86\x91\x90a\x10\x99V[`\xC8a\x06\x92\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x06\xAE\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x06\xC9W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x06\xED\x91\x90a\x0E\xB1V[a\x06\xF7\x91\x90a\x11LV[\x81`\xE0\x01\x81\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\xC6\xE6\xF5\x92\x82``\x01Q`\na\x07-\x91\x90a\x10\x99V[`da\x079\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07U\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07pW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x07\x94\x91\x90a\x0E\xB1V[\x81a\x01\0\x01\x81\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cL\xDA\xD5\x06\x82` \x01Q`\na\x07\xCB\x91\x90a\x10\x99V[`da\x07\xD7\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x07\xF3\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\x0EW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x082\x91\x90a\x0E\xB1V[\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x07\xA2\xD1:\x83` \x01Q`\na\x08_\x91\x90a\x10\x99V[`da\x08k\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x08\x87\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x08\xA2W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x08\xC6\x91\x90a\x0E\xB1V[a\x08\xD0\x91\x90a\x11LV[\x81a\x01 \x01\x81\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16cL\xDA\xD5\x06\x82` \x01Q`\na\t\x07\x91\x90a\x10\x99V[`\xC8a\t\x13\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t/\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\tJW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\tn\x91\x90a\x0E\xB1V[\x86s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x07\xA2\xD1:\x83` \x01Q`\na\t\x9B\x91\x90a\x10\x99V[`\xC8a\t\xA7\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\t\xC3\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\t\xDEW=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\x02\x91\x90a\x0E\xB1V[a\n\x0C\x91\x90a\x11LV[\x81a\x01@\x01\x81\x81RPP\x85s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16c\x07\xA2\xD1:\x82` \x01Q`\na\nC\x91\x90a\x10\x99V[`da\nO\x91\x90a\x10\xE3V[`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\nk\x91\x90a\x113V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n\x86W=_\x80>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xAA\x91\x90a\x0E\xB1V[\x81a\x01`\x01\x81\x81RPP\x80\x88\x88\x81Q\x81\x10a\n\xC8Wa\n\xC7a\r\xBEV[[` \x02` \x01\x01\x81\x90RPPPPPPP[\x80`\x01\x01\x90Pa\0\x8BV[P_\x81`@Q` \x01a\n\xF8\x91\x90a\x13IV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x90P` \x81\x01\x80Y\x03\x81\xF3[_\x80\x82s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16;\x14\x90P\x91\x90PV[`@Q\x80a\x01\x80\x01`@R\x80_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\xFF\x16\x81R` \x01_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16\x81R` \x01_`\xFF\x16\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81RP\x90V[_`@Q\x90P\x90V[_\x80\xFD[_\x80\xFD[_\x80\xFD[_`\x1F\x19`\x1F\x83\x01\x16\x90P\x91\x90PV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`A`\x04R`$_\xFD[a\x0C\x17\x82a\x0B\xD1V[\x81\x01\x81\x81\x10g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x17\x15a\x0C6Wa\x0C5a\x0B\xE1V[[\x80`@RPPPV[_a\x0CHa\x0B\xBCV[\x90Pa\x0CT\x82\x82a\x0C\x0EV[\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0CsWa\x0Cra\x0B\xE1V[[` \x82\x02\x90P` \x81\x01\x90P\x91\x90PV[_\x80\xFD[_s\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x16\x90P\x91\x90PV[_a\x0C\xB1\x82a\x0C\x88V[\x90P\x91\x90PV[a\x0C\xC1\x81a\x0C\xA7V[\x81\x14a\x0C\xCBW_\x80\xFD[PV[_\x81Q\x90Pa\x0C\xDC\x81a\x0C\xB8V[\x92\x91PPV[_a\x0C\xF4a\x0C\xEF\x84a\x0CYV[a\x0C?V[\x90P\x80\x83\x82R` \x82\x01\x90P` \x84\x02\x83\x01\x85\x81\x11\x15a\r\x17Wa\r\x16a\x0C\x84V[[\x83[\x81\x81\x10\x15a\r@W\x80a\r,\x88\x82a\x0C\xCEV[\x84R` \x84\x01\x93PP` \x81\x01\x90Pa\r\x19V[PPP\x93\x92PPPV[_\x82`\x1F\x83\x01\x12a\r^Wa\r]a\x0B\xCDV[[\x81Qa\rn\x84\x82` \x86\x01a\x0C\xE2V[\x91PP\x92\x91PPV[_` \x82\x84\x03\x12\x15a\r\x8CWa\r\x8Ba\x0B\xC5V[[_\x82\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xA9Wa\r\xA8a\x0B\xC9V[[a\r\xB5\x84\x82\x85\x01a\rJV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`2`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x0E\0Wa\r\xFFa\x0B\xC5V[[_a\x0E\r\x84\x82\x85\x01a\x0C\xCEV[\x91PP\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x81\x90P\x92\x91PPV[\x82\x81\x83^_\x83\x83\x01RPPPV[_a\x0EB\x82a\x0E\x16V[a\x0EL\x81\x85a\x0E V[\x93Pa\x0E\\\x81\x85` \x86\x01a\x0E*V[\x80\x84\x01\x91PP\x92\x91PPV[_a\x0Es\x82\x84a\x0E8V[\x91P\x81\x90P\x92\x91PPV[_\x81\x90P\x91\x90PV[a\x0E\x90\x81a\x0E~V[\x81\x14a\x0E\x9AW_\x80\xFD[PV[_\x81Q\x90Pa\x0E\xAB\x81a\x0E\x87V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0E\xC6Wa\x0E\xC5a\x0B\xC5V[[_a\x0E\xD3\x84\x82\x85\x01a\x0E\x9DV[\x91PP\x92\x91PPV[_`\xFF\x82\x16\x90P\x91\x90PV[a\x0E\xF1\x81a\x0E\xDCV[\x81\x14a\x0E\xFBW_\x80\xFD[PV[_\x81Q\x90Pa\x0F\x0C\x81a\x0E\xE8V[\x92\x91PPV[_` \x82\x84\x03\x12\x15a\x0F'Wa\x0F&a\x0B\xC5V[[_a\x0F4\x84\x82\x85\x01a\x0E\xFEV[\x91PP\x92\x91PPV[\x7FNH{q\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0_R`\x11`\x04R`$_\xFD[_\x81`\x01\x1C\x90P\x91\x90PV[_\x80\x82\x91P\x83\x90P[`\x01\x85\x11\x15a\x0F\xBFW\x80\x86\x04\x81\x11\x15a\x0F\x9BWa\x0F\x9Aa\x0F=V[[`\x01\x85\x16\x15a\x0F\xAAW\x80\x82\x02\x91P[\x80\x81\x02\x90Pa\x0F\xB8\x85a\x0FjV[\x94Pa\x0F\x7FV[\x94P\x94\x92PPPV[_\x82a\x0F\xD7W`\x01\x90Pa\x10\x92V[\x81a\x0F\xE4W_\x90Pa\x10\x92V[\x81`\x01\x81\x14a\x0F\xFAW`\x02\x81\x14a\x10\x04Wa\x103V[`\x01\x91PPa\x10\x92V[`\xFF\x84\x11\x15a\x10\x16Wa\x10\x15a\x0F=V[[\x83`\x02\n\x91P\x84\x82\x11\x15a\x10-Wa\x10,a\x0F=V[[Pa\x10\x92V[P` \x83\x10a\x013\x83\x10\x16`N\x84\x10`\x0B\x84\x10\x16\x17\x15a\x10hW\x82\x82\n\x90P\x83\x81\x11\x15a\x10cWa\x10ba\x0F=V[[a\x10\x92V[a\x10u\x84\x84\x84`\x01a\x0FvV[\x92P\x90P\x81\x84\x04\x81\x11\x15a\x10\x8CWa\x10\x8Ba\x0F=V[[\x81\x81\x02\x90P[\x93\x92PPPV[_a\x10\xA3\x82a\x0E~V[\x91Pa\x10\xAE\x83a\x0E\xDCV[\x92Pa\x10\xDB\x7F\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x84\x84a\x0F\xC8V[\x90P\x92\x91PPV[_a\x10\xED\x82a\x0E~V[\x91Pa\x10\xF8\x83a\x0E~V[\x92P\x82\x82\x02a\x11\x06\x81a\x0E~V[\x91P\x82\x82\x04\x84\x14\x83\x15\x17a\x11\x1DWa\x11\x1Ca\x0F=V[[P\x92\x91PPV[a\x11-\x81a\x0E~V[\x82RPPV[_` \x82\x01\x90Pa\x11F_\x83\x01\x84a\x11$V[\x92\x91PPV[_a\x11V\x82a\x0E~V[\x91Pa\x11a\x83a\x0E~V[\x92P\x82\x82\x03\x90P\x81\x81\x11\x15a\x11yWa\x11xa\x0F=V[[\x92\x91PPV[_\x81Q\x90P\x91\x90PV[_\x82\x82R` \x82\x01\x90P\x92\x91PPV[_\x81\x90P` \x82\x01\x90P\x91\x90PV[a\x11\xB1\x81a\x0C\xA7V[\x82RPPV[a\x11\xC0\x81a\x0E\xDCV[\x82RPPV[a\x11\xCF\x81a\x0E~V[\x82RPPV[a\x01\x80\x82\x01_\x82\x01Qa\x11\xEA_\x85\x01\x82a\x11\xA8V[P` \x82\x01Qa\x11\xFD` \x85\x01\x82a\x11\xB7V[P`@\x82\x01Qa\x12\x10`@\x85\x01\x82a\x11\xA8V[P``\x82\x01Qa\x12#``\x85\x01\x82a\x11\xB7V[P`\x80\x82\x01Qa\x126`\x80\x85\x01\x82a\x11\xC6V[P`\xA0\x82\x01Qa\x12I`\xA0\x85\x01\x82a\x11\xC6V[P`\xC0\x82\x01Qa\x12\\`\xC0\x85\x01\x82a\x11\xC6V[P`\xE0\x82\x01Qa\x12o`\xE0\x85\x01\x82a\x11\xC6V[Pa\x01\0\x82\x01Qa\x12\x84a\x01\0\x85\x01\x82a\x11\xC6V[Pa\x01 \x82\x01Qa\x12\x99a\x01 \x85\x01\x82a\x11\xC6V[Pa\x01@\x82\x01Qa\x12\xAEa\x01@\x85\x01\x82a\x11\xC6V[Pa\x01`\x82\x01Qa\x12\xC3a\x01`\x85\x01\x82a\x11\xC6V[PPPPV[_a\x12\xD4\x83\x83a\x11\xD5V[a\x01\x80\x83\x01\x90P\x92\x91PPV[_` \x82\x01\x90P\x91\x90PV[_a\x12\xF7\x82a\x11\x7FV[a\x13\x01\x81\x85a\x11\x89V[\x93Pa\x13\x0C\x83a\x11\x99V[\x80_[\x83\x81\x10\x15a\x13<W\x81Qa\x13#\x88\x82a\x12\xC9V[\x97Pa\x13.\x83a\x12\xE1V[\x92PP`\x01\x81\x01\x90Pa\x13\x0FV[P\x85\x93PPPP\x92\x91PPV[_` \x82\x01\x90P\x81\x81\x03_\x83\x01Ra\x13a\x81\x84a\x12\xEDV[\x90P\x92\x91PPV\xFE",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040525f80fdfea2646970667358221220b89620388478ca9b26baf63309948de3c6eb0ad2f9547df262a59f2b096470c264736f6c634300081a0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_\x80\xFD\xFE\xA2dipfsX\"\x12 \xB8\x96 8\x84x\xCA\x9B&\xBA\xF63\t\x94\x8D\xE3\xC6\xEB\n\xD2\xF9T}\xF2b\xA5\x9F+\tdp\xC2dsolcC\0\x08\x1A\x003",
    );
    /**Constructor`.
```solidity
constructor(address[] vaults);
```*/
    #[allow(non_camel_case_types, non_snake_case)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub vaults: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.vaults,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { vaults: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.vaults),
                )
            }
        }
    };
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`GetERC4626VaultDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetERC4626VaultDataBatchRequestInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> GetERC4626VaultDataBatchRequestInstance<T, P, N> {
        GetERC4626VaultDataBatchRequestInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        vaults: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<GetERC4626VaultDataBatchRequestInstance<T, P, N>>,
    > {
        GetERC4626VaultDataBatchRequestInstance::<T, P, N>::deploy(provider, vaults)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        vaults: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        GetERC4626VaultDataBatchRequestInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, vaults)
    }
    /**A [`GetERC4626VaultDataBatchRequest`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`GetERC4626VaultDataBatchRequest`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct GetERC4626VaultDataBatchRequestInstance<
        T,
        P,
        N = alloy_contract::private::Ethereum,
    > {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug
    for GetERC4626VaultDataBatchRequestInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("GetERC4626VaultDataBatchRequestInstance")
                .field(&self.address)
                .finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetERC4626VaultDataBatchRequestInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`GetERC4626VaultDataBatchRequest`](self) contract instance.

See the [wrapper's documentation](`GetERC4626VaultDataBatchRequestInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            vaults: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::Result<GetERC4626VaultDataBatchRequestInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, vaults);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            vaults: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall { vaults },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<
        T,
        P: ::core::clone::Clone,
        N,
    > GetERC4626VaultDataBatchRequestInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(
            self,
        ) -> GetERC4626VaultDataBatchRequestInstance<T, P, N> {
            GetERC4626VaultDataBatchRequestInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetERC4626VaultDataBatchRequestInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > GetERC4626VaultDataBatchRequestInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
